count,jianjie,author,url,title,content,cete,date
466,理性看待ICO，却无需对区块链失去信心。对于区块链来说，这一切才刚刚开始，这次声势浩大的ICO监管将区块链这个看似深奥的概念提到大众面前，区块链技术也即将像大热的人工智能一样，全民关注，全民了解。,Blockchain_lemon,http://blog.csdn.net/blockchain_lemon/article/details/77853523,ICO惨遭团灭，区块链技术是福是祸？,"<div class=""markdown_views""><p>今年上半年，随着以比特币为代表的虚拟货币价格暴增，ICO（Initial Coin Offering 首次代币发行）这种新型融资方式在国内迅速发展，大量山寨币层出不穷。光上半年，通过ICO获得的融资金额已经超过了传统VC的投资，ICO累计融资规模达26.16亿元人民币。</p>



<h3 id=""乱象丛生折射黄金光芒的-ico-泡沫终于破灭了"">乱象丛生、折射黄金光芒的 ICO 泡沫终于破灭了</h3>

<p>现在这场堪称疯狂的资产泡沫，已经破灭。9月2日，由亚洲DACA区块链协会、内蒙古乌海市政府主办的<a href=""DACA%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9B%BD%E9%99%85%E9%AB%98%E5%B3%B0%E8%AE%BA%E5%9D%9B%E4%B8%B4%E6%97%B6%E5%8F%96%E6%B6%88%20%E6%88%96%E7%B3%BB%E7%9B%91%E7%AE%A1%E4%BB%8B%E5%85%A5ICO%E4%BF%A1%E5%8F%B7"">“2017DACA区块链国际高峰论坛”在活动开始前一天突然被叫停</a>，这已经是最近相关部门对区块链活动的第二次“出手”。</p>

<p></p><center><img src=""http://img.blog.csdn.net/20170905115420242"" alt=""图片描述"" title=""""></center><p></p>

<p>9月4日下午，央行等7部委联合发布《<a href=""http://www.pbc.gov.cn/goutongjiaoliu/113456/113469/3374222/index.html"">关于防范代币发行融资风险的公告</a>》，《公告》指出，近期国内通过发行代币形式包括首次代币发行（ICO）进行融资的活动大量涌现，投机炒作盛行，涉嫌从事非法金融活动，严重扰乱了经济金融秩序。本公告发布之日起，各类代币发行融资活动应当立即停止。</p>

<p>公告发布之后，各类虚拟货币价格迎来断崖式暴跌。截至目前，火币网的比特币售价为24000元，而上一周，这个价格还维持在30000元左右。监管政策的出台给了重重迷障，人人都想割韭菜的ICO一记重创，将这场全民参与的“靠着一本白皮书就坐收千万”，“坐等代币涨价，人人走向致富梦”的闹剧遏制在了没有产生更大的影响之前。</p>



<h3 id=""泡沫之下的啤酒ico-究竟关区块链什么事儿"">泡沫之下的啤酒：ICO 究竟关区块链什么事儿？</h3>

<p>披着区块链外衣的疯狂ICO犹如一杯充满泡沫的啤酒，被监管政策吹破泡沫之后，底层剩下的啤酒——区块链技术，才是我们真正应该关注的对象。值得注意的是，一千多字的监管公告，一次都没有提到区块链，这背后，也代表着有关部门对于区块链的态度。区块链作为一项巨大的技术创新，抛却那些打着区块链幌子却根本空无一物的ICO，我们应该看到它真正的价值和意义。</p>

<p><img src=""http://img.blog.csdn.net/20170905122302535"" alt=""图片描述"" title=""""></p>

<p>区块链技术是利用块链式数据结构来验证和存储数据，利用分布式节点共识算法来生成和更新数据，利用密码学的方式保证数据传输和访问的安全，利用自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础结构与设计范式。区块链拥有去中心化、不可篡改、唯一可信任、匿名性的特点，在金融、防伪溯源、版权保护等方面拥有诸多应用。将区块链技术应用在合适的领域，才能发挥出该有的价值。</p>



<h3 id=""清场之后从国家层面深入探索区块链技术发展之道"">清场之后，从国家层面深入探索区块链技术发展之道</h3>

<p>去年十月，工信部率先发布《中国区块链技术和应用发展白皮书》,从国家层面、政府层面深入探索全球区块链发展趋势；去年12月,国务院印发的《“十三五”国家信息化规划》中,明确将区块链列入战略性前沿技术的范畴；今年五月，中国电子技术标准化研究院区块链研究室发布了首个区块链标准《区块链 参考架构》。</p>

<p>近日，工信部直属中国电子信息产业发展研究院会同北京天德科技有限公司发起设立的赛迪（青岛）区块链研究院落户青岛。我国千人计划专家、北航数字科技与区块链实验室主任蔡维德成为该项目首席科学家。他认为，<a href=""http://www.gov.cn/xinwen/2017-09/05/content_5222688.htm"">我国区块链产业有望走在世界前列</a>。</p>

<p>国家对于区块链技术的肯定和扶持不言而喻。</p>

<p>理性看待ICO，却无需对区块链失去信心。对于区块链来说，这一切才刚刚开始，这次声势浩大的ICO监管将区块链这个看似深奥的概念提到大众面前，区块链技术也即将像大热的人工智能一样，全民关注，全民了解。</p>

<p>对于开发者而言，监管无疑是好事。从产业层面将区块链的发展从“假大空”变为了“做实事”；从个人发展层面，当前中国区块链企业人才严重不足，特别是掌握区块链核心底层技术的区块链人才严重欠缺，这给广大开发者带来了巨大的机会，提前入场掌握这项即将成为潮流的技术。</p>

<p>让区块链回归技术和应用的本质，用之有道，方为上策。而如何更好的将区块链技术与当下应用场景结合，发挥出它原本的力量，才是目前我们最应该关注的事情。</p>

<p><img src=""http://img.blog.csdn.net/20170904105147002"" alt=""图片描述"" title=""""></p><link rel=""stylesheet"" href=""http://static.blog.csdn.net/public/res-min/markdown_views.css?v=1.0""></div>",互联网,昨天 17:09
35578,Android WebView加载了Chromium动态库之后，就可以启动Chromium渲染引擎了。Chromium渲染引擎由Browser、Render和GPU三端组成。其中，Browser端负责...,Luoshengyang,http://blog.csdn.net/luoshengyang/article/details/53237189,Android WebView启动Chromium渲染引擎的过程分析,,"移动开发,老罗的Android之旅",2016-12-05 11:39
2031,"前情提要上集讲到, 小光请来堂哥大龙作为自己的代理与饮品供应商谈判, 最终大龙用自己丰富的商场经验帮小光拿到合适的价格.小光也是尝到了代理的甜头, 开始将店里的更多工作交给表妹来打理, 自己腾出功夫去...",anly_jun,http://blog.csdn.net/anly_jun/article/details/53484203,创业街分店开张啦---原型模式,"<div class=""markdown_views""><h2 id=""前情提要"">前情提要</h2>

<p><a href=""http://blog.lmj.wiki/2016/11/28/design-pattern/proxy/"">上集</a>讲到, 小光请来堂哥大龙作为自己的<strong><a href=""http://blog.lmj.wiki/2016/11/28/design-pattern/proxy/"">代理</a></strong>与饮品供应商谈判, 最终大龙用自己丰富的商场经验帮小光拿到合适的价格.</p>

<p>小光也是尝到了<strong>代理</strong>的甜头, 开始将店里的更多工作交给表妹来打理, 自己腾出功夫去选新的分店地址了.</p>

<!-- more -->

<blockquote>
  <p>所有示例源码已经上传到Github, <a href=""https://github.com/mingjunli/JavaDesignPatterns"">戳这里</a></p>
</blockquote>



<h2 id=""新店建设"">新店建设</h2>

<p>根据光谷店的经营经验, 很快, 小光就选好了分店的地址—创业街. 还是为了造福广大屌丝单身程序猿们啊, 哈哈.</p>

<p>分店的建设相对第一家店的开辟来说也是简单了很多, 在光谷店的探索, 诸如热干面生产流程, 饮料机机制, 活动策略等都可以复制过来用. 简单来说, 就是复制成功原型, 如下:</p>

<p><strong>照例, 抽象出一个公司的类:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Company</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">Cloneable</span> {</span>

    <span class=""hljs-comment"">// 此处我们假装省略了N多, 诸如活动策略, 饮料机, 热干面生产流程等.</span>
    <span class=""hljs-comment"">// 再此仅以饮品为例</span>
    <span class=""hljs-keyword"">private</span> ArrayList&lt;String&gt; drinks = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();

    <span class=""hljs-keyword"">private</span> String name;

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getName</span>() {
        <span class=""hljs-keyword"">return</span> name;
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setName</span>(String name) {
        <span class=""hljs-keyword"">this</span>.name = name;
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">addDrink</span>(String drink) {
        drinks.add(drink);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

        Company company = <span class=""hljs-keyword"">null</span>;
        <span class=""hljs-keyword"">try</span> {
            company = (Company) <span class=""hljs-keyword"">super</span>.clone();
        } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        <span class=""hljs-keyword"">return</span> company;
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">toString</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""{""</span> +
                <span class=""hljs-string"">""名字: '""</span> + getName() + <span class=""hljs-string"">'\''</span> +
                <span class=""hljs-string"">"", 饮品: ""</span> + drinks  + <span class=""hljs-string"">'\''</span> +
                <span class=""hljs-string"">'}'</span>;
    }
}</code></pre>

<p><strong>光谷店:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">OpticalValleyCompany</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Company</span> {</span>

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">OpticalValleyCompany</span>() {
        setName(<span class=""hljs-string"">""光谷软件园分店""</span>);
        addDrink(<span class=""hljs-string"">""橙汁""</span>);
        addDrink(<span class=""hljs-string"">""可乐""</span>);
        addDrink(<span class=""hljs-string"">""酸梅汤""</span>);
    }
}</code></pre>

<p><strong>看下小光是如何复制光谷店的成功, 创建新的创业街分店的:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">XiaoGuang</span> {</span>

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">main</span>(String[] args) {

        <span class=""hljs-comment"">// new 光谷店</span>
        Company ovCompany = <span class=""hljs-keyword"">new</span> OpticalValleyCompany();
        System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);

        <span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
        Company sbiCompany = ovCompany.clone();
        sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);
        System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);
    }
}</code></pre>

<p><strong>output:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs "">光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}
SBI店: {名字: '</span>创业街分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤]'</span>}</code></pre>

<p>看样子很成功, 小光开始准备试运营了.</p>



<h2 id=""试运营"">试运营</h2>

<p>小光信心满满的开始了新店的试运营. 为了庆祝分店开张, 小光新拿了一款饮料XDrink在新店做活动, 买热干面赠送饮料.</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
Company sbiCompany = ovCompany.clone();
sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);

<span class=""hljs-comment"">// 给SBI店新增一款饮品</span>
sbiCompany.addDrink(<span class=""hljs-string"">""雪碧""</span>);

System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);</code></pre>

<p>这时, SBI店的饮品列表是:</p>



<pre class=""prettyprint""><code class="" hljs http""><span class=""hljs-attribute"">SBI店</span>: <span class=""hljs-string"">{名字: '创业街分店', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'}</span></code></pre>

<p>看着很好, Perfect. <br>
然而, 这时, 表妹打来电话了, 说我光谷店这边的菜单系统怎么无端多出一款雪碧的饮料啊, 我这没有提供的啊, 怎么给客户啊.</p>

<p>小光立马打印了下光谷店的信息(基于上面的修改):</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">// 在光谷店的基础上clone <span class=""hljs-keyword"">SBI</span>店
Company sbiCompany = ovCompany<span class=""hljs-preprocessor"">.clone</span>()<span class=""hljs-comment"">;</span>
sbiCompany<span class=""hljs-preprocessor"">.setName</span>(<span class=""hljs-string"">""创业街分店""</span>)<span class=""hljs-comment"">;</span>

// 给<span class=""hljs-keyword"">SBI</span>店新增一款饮品
sbiCompany<span class=""hljs-preprocessor"">.addDrink</span>(<span class=""hljs-string"">""雪碧""</span>)<span class=""hljs-comment"">;</span>

System<span class=""hljs-preprocessor"">.out</span><span class=""hljs-preprocessor"">.println</span>(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany)<span class=""hljs-comment"">;</span>

// 打印下光谷店ovCompany
System<span class=""hljs-preprocessor"">.out</span><span class=""hljs-preprocessor"">.println</span>(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany)<span class=""hljs-comment"">;</span></code></pre>

<p>果然, 光谷店新增了”雪碧”, </p>



<pre class=""prettyprint""><code class=""language-java hljs "">SBI店: {名字: <span class=""hljs-string"">'创业街分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]<span class=""hljs-string"">'}
光谷店: {名字: '</span>光谷软件园分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'</span>}</code></pre>

<p>这样当然是不好的咯, 小光只想复制光谷店的基本流程架构过来, 后续两个店的某些方面还是要分开发展的, 可不能一改俱改啊.</p>



<h2 id=""改进之路"">改进之路</h2>

<p>小光又开始了clone的改进之路. 先回头看下, 小光之前是怎么clone的:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span>
<span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

   Company company = <span class=""hljs-keyword"">null</span>;
   <span class=""hljs-keyword"">try</span> {
       company = (Company) <span class=""hljs-keyword"">super</span>.clone();
   } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
       e.printStackTrace();
   }
   <span class=""hljs-keyword"">return</span> company;
}</code></pre>

<p>我们注意到, 这个clone只是clone了Company, 并没有clone Company内部的引用(ArrayList drinks). <strong>也就是说clone出来的对象和之前的对象会使用同一份drinks列表</strong><sup>注1</sup>, 这显然不是小光愿意看到的.</p>

<p>小光也很快想到了解决方案, 改造了clone过程:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span>
<span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

   Company company = <span class=""hljs-keyword"">null</span>;
   <span class=""hljs-keyword"">try</span> {
       company = (Company) <span class=""hljs-keyword"">super</span>.clone();

       <span class=""hljs-comment"">// 对于对象的属性也加以clone</span>
       company.drinks = (ArrayList&lt;String&gt;) <span class=""hljs-keyword"">this</span>.drinks.clone();
   } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
       e.printStackTrace();
   }
   <span class=""hljs-keyword"">return</span> company;
}</code></pre>

<p><strong>这次小光不仅clone了Company, 还clone了其属性值drinks</strong><sup>注2</sup>.</p>

<p>让我们来看下小光的成果:</p>

<p><strong>和之前同样的使用:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-comment"">// new 光谷店</span>
Company ovCompany = <span class=""hljs-keyword"">new</span> OpticalValleyCompany();
System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);

<span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
Company sbiCompany = ovCompany.clone();
sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);

<span class=""hljs-comment"">// 给SBI店新增一款饮品</span>
sbiCompany.addDrink(<span class=""hljs-string"">""雪碧""</span>);

System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);
System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);</code></pre>

<p><strong>改造后的结果:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs "">光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}
SBI店: {名字: '</span>创业街分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'</span>}
光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}</span></code></pre>

<p>我们看到, 光谷店不会因为SBI店的改变而改变了. <br>
小光热干面SBI店试运营正式开始, 欢迎大家光临咯…</p>



<h2 id=""故事之后"">故事之后</h2>

<p>我们在故事中多次提到了clone, 原型. 没错, 这个就是原型模式. 照例, 我们来梳理下类之间的关系, 相对简单: <br>
<img src=""http://oat9lzupi.bkt.clouddn.com/14809331313429.jpg"" alt="""" title=""""></p>

<blockquote>
  <p>原型模式: <br>
  通过原型对象实例, 使用clone的方式来快速创建一个新的(与原型对象实例一致的)对象实例.</p>
</blockquote>

<p><strong>由于原型模式较为通用, 且相对简单, Java中的最基类Object已经提供了clone方法, 来方便我们复制出新的对象实例.</strong></p>



<h2 id=""扩展阅读一"">扩展阅读一</h2>

<p>上述故事中, 我们在某些加了<sup>注1</sup>, <sup>注2</sup>的标签. 这就是我们今天的扩展阅读一要注意的内容: </p>

<blockquote>
  <p><sup>注1</sup> 浅拷贝 <br>
  <sup>注2</sup> 深拷贝</p>
</blockquote>

<p>其实, 跟随故事我们也大致了解了浅拷贝和深拷贝的区别:</p>

<ul>
<li><strong>浅拷贝</strong>对于要克隆的对象, 会复制其基本数据类型(包括String)的属性(本例中的name属性)的<strong>值</strong>给新的对象. 而对于非基本数据类型的属性(本例中的drinks), 仅仅复制一份<strong>引用</strong>给新产生的对象, 即新产生的对象和原始对象中的非基本数据类型的属性都指向的是同一个对象.</li>
<li><strong>深拷贝</strong>   对于要克隆的对象, clone出的非基本数据类型的属性(要求属性也实现了Cloneable接口, ArrayList就已经自带实现了)不再是和原对象指向同一个对象了, 而是一个新的clone出来的属性对象实例.</li>
</ul>

<p>如下:</p>

<p><img src=""http://oat9lzupi.bkt.clouddn.com/14809352540535.jpg"" alt="""" title=""""></p>



<h2 id=""扩展阅读二"">扩展阅读二</h2>

<p>如果我们查看java源码, 可以发现, 我们调用的clone()方法是Object对象的. 而不是Cloneable接口的. 那么我们为什么要实现Cloneable接口呢? 不识闲Cloneable接口可否调用Object的clone()方法呢?</p>

<p>我们先来看下Cloneable接口的源码:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">Cloneable</span> {</span>
}</code></pre>

<p>发现其中并没有任何方法. 幸运的是Java源码的java doc注释足够清晰:</p>



<pre class=""prettyprint""><code class="" hljs applescript"">/**
 * A <span class=""hljs-type"">class</span> implements <span class=""hljs-keyword"">the</span> &lt;code&gt;Cloneable&lt;/code&gt; interface <span class=""hljs-keyword"">to</span>
 * indicate <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">the</span> {@link java.lang.Object<span class=""hljs-comment"">#clone()} method that it</span>
 * <span class=""hljs-keyword"">is</span> legal <span class=""hljs-keyword"">for</span> <span class=""hljs-keyword"">that</span> method <span class=""hljs-keyword"">to</span> make a
 * field-<span class=""hljs-keyword"">for</span>-field <span class=""hljs-keyword"">copy</span> <span class=""hljs-keyword"">of</span> instances <span class=""hljs-keyword"">of</span> <span class=""hljs-keyword"">that</span> <span class=""hljs-type"">class</span>.
 * &lt;p&gt;
 * Invoking Object's clone method <span class=""hljs-function_start""><span class=""hljs-keyword"">on</span></span> an instance <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">does</span> <span class=""hljs-keyword"">not</span> implement <span class=""hljs-keyword"">the</span>
 * &lt;code&gt;Cloneable&lt;/code&gt; interface results <span class=""hljs-keyword"">in</span> <span class=""hljs-keyword"">the</span> exception
 * &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.
 * &lt;p&gt;
 * By convention, classes <span class=""hljs-keyword"">that</span> implement this interface should override
 * &lt;tt&gt;Object.clone&lt;/tt&gt; (which <span class=""hljs-keyword"">is</span> protected) <span class=""hljs-keyword"">with</span> a public method.
 * See {@link java.lang.Object<span class=""hljs-comment"">#clone()} for details on overriding this</span>
 * method.
 * &lt;p&gt;
 * Note <span class=""hljs-keyword"">that</span> this interface <span class=""hljs-keyword"">does</span> &lt;i&gt;<span class=""hljs-keyword"">not</span>&lt;/i&gt; <span class=""hljs-keyword"">contain</span> <span class=""hljs-keyword"">the</span> &lt;tt&gt;clone&lt;/tt&gt; method.
 * Therefore, <span class=""hljs-keyword"">it</span> <span class=""hljs-keyword"">is</span> <span class=""hljs-keyword"">not</span> possible <span class=""hljs-keyword"">to</span> clone an object merely <span class=""hljs-keyword"">by</span> virtue <span class=""hljs-keyword"">of</span> <span class=""hljs-keyword"">the</span>
 * fact <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">it</span> implements this interface.  Even <span class=""hljs-keyword"">if</span> <span class=""hljs-keyword"">the</span> clone method <span class=""hljs-keyword"">is</span> invoked
 * reflectively, there <span class=""hljs-keyword"">is</span> no guarantee <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">it</span> will succeed.
 */</code></pre>

<p>大体我们可以理解几点:</p>

<ol>
<li>Cloneable可以看着是一个标识, 实现了改接口的类才能合法地调用其从Object类中继承而来的clone()方法.</li>
<li>如果没有实现Cloneable接口而调用clone()方法, 会触发CloneNotSupportedException异常.</li>
<li>实现Cloneable接口的类应当重写Object的clone()方法.</li>
</ol>



<h2 id=""扩展阅读三"">扩展阅读三</h2>

<p>原型模式也是一种创建型的设计模式, 一般会结合工厂模式一起使用, 来构建对象. 本例中就不扩展了.</p>

<hr>

<p>好了, 小光热干面创业街分店开张啦, 吃热干面赠雪碧了, 欢迎大家光临, 欢迎大家关注.</p></div>",架构,2016-12-06 12:16
5773,"【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式
  无意中看到了百度的加载动画，看起来非常优雅，打算亲手造一个。  仿百度加载动画的重要思路：当第一遍执行完毕后就让...",u010785585,http://blog.csdn.net/linglongxin24/article/details/53470872,【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式,"<div class=""markdown_views""><blockquote>
  <p>转载请注明出处：<a href=""http://blog.csdn.net/linglongxin24/article/details/53470872""><font color=""blue"">http://blog.csdn.net/linglongxin24/article/details/53470872</font>  </a>  <br>
  本文出自<a href=""http://blog.csdn.net/linglongxin24""><font color=""blue"">【DylanAndroid的博客】</font>  </a></p>
</blockquote>

<hr>

<p></p><div class=""toc"">
<ul>
<li><a href=""#android%E8%87%AA%E5%AE%9A%E4%B9%89view%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E4%B8%80%E7%A7%8D%E4%BC%98%E9%9B%85%E7%9A%84loading%E6%96%B9%E5%BC%8F"">Android自定义View实战之仿百度加载动画一种优雅的Loading方式</a></li>
<li><a href=""#%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E7%94%A8objectanimator%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E6%93%8D%E4%BD%9Cimageview%E7%9A%84%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0"">第一个仿百度加载动画用ObjectAnimator属性动画操作ImageView的属性方法实现</a></li>
<li><a href=""#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E7%94%A8valueanimator%E5%8E%9F%E7%94%9F%E7%9A%84ondraw%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0"">第二个仿百度加载动画第二种实现方式用ValueAnimator原生的ondraw方法实现</a></li>
<li><a href=""#%E7%AC%AC%E4%B8%89%E4%B8%AA%E6%89%94%E7%90%83%E5%8A%A8%E7%94%BB-%E6%B0%B4%E5%B9%B3%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB"">第三个扔球动画-水平旋转动画</a></li>
<li><a href=""#%E7%AC%AC%E5%9B%9B%E4%B8%AA%E6%89%94%E7%90%83%E5%8A%A8%E7%94%BB-%E5%9E%82%E7%9B%B4%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB"">第四个扔球动画-垂直旋转动画</a></li>
<li><a href=""#github"">GitHub</a></li>
</ul>
</div>


<h1 id=""android自定义view实战之仿百度加载动画一种优雅的loading方式"">【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式</h1>

<blockquote>
  <p>无意中看到了百度的加载动画，看起来非常优雅，打算亲手造一个。</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/baiduloading.gif?raw=true"" alt=""效果图"" title=""""></p>

<blockquote>
  <p>仿百度加载动画的重要思路：当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画， <br>
   以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/effect.gif?raw=true"" alt=""效果图"" title=""""></p>



<h1 id=""第一个仿百度加载动画用objectanimator属性动画操作imageview的属性方法实现"">第一个：仿百度加载动画，用ObjectAnimator属性动画操作ImageView的属性方法实现：</h1>

<ul>
<li>1.布局文件</li>
</ul>



<pre class=""prettyprint""><code class=""language-xml hljs ""><span class=""hljs-pi"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-title"">FrameLayout</span> <span class=""hljs-attribute"">xmlns:android</span>=<span class=""hljs-value"">""http://schemas.android.com/apk/res/android""</span>
    <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""500px""</span>
    <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""500px""</span>
    <span class=""hljs-attribute"">android:orientation</span>=<span class=""hljs-value"">""vertical""</span>&gt;</span>

    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_blue""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_blue""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_yellow""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_yellow""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_red""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_red""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">FrameLayout</span>&gt;</span></code></pre>

<ul>
<li>2.代码</li>
</ul>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * 仿百度优雅的加载动画
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressBar</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 开始执行的第一个动画的索引，
     * 由于第一个和第二个同时当执行，
     * 当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画，
     * 以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> startIndex = <span class=""hljs-number"">0</span>;
    <span class=""hljs-javadoc"">/**
     * 交换执行动画的源图片数组
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span>[] src = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">int</span>[]{R.mipmap.dot_yellow, R.mipmap.dot_red, R.mipmap.dot_blue};
    <span class=""hljs-javadoc"">/**
     * 存放三个ImageView的的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();
    <span class=""hljs-javadoc"">/**
     * 让左边和右边动画同时执行的AnimatorSet对象
     */</span>
    <span class=""hljs-keyword"">private</span> AnimatorSet animatorSet;

    <span class=""hljs-javadoc"">/**
     * 动画所执行的最大半径（即中间点和最左边的距离）
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> maxRadius = <span class=""hljs-number"">200</span>;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-javadoc"">/**
     * 查找布局控件
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-javadoc"">/**
     * 初始化
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator();
    }

    <span class=""hljs-javadoc"">/**
     * 开始执行动画
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        <span class=""hljs-javadoc"">/**向左来回移动的X位移动画**/</span>
        ObjectAnimator objectAnimatorLeft = ObjectAnimator.ofFloat(views.get(<span class=""hljs-number"">0</span>), <span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, -maxRadius, <span class=""hljs-number"">0</span>);
        objectAnimatorLeft.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimatorLeft.setDuration(<span class=""hljs-number"">1000</span>);

        <span class=""hljs-javadoc"">/**向右来回移动的X位移动画**/</span>
        ObjectAnimator  objectAnimatorRight = ObjectAnimator.ofFloat(views.get(<span class=""hljs-number"">1</span>), <span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, maxRadius, <span class=""hljs-number"">0</span>);
        objectAnimatorRight.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimatorRight.setDuration(<span class=""hljs-number"">1000</span>);

        <span class=""hljs-javadoc"">/**动画组合-&gt;让左右同时执行**/</span>
        animatorSet = <span class=""hljs-keyword"">new</span> AnimatorSet();
        animatorSet.play(objectAnimatorRight).with(objectAnimatorLeft);
        animatorSet.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        animatorSet.start();

        <span class=""hljs-javadoc"">/**动画监听**/</span>
        objectAnimatorLeft.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                <span class=""hljs-javadoc"">/**每次记录一下下次应该停止在中间的Image索引，然后和中间的交换**/</span>
                <span class=""hljs-keyword"">if</span> (startIndex == <span class=""hljs-number"">0</span>) {
                    sweep(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">2</span>);
                    startIndex = <span class=""hljs-number"">1</span>;
                } <span class=""hljs-keyword"">else</span> {
                    sweep(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);
                    startIndex = <span class=""hljs-number"">0</span>;
                }
            }
        });

    }

    <span class=""hljs-javadoc"">/**
     * 每次让先执行动画的目标和中间停止的动画目标交换
     *
     *<span class=""hljs-javadoctag""> @param</span> a 最先执行的动画的索引
     *<span class=""hljs-javadoctag""> @param</span> b 在中间动画的索引
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">sweep</span>(<span class=""hljs-keyword"">int</span> a, <span class=""hljs-keyword"">int</span> b) {
        views.get(a).setImageResource(src[b]);
        views.get(b).setImageResource(src[a]);
        <span class=""hljs-keyword"">int</span> temp = src[b];
        src[b] = src[a];
        src[a] = temp;
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        animatorSet.cancel();
    }
}
</code></pre>



<h1 id=""第二个仿百度加载动画第二种实现方式用valueanimator原生的ondraw方法实现"">第二个：仿百度加载动画第二种实现方式，用ValueAnimator+原生的ondraw()方法实现：</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.ValueAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.graphics.Canvas;
<span class=""hljs-keyword"">import</span> android.graphics.Paint;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.util.Log;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.View;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * 仿百度优雅的加载动画
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressBar2</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">View</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 开始执行的第一个动画的索引，
     * 由于第一个和第二个同时当执行，
     * 当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画，
     * 以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sweepIndex = <span class=""hljs-number"">0</span>;
    <span class=""hljs-javadoc"">/**
     * 交换执行动画的颜色数组
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span>[] colors = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">int</span>[]{getResources().getColor(R.color.colorYellow),
            getResources().getColor(R.color.colorRed),
            getResources().getColor(R.color.colorBlue)};

    <span class=""hljs-javadoc"">/**
     * 动画所执行的最大偏移量（即中间点和最左边的距离）
     */</span>
    <span class=""hljs-keyword"">private</span> Float maxWidth = <span class=""hljs-number"">200</span>f;

    <span class=""hljs-javadoc"">/**
     * 三个圆的半径
     */</span>
    <span class=""hljs-keyword"">private</span> Float radius = <span class=""hljs-number"">30</span>f;

    <span class=""hljs-javadoc"">/**
     * 当前偏移的X坐标
     */</span>
    <span class=""hljs-keyword"">private</span> Float currentX = <span class=""hljs-number"">0</span>f;
    <span class=""hljs-javadoc"">/**
     * 画笔
     */</span>
    <span class=""hljs-keyword"">private</span> Paint paint;
    <span class=""hljs-javadoc"">/**
     * 属性动画
     */</span>
    <span class=""hljs-keyword"">private</span> ValueAnimator valueAnimator;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        startAnimator();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        startAnimator();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        startAnimator();
    }

    <span class=""hljs-javadoc"">/**
     * 用属性动画实现位移动画
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>f, maxWidth, <span class=""hljs-number"">0</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                currentX = (Float) animation.getAnimatedValue();
                invalidate();
            }
        });
        valueAnimator.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                sweep(sweepIndex);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        paint = <span class=""hljs-keyword"">new</span> Paint(Paint.ANTI_ALIAS_FLAG);
        valueAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        valueAnimator.setRepeatMode(ValueAnimator.REVERSE);
        valueAnimator.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator.start();
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDraw</span>(Canvas canvas) {
        <span class=""hljs-keyword"">super</span>.onDraw(canvas);
        <span class=""hljs-keyword"">int</span> centerX = getWidth() / <span class=""hljs-number"">2</span>;
        <span class=""hljs-keyword"">int</span> centerY = getHeight() / <span class=""hljs-number"">2</span>;

        <span class=""hljs-javadoc"">/**画左边的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">0</span>]);
        canvas.drawCircle(centerX - currentX, centerY, radius, paint);

        <span class=""hljs-javadoc"">/**画右边的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">1</span>]);
        canvas.drawCircle(centerX + currentX, centerY, radius, paint);

        <span class=""hljs-javadoc"">/**画中间的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">2</span>]);
        canvas.drawCircle(centerX, centerY, radius, paint);

    }

    <span class=""hljs-javadoc"">/**
     * 每次让先执行动画的目标和中间停止的动画目标交换
     *
     *<span class=""hljs-javadoctag""> @param</span> a 最先执行的动画的索引
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">sweep</span>(<span class=""hljs-keyword"">int</span> a) {
        <span class=""hljs-keyword"">int</span> temp = colors[<span class=""hljs-number"">2</span>];
        colors[<span class=""hljs-number"">2</span>] = colors[a];
        colors[a] = temp;

        <span class=""hljs-keyword"">if</span> (a == <span class=""hljs-number"">0</span>) {
            sweepIndex = <span class=""hljs-number"">1</span>;
        } <span class=""hljs-keyword"">else</span> {
            sweepIndex = <span class=""hljs-number"">0</span>;
        }
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        valueAnimator.cancel();
    }
}
</code></pre>

<blockquote>
  <p>在经过以上的动画之后，突然在<a href=""http://www.ui.cn/detail/73226.html"">Loading设计思路分享</a>中看到了两个比较酷炫的动画 <br>
  主要思路图如下</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/demo.gif?raw=true"" alt=""效果图"" title=""""> <br>
 <img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/sl1.jpg?raw=true"" alt=""效果图"" title=""""> <br>
 <img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/sl2.gif?raw=true"" alt=""效果图"" title=""""></p>



<h1 id=""第三个扔球动画-水平旋转动画"">第三个：扔球动画-&gt;水平旋转动画</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.PropertyValuesHolder;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.util.Log;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduLoadingView</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 存放三个小球的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();
    <span class=""hljs-javadoc"">/**
     * 同时播放动画的对象
     */</span>
    <span class=""hljs-keyword"">private</span> AnimatorSet animatorSet;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-javadoc"">/**
     * 初始化
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        <span class=""hljs-javadoc"">/**动画组合-&gt;让左右同时执行**/</span>
        animatorSet = <span class=""hljs-keyword"">new</span> AnimatorSet();
        animatorSet.play(startAnimator1()).with(startAnimator2()).with(startAnimator3());
        animatorSet.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        animatorSet.start();
    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator1</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">0</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;

    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator2</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">1</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;

    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator3</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>f, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>f, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">2</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        animatorSet.cancel();
    }
}
</code></pre>



<h1 id=""第四个扔球动画-垂直旋转动画"">第四个：扔球动画-&gt;垂直旋转动画</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.PropertyValuesHolder;
<span class=""hljs-keyword"">import</span> android.animation.ValueAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.graphics.PointF;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressLoading</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>

    <span class=""hljs-javadoc"">/**
     * 存放三个小球的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator1();
        startAnimator2();
        startAnimator3();
    }

    PointF point = <span class=""hljs-keyword"">new</span> PointF();

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator1</span>() {
        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">90</span>, <span class=""hljs-number"">360</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">750</span>);
        valueAnimator.start();

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">180</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.setStartDelay(<span class=""hljs-number"">750</span>);
        valueAnimator2.start();


        ValueAnimator valueAnimator3 = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">90</span>);
        valueAnimator3.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator3.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator3.setDuration(<span class=""hljs-number"">250</span>);
        valueAnimator3.setStartDelay(<span class=""hljs-number"">1750</span>);
        valueAnimator3.start();
        valueAnimator3.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator1();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator2</span>() {

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">180</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">1</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">1</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.start();

        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">360</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">1</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">1</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator.setStartDelay(<span class=""hljs-number"">1000</span>);
        valueAnimator.start();
        valueAnimator.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator2();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator3</span>() {

        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">270</span>, <span class=""hljs-number"">180</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">250</span>);
        valueAnimator.start();

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">360</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.setStartDelay(<span class=""hljs-number"">250</span>);
        valueAnimator2.start();


        ValueAnimator valueAnimator3 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, -<span class=""hljs-number"">90</span>);
        valueAnimator3.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator3.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator3.setDuration(<span class=""hljs-number"">750</span>);
        valueAnimator3.setStartDelay(<span class=""hljs-number"">1250</span>);
        valueAnimator3.start();
        valueAnimator3.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator3();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }
}
</code></pre>



<h1 id=""github""><a href=""https://github.com/linglongxin24/BaiduProgressBar"">GitHub</a></h1></div>","移动开发,Android自定义View",2016-12-06 12:45
3331,"一、简介

最近开始写一些文章记录一下以前的一些自己写的小项目或者是定义View积累，积灰的东西还是要多翻出来整理整理看看的，在我的csdn上也有。这个只完成了一部分燃起熄灭的动画，没有为何燃起火焰的...",XIONG_1203,http://blog.csdn.net/xiong_1203/article/details/53470230,Android动画之萌萌哒蜡烛吹蜡烛动画,"<div class=""markdown_views""><h1 id=""一简介"">一、简介</h1>

<p>最近开始写一些文章记录一下以前的一些自己写的小项目或者是定义View积累，积灰的东西还是要多翻出来整理整理看看的，在<a href=""http://blog.csdn.net/xiong_1203"">我的csdn</a>上也有。<strong>这个只完成了一部分燃起熄灭的动画，没有为何燃起火焰的动画，希望有兴趣的同学也可以接着完成并分享</strong>，话不多说，我们来看这两根萌萌的小蜡烛。 <br>
<img title="""" alt=""candle.gif"" src=""http://upload-images.jianshu.io/upload_images/2934422-4a764875c3a9863a.gif?imageMogr2/auto-orient/strip""> <br>
小蜡烛憋足气把火焰燃起，一下被旁边的哥们吹灭了 0^0 ,看起来还是萌气十足的啊。看着图大家应该能想到应该怎么实现了吧，自定义View！对了，但是具体要怎么把这个过程做好呢，跟着脚步一起来看一看吧。<strong>代码稍微有点多，大家耐心观看</strong>，有兴趣的同学可以从我的<a href=""https://github.com/XIONG1203/CuteCandleView"">GITHUB</a>上clone下来，对着代码看吧。</p>

<h1 id=""二过程实现"">二、过程实现</h1>



<h5 id=""蜡烛的绘制和动画"">蜡烛的绘制和动画</h5>

<ul>
<li>本着面向对象的思想，很明显这里就是两个蜡烛嘛！既然是这样那我们就定义一个蜡烛类具有蜡烛的基本属性。 <br>
<img title="""" alt=""image.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-7e0e5d0f96f1d3bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></li>
</ul>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">abstract</span> <span class=""hljs-keyword"">class</span> ICandle {
    <span class=""hljs-comment"">//蜡烛底部左下坐标</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCurX;
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCurY;
    <span class=""hljs-comment"">//蜡烛宽高</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleWidth;
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleHeight;
    <span class=""hljs-comment"">//蜡烛左眼坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mEyeLPoint;
    <span class=""hljs-comment"">//蜡烛右眼坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mEyeRPoint;
    <span class=""hljs-comment"">//蜡烛眼睛半径</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mEyeRadius;
    <span class=""hljs-comment"">//眼睛间隔距离</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mEyeDevide;
    <span class=""hljs-comment"">//身体颜色</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleColor;
    <span class=""hljs-comment"">//是否停止动画中</span>
    <span class=""hljs-keyword"">protected</span> boolean mIsAnimStoping = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-comment"">//蜡烛芯坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mCandlewickPoint;
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">initAnim</span>(){
    }
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">stopAnim</span>(){
    }
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">drawSelf</span>(Canvas canvas){
    }
}</code></pre>

<p>对应着这蜡烛还有代码，那就一目了然了。可能需要解释的应该就是下面的几个方法了<code>public void initAnim()</code>， <code>stopAnim()</code>初始化开始和结束动画需要的数据，小蜡烛将会实现这个方法，<code>drawSelf(Canvas canvas)</code>把画布传进来然后蜡烛自己绘制自己。 <br>
现在就是让我们来看一看小蜡烛身体内部构造的时候了，<strong>hiahiahiahia！</strong> <br>
不对，和蜡烛生死相随的还有火焰呢！先来看看火焰吧，等下小蜡烛还要燃烧自己呢。<strong>+10086s</strong> <br>
+ <strong>Flame</strong> <br>
一样先来一睹我们的富勒姆真容 <br>
<img title="""" alt=""flame.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-44fd38d11b58617d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""> <br>
<img title="""" alt=""flamex.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-381f4978524815e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></p>

<p>好像也没什么毛病，首先是里面的区域，就是Flame啦，外面的呢，就是Flame先生燃烧自己散发的人性之光和飘散的骨灰(手动抹眼泪)。 <br>
来看一下Flame的实现吧。我们一步步分析。</p>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">float</span> CHANGE_FACTOR = <span class=""hljs-number"">20</span>;
    <span class=""hljs-keyword"">private</span> Paint mPaint;
    <span class=""hljs-keyword"">private</span> Path mPath;
    <span class=""hljs-comment"">//左下点坐标</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCurX;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCurY;
    <span class=""hljs-comment"">//火焰宽度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mWidth;
    <span class=""hljs-comment"">//火焰高度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mHeight;
    <span class=""hljs-comment"">//记录初始高度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreHeight;
    <span class=""hljs-comment"">//记录初始宽度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreWidth;
    <span class=""hljs-comment"">//火焰顶部贝塞尔曲线控制点变化参数</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mTopXFactor;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mTopYFactor;
    <span class=""hljs-comment"">//用于实现火焰的抖动</span>
    <span class=""hljs-keyword"">private</span> Random mRandom;
    <span class=""hljs-comment"">//光环半径</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mHaloRadius;
    <span class=""hljs-comment"">//正在燃烧</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsFiring;
    <span class=""hljs-comment"">//是否启动停止动画</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStopAnim = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mFlagStop = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> LinearGradient mLinearGradient;
    <span class=""hljs-keyword"">private</span> RadialGradient mRadialGradient;

    <span class=""hljs-keyword"">private</span> ValueAnimator mFlameAnimator;
    <span class=""hljs-keyword"">private</span> ValueAnimator mHaloAnimator;</code></pre>

<p>参数就是这些了，主要是我们的动画实现过程，也就是我们的属性动画<code>ValueAnimator</code> 这里还有两个渲染类不知道大家用过没有，<code>LinearGradient</code>和<code>RadialGradient</code>不了解的同学可以看我之前的博文了解一下。<code>LinearGradient</code>绘制出了火焰，<code>RadialGradient</code>绘制除了发散的光芒。 <br>
初始化的过程我就不写了，大家对这代码看吧。那主要的就是小火焰的是怎么绘制出来的呢    <em>show the code</em></p>



<pre class=""prettyprint""><code class="" hljs avrasm"">    mPaint<span class=""hljs-preprocessor"">.setStyle</span>(Paint<span class=""hljs-preprocessor"">.Style</span><span class=""hljs-preprocessor"">.FILL</span>)<span class=""hljs-comment"">;</span>
    mPaint<span class=""hljs-preprocessor"">.setShader</span>(mLinearGradient)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.reset</span>()<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.moveTo</span>(mCurX, mCurY)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.quadTo</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
            mCurY + mHeight / <span class=""hljs-number"">3</span>,
            mCurX + mWidth, mCurY)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.quadTo</span>(mCurX + mWidth / <span class=""hljs-number"">2</span> + ((<span class=""hljs-number"">1</span> - mRandom<span class=""hljs-preprocessor"">.nextFloat</span>()) * CHANGE_FACTOR) + mTopXFactor,
            mCurY - <span class=""hljs-number"">2</span> * mHeight + mTopYFactor,
            mCurX, mCurY)<span class=""hljs-comment"">;</span>
    canvas<span class=""hljs-preprocessor"">.drawPath</span>(mPath, mPaint)<span class=""hljs-comment"">;</span></code></pre>

<p>这就是火焰flame的绘制，可以看到这里用到了二次贝塞尔曲线的绘制，不太清楚贝塞尔曲线的同学也可以点这<a href=""http://blog.csdn.net/xiong_1203/article/details/53453408"">波浪Loading动画(贝塞尔曲线)</a>有简单的介绍，当时是用在一个水波的view里面。这里的绘制是以前面那个图里面的矩形为参照，我们再来看一下这个图（当然是加强版hiahia）。 <br>
<img title="""" alt=""flame.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-daa719c1eda69309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""> <br>
那为什么上面的x坐标还加了<code>mRandom.nextFloat()) * CHANGE_FACTOR</code>呢？你想啊，火焰不是会左右晃动吗，利用一个随机来控制左右摆动咯。</p>



<pre class=""prettyprint""><code class="" hljs cpp"">    mFlameAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">4</span>).setDuration(<span class=""hljs-number"">4000</span>);
    mFlameAnimator.setRepeatCount(ValueAnimator.INFINITE);
    mFlameAnimator.addUpdateListener(
                   <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
        @Override
        <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> onAnimationUpdate(ValueAnimator animation) {
            <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
            <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">1.0f</span> &amp;&amp; zeroToOne &lt;= <span class=""hljs-number"">1.2f</span>) {
                <span class=""hljs-comment"">//火焰燃起</span>
                zeroToOne = <span class=""hljs-number"">1.0f</span> - <span class=""hljs-number"">5</span> * (zeroToOne - <span class=""hljs-number"">1.0f</span>);<span class=""hljs-comment"">//1-0</span>
                mHeight = (<span class=""hljs-keyword"">int</span>) (mPreHeight * (<span class=""hljs-number"">1</span> - zeroToOne));
                mIsFiring = <span class=""hljs-keyword"">true</span>;
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">3.5f</span>) {
                <span class=""hljs-keyword"">if</span> (mFlagStop) {
                    mFlameAnimator.cancel();
                    <span class=""hljs-keyword"">return</span>;
                }
                <span class=""hljs-comment"">//火焰被吹灭</span>
                zeroToOne = <span class=""hljs-number"">2</span> * (zeroToOne - <span class=""hljs-number"">3.5f</span>);<span class=""hljs-comment"">//0-2</span>
                mTopXFactor = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">20</span> * zeroToOne);
                mTopYFactor = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">160</span> * zeroToOne);
<span class=""hljs-comment"">//                    mWidth = (int) (mPreWidth * (1 -zeroToOne));</span>
                mIsFiring = <span class=""hljs-keyword"">false</span>;
            }
        }
    });</code></pre>

<p>在4秒的时间内，火焰进行了一系列活动，从下面随着灯芯移上来，不断的改变火焰的位置，分为了两部分，<strong>火焰燃起</strong>和<strong>火焰熄灭</strong>，从代码中可以看到，火焰燃起时<code>mHeight</code>慢慢变大，然后就是有了升起的过程辣，另外一个就是火焰被吹灭的时候，因为吹灭的时候火焰的高度肯定是保持之前的值，所以不需要改变，而是用了<code>mTopXFactor</code>和<code>mTopYFactor</code>这个两个因子来控制火焰的位置。好了，既然火焰有了，<strong>蜡炬成灰泪始干</strong>啊，生命之光也该出场了。 <br>
光圈的绘制和动画就相对简单了</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">            mPaint<span class=""hljs-preprocessor"">.setStyle</span>(Paint<span class=""hljs-preprocessor"">.Style</span><span class=""hljs-preprocessor"">.STROKE</span>)<span class=""hljs-comment"">;</span>
            mPaint<span class=""hljs-preprocessor"">.setStrokeWidth</span>(<span class=""hljs-number"">5</span>)<span class=""hljs-comment"">;</span>
            mPaint<span class=""hljs-preprocessor"">.setShader</span>(mRadialGradient)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius, mPaint)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius + <span class=""hljs-number"">5</span>, mPaint)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius - <span class=""hljs-number"">5</span>, mPaint)<span class=""hljs-comment"">;</span></code></pre>



<pre class=""prettyprint""><code class="" hljs java"">        mHaloAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">1</span>).setDuration(<span class=""hljs-number"">500</span>);
        mHaloAnimator.setRepeatCount(ValueAnimator.INFINITE);
        mHaloAnimator.addUpdateListener(
                         <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
                <span class=""hljs-keyword"">if</span> (mIsFiring) {
                    mHaloRadius = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">70</span> + zeroToOne % <span class=""hljs-number"">1.0</span>f * <span class=""hljs-number"">20</span>);
                }
            }
        });</code></pre>

<p>这里改变的只有一个参数，<code>mHaloRadius</code>也就是光圈的半径。但是不要忘了，其他参数同时也是在改变的呢，只不过是放在了<code>mFlameAnimator</code>里面。 <br>
好了介绍到这Flame的介绍完了，任重而道远啊，写了这么多却还没完结，让我想到一某位古人说过，不是我。</p>

<blockquote>
  <p>还未老死，就先累死  </p>
</blockquote>

<ul>
<li><strong>FireCandle</strong> <br>
这名字有点奇怪，火烛，厉害了Word哥。前面已经介绍过ICandle了，现在来看一下他的实现类，蜡烛两兄弟之FireCandle。 <br>
初始化照例也就不说了，来看该有的变量。</li>
</ul>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-keyword"">private</span> Paint mPaint;
    <span class=""hljs-comment"">//中心X坐标</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCenterX;
    <span class=""hljs-comment"">//记录初始宽</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreWidth;
    <span class=""hljs-comment"">//记录初始高</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreHeight;
    <span class=""hljs-comment"">//蜡烛芯旋转角</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCandlewickDegrees = <span class=""hljs-number"">0</span>;
    <span class=""hljs-keyword"">private</span> Flame mFlame;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsFire = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStateOnStart = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStateOnEnd = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mFlagStop = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> ValueAnimator mCandlesAnimator;</code></pre>

<p>命名还是挺规范的，应该一看就知道是干嘛的。 <br>
我们还是来主要看绘制和属性动画的配合，绘制就不看了(<em>光速打脸</em>)。来看动画。</p>



<pre class=""prettyprint""><code class="" hljs cpp"">    mCandlesAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">4</span>).setDuration(<span class=""hljs-number"">4000</span>);
    mCandlesAnimator.addUpdateListener(
                     <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
        @Override
        <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> onAnimationUpdate(ValueAnimator animation) {
            <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
            <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">1.0f</span>) {
                <span class=""hljs-comment"">//蜡烛芯蓄力下拉</span>
                mIsFire = <span class=""hljs-keyword"">true</span>;
                mCandleWidth = mPreWidth + (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">40</span>);
                mCandleHeight = mPreHeight - (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">30</span>);
                mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">60</span> + (<span class=""hljs-number"">180</span> + <span class=""hljs-number"">60</span>) * zeroToOne);
                refreshEyePosition();
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">2.0f</span>) {
                zeroToOne = zeroToOne - <span class=""hljs-number"">1.0f</span>;
                <span class=""hljs-comment"">//蜡烛芯上摆</span>
                <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">0.2f</span>) {
                    zeroToOne = <span class=""hljs-number"">1.0f</span> - <span class=""hljs-number"">5</span> * zeroToOne;
                    mIsFire = <span class=""hljs-keyword"">false</span>;
                    mCandleWidth = mPreWidth + (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">40</span>);
                    mCandleHeight = mPreHeight - (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">30</span>);
                    mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">180</span> * zeroToOne);
                } <span class=""hljs-keyword"">else</span> {
                    <span class=""hljs-keyword"">if</span> (mFlameStateListener != null &amp;&amp; !mIsStateOnStart) {
                        mFlameStateListener.flameStart();
                        mIsStateOnStart = <span class=""hljs-keyword"">true</span>;
                    }
                    mCandleWidth = mPreWidth;
                    mCandleHeight = mPreHeight;
                    mCandlewickDegrees = <span class=""hljs-number"">0</span>;
                    <span class=""hljs-keyword"">if</span> (mFlagStop) {
                        mCandlesAnimator.cancel();
                    }
                }
                refreshEyePosition();
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">3.5f</span>) {
                <span class=""hljs-comment"">//蜡烛芯被吹歪</span>
                zeroToOne = <span class=""hljs-number"">2</span> * (zeroToOne - <span class=""hljs-number"">3.5f</span>);<span class=""hljs-comment"">//0-1</span>
                mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">60</span> * zeroToOne);
                <span class=""hljs-keyword"">if</span> (mFlameStateListener != null &amp;&amp; !mIsStateOnEnd) {
                    mFlameStateListener.flameEnd();
                    mIsStateOnEnd = <span class=""hljs-keyword"">true</span>;
                }
            }
        }
    });</code></pre>

<p>这个就过程就有点多了，但是其实一点都不复杂，，首先我们看动画里面的小<small><small>蜡烛,<big><big>一开始，他来了一个变胖红脸深蹲，所以呢<code>mCandleWidth</code>是变大的，<code>mCandleHeight</code>是变小的，后面那个灯芯随着深蹲来了一个大角度旋转，灯芯的如何旋转大家也看到了，改变坐标系然后就可以了。用到了 <br>
<code>canvas.rotate(mCandlewickDegrees, mCenterX, mCurY - mCandleHeight);</code>这个方法。上摆过程也是一样的，就不多说了。<code>refreshEyePosition();</code>这个方法是改变眼睛位置的，两个地方都用到了所以稍微独立出来了。注意<code>mIsFire</code>这个变量，没有火焰的时候就做其他绘制，比如说红眼睛等等。好了好了，介绍到这，小蜡烛的部分就结束了。 <br>
+ SecCandle <br>
大<big><big>蜡烛，<small><small>帅蜡烛镇楼，实际的绘制和小蜡烛的就差不多了，这里就不解释了。 <br>
<img title="""" alt=""bigc.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-64b3a0f823799ffc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></small></small></big></big></big></big></small></small></p>



<h5 id=""共同绘制view和控制器"">共同绘制View和控制器</h5>

<ul>
<li>AnimControler <br>
这个类的功能很简单，绘制地板部分还有就是把计算后传过来的高度宽度赋给两支蜡烛，然后控制两支蜡烛各自开始动画。</li>
</ul>



<pre class=""prettyprint""><code class="" hljs avrasm"">        mFirCandle = new FirCandle(mRelativeX + mWidth / <span class=""hljs-number"">6</span>, mRelativeY + mHeight)<span class=""hljs-comment"">;</span>
        mFirCandle<span class=""hljs-preprocessor"">.initCandle</span>(mFirCandleWidth, mFirCandleHeight)<span class=""hljs-comment"">;</span>
        mFirCandle<span class=""hljs-preprocessor"">.initAnim</span>()<span class=""hljs-comment"">;</span>
        mSecCandle = new SecCandle(mRelativeX + mWidth / <span class=""hljs-number"">2</span>, mRelativeY + mHeight)<span class=""hljs-comment"">;</span>
        mSecCandle<span class=""hljs-preprocessor"">.initCandle</span>(mSecCandleWidth, mSecCandleHeight - <span class=""hljs-number"">80</span>)<span class=""hljs-comment"">;</span>
        mSecCandle<span class=""hljs-preprocessor"">.initAnim</span>()<span class=""hljs-comment"">;</span></code></pre>

<p>最后的最后，就是我们的View了 <br>
+ CandlesAnimView</p>



<pre class=""prettyprint""><code class="" hljs java"">        <span class=""hljs-comment"">//16ms刷新Canvas</span>
        mInvalidateAnimator = ValueAnimator.ofInt(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">1</span>).setDuration(<span class=""hljs-number"">16</span>);
        mInvalidateAnimator.setRepeatCount(ValueAnimator.INFINITE);
        mInvalidateAnimator.addListener(<span class=""hljs-keyword"">new</span> AnimatorListenerAdapter() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                invalidate();
            }
        });
        mInvalidateAnimator.start();</code></pre>

<p>这个属性动画履行的任务就是快速的刷新界面，是Candle的动画能够及时显示。</p>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onMeasure</span>(<span class=""hljs-keyword"">int</span> widthMeasureSpec, <span class=""hljs-keyword"">int</span> heightMeasureSpec) {
        <span class=""hljs-keyword"">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);
        <span class=""hljs-keyword"">int</span> width = measureDimension(WIDTH_DEFAULT * mDensity, 
                                   widthMeasureSpec);
        <span class=""hljs-keyword"">int</span> height = measureDimension(HEIGHT_DEFAULT *mDensity,
                                   heightMeasureSpec);
        setMeasuredDimension(width, height);
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">measureDimension</span>(<span class=""hljs-keyword"">int</span> defaultSize, <span class=""hljs-keyword"">int</span> measureSpec) {
        <span class=""hljs-keyword"">int</span> result;
        <span class=""hljs-keyword"">int</span> specMode = MeasureSpec.getMode(measureSpec);
        <span class=""hljs-keyword"">int</span> specSize = MeasureSpec.getSize(measureSpec);

        <span class=""hljs-keyword"">if</span> (specMode == MeasureSpec.EXACTLY) {
            result = specSize;
        } <span class=""hljs-keyword"">else</span> {
            result = defaultSize;
            <span class=""hljs-keyword"">if</span> (specMode == MeasureSpec.AT_MOST) {
                result = Math.min(result, specSize);
            }
        }
        <span class=""hljs-keyword"">return</span> result;
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDraw</span>(Canvas canvas) {
        <span class=""hljs-keyword"">if</span> (!mIsInit) {
            initConfig();
            mIsInit = <span class=""hljs-keyword"">true</span>;
        }
        mAnimControler.drawMyView(canvas);
    }</code></pre>

<p>可以看到最后在view里面调用了我们的控制器，把<code>cavas</code>传过去了。 <br>
最后的tip：大家有没有发现每个动画的<strong>duration</strong>都是一样的。</p>



<h1 id=""三最后"">三、最后</h1>

<p><big>好了至此，本来一个简单的view自定义被我说了这么多。初次在简书上写，望大家多支持支持。 <br>
希望大家有什么建议和意见都可以提出。望斧正。 <br>
<a href=""https://github.com/XIONG1203/CuteCandleView"">GITHUB源码下载</a> <br>
欢迎大家来<a href=""http://blog.csdn.net/xiong_1203"">我的博客</a>逛逛,之前也没什么时间写博客文章的，最近开始，大家多多支持！！！</big></p></div>",移动开发,2016-12-06 12:48
3102,Hybrid 是移动端热更新最常用的手段，限于 App Store 上架审核时间较长，美团大众点评也采取了该方案，欢迎来自美团大众点旅游业务 iOS 负责人**吴卓**分享**《美团大众点评 酒旅方面...,Tencent_Bugly,http://blog.csdn.net/tencent_bugly/article/details/53484272,【腾讯Bugly干货分享】美团大众点评 Hybrid 化建设,"<div class=""markdown_views""><p>本文来自于<strong>腾讯Bugly</strong>公众号（<strong>weixinBugly</strong>），未经作者同意，请勿转载，原文地址：<a href=""http://mp.weixin.qq.com/s/rNGD6SotKoO8frmxIU8-xw"">http://mp.weixin.qq.com/s/rNGD6SotKoO8frmxIU8-xw</a></p>

<p>本期 T 沙龙探讨了移动端热更新相关的话题。由于沙龙时间的限制，本期我们选取了美团的 Hybrid 化建设、去哪儿的跨平台 ListView 性能优化、微博 Android 端热更新踩过的坑话题。还期待热更新、热修复哪些话题？欢迎留言给我们。也欢迎报名参加 T 沙龙分享自己开发中的心得。</p>

<p>Hybrid 是移动端热更新最常用的手段，限于 App Store 上架审核时间较长，美团大众点评也采取了该方案，欢迎来自美团大众点旅游业务 iOS 负责人<strong>吴卓</strong>分享<strong>《美团大众点评 酒旅方面 Hybrid 化建设》</strong>。</p>

<hr>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/0.png"" alt="""" title=""""></p>

<p>大家好！我是吴卓，很高兴能来到 T 沙龙做这个分享，今天我将从 iOS 的角度跟大家一起探讨一下美团点评整体在 Hybrid 建设中做一些事情。</p>

<p><strong>首先自我介绍一下：</strong></p>

<p>我进入比较早，在 2011 年的 7 月份最早在美团实习。后来又继续出国读研，同时做一名兼职的开发者，在 2013 年的时候，做过 iOS 的独立开发，有很多人把它作为自己的一项事业去做。</p>

<p>后来在 2014 年 12 月份重新加入美团，现在是旅游 iOS 的负责人。</p>

<p>我负责的主要是住宿，度假，大交通，整个业务部门成立时间是相对比较晚，像住宿只做了三年，度假做了两年，大交通是去年才开始做的。快速迭代的能够给业务一个非常好的支持。</p>

<p>今天的内容主要分成四个部分：</p>

<ul>
<li>第一简单介绍一下为什么我们要做一个 Hybrid 化这样一个东西。</li>
<li>第二部分是今天的重点部分，会讲一下我们在 Hybrid 化上做的一些事情。</li>
<li>第三部分会简单回顾一下，我们做的一些内容和对现有的一些方案做一些对比。</li>
<li>最后，如果大家有问题，可以做一些交流。</li>
</ul>



<h2 id=""一为什么做-hybrid-化"">一、为什么做 Hybrid 化？</h2>

<p>第一个问题，我们为什么要做 Hybrid 这个东西，其实刚刚提到整个业务发展非常迅速。在迅速发展中，我们直接面临了以下两个非常棘手的问题：</p>



<h4 id=""1-客户端发版周期长"">1. 客户端发版周期长</h4>

<p>第一个问题客户端发版周期比较长，相信大家应该有类似的感受，特别是在一个大公司里面，迭代是相对固定的周期。另外在 iOS 里面如果需要发版还需要 App Store 的审核。</p>



<h4 id=""2-前端资源严重不足"">2. 前端资源严重不足</h4>

<p>第二个问题是我们公司一个现状，前端资源严重不足。</p>



<h4 id=""解决方案"">解决方案</h4>

<p>首先，针对第一个问题，客户端发版周期长，我们希望通过一些手段脱离客户端发版限制。</p>

<p>至于第二个问题，我们希望把现有的前端和客户端的同学完全结合起来，共同开发我们主要的一个 APP 。</p>



<h2 id=""二hybrid-化设计"">二、Hybrid 化设计</h2>

<p>接下来讲一下我们 Hybrid 化整体的设计，总体上我们是用一种 <strong>Native 和 H5 页面强混合的模式</strong>。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/1.png"" alt="""" title=""""></p>

<p>如果在美团上买一个火车票，我不知道有没有同学买过。其实在美团上买一张火车票，有一部分是 Native 页面，有一些是 H5 页面，有一部分组件是 Native 做的，有一部分组件是 H5 做的。</p>

<p><strong>如果使用这种方式做的话，我们会遇到以下三个问题：</strong></p>

<ol>
<li>H5 和 Native 上线时间不一致，如何衔接？</li>
<li>H5 和 Native 之间如何进行通信？</li>
<li>H5 页面如何接近 Native 的体验？</li>
</ol>



<h4 id=""1-h5-和-native-上线时间不一致如何衔接"">1. H5 和 Native 上线时间不一致，如何衔接？</h4>

<p>第一个问题是说现在的页面里面既有 H5 页面，也有 Native 页面，Native 页面在 App Store 上面的， H5 相对比较灵活的。</p>

<p>所以有个问题，当H5上线之后，客户端需要给H5提供一些跳转的入口，这个跳转的入口提供的应该是在不发版的情况下去给出的，能够通过这种灵活的配置去实现 H5 到 Native 的一个过渡。 </p>



<h5 id=""美团-app-现状"">美团 APP 现状</h5>

<p>我们来讲一下美团 APP 的现状，早在 2014 年美团 APP 其实大部分页面是由 Native 编写的，只有一些活动的展示页面，是用 H5 形式的页面展示的。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/2.png"" alt="""" title=""""></p>

<p>为了实现页面之间的解耦合，每个页面其实会有一个 URL 进行标识，根据每次跳转到一个 Native 页面，现在很多公司都采用类似的方式去做。现在是这样的模式，那怎样让 Native 页面过渡到 H5 呢？</p>



<h5 id=""动态路由切换"">动态路由切换</h5>

<p>我们的方案是对这个跳转去做一些扩展。本质上来说，客户端这边是从 URL 到 Native 页面的路由表，我们想办法对跳转的参数做的一些扩展，让他能够支持跳转到 H5 里面，甚至跳转到 URL 的页面。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/3.png"" alt="""" title=""""></p>

<p>上图的这个配置能够通过后台进行下发，进行同时的更新，同时为了做这个更新，我们也为这个路由配置做了一个前端的展示页面。整体来说通过我们在原有的这种跳转模式下做了一些动态化的扩展，实现后续客户端发版之后能够从后台下发一些配置。</p>

<p><strong>举一个简单的例子：</strong></p>

<blockquote>
  <p>在美团 APP 买一个团购的订单，用户需要访问列表页，商家的详情页，创建订单，最后购买成功。</p>
  
  <p>如果我们有一些新版本的上线没办法支持展示这些新的产品，对一个新的产品做一个 H5 的产品详情和创立订单页面，把这个产品切换到走 H5 的流程最终的客户端发版走这种 H5 的流程。 <br>
  <img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/4.png"" alt="""" title=""""></p>
  
  <p><strong>这样无论是新的用户还有没有升级的老的用户，都及时的访问到我们最新的产品。</strong></p>
</blockquote>



<h5 id=""小结"">小结</h5>

<p>在这儿简单回顾一下，我们做这个事情的一些设计思路。</p>

<p>刚才说的配置下发只是在特殊情况下做的，因为这种情况是少数，不会每天所有的页面都做这种事情，所以我们并不会下发整个客户端里面的所有的配置，我们只是把一些需要更新的内容做一些回应，从后台下发下去。</p>

<p>另外一点是说上层的使用方，我们内部会帮上层调用方，做好所有的相关的工作。</p>



<h4 id=""2-h5-和-native-之间如何进行通信"">2. H5 和 Native 之间如何进行通信？</h4>



<h5 id=""桥协议通信"">桥协议通信</h5>

<p>第二个问题，前端的 H5 页面和 Native 页面怎么更新，因为他两个是完全不同语言开发的，其实这个方案的话我们一般来说，<strong>把 Native 和 H5 的通信机制约定为，称之为桥协议</strong>。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/5.png"" alt="""" title=""""></p>

<p>这个桥协议，它是一个双向的通信方式。绿色部分是讲 NativeJS ，这个是比较直观的，在 WEB 应用里面直接可以调用这个方法。</p>



<h5 id=""js-调用-native"">JS 调用 Native</h5>

<p>但是 JS 调用 Native 的方法其实系统没有提供一个很直接的方法，这个地方其实是我们需要解决的一个问题。</p>

<p>基本上， JS 调用 Native 本质上就是，给客户端去传递一些消息，传递的消息格式其实是比较随意的，而且时间只要约定好就可以了。</p>

<p><strong>现在问题就是怎么去传？</strong></p>

<p>这个问题，我们当时在做的时候，其实调研了一下常规的方案来分析。有三个方案，我具体说一下：</p>

<ul>
<li><p><strong>第一个方案是通过 URL 拦截的方法</strong> <br>
这个什么意思呢？就是说，对于前端来说如果 JS 需要给应用传消息，一般会开一个 Server ，会访问一个地址，这个地址他的 Scheme 是一个特殊的 Scheme 。客户端这边会拦截到这种指令格式的 URL 需求，实现一个 JS 到 Native 传递消息的一个过程。</p></li>
<li><p><strong>第二个方案叫主动轮询</strong> <br>
对于 JS 他需要把给 Native 传递的消息，转化成一个 JSON ，客户端这边一般会开一个线程，每隔一段时间会调 JS 的方法，从这个方法里面把 JS 需要给 Native 传递的消息全部取出来，取出来之后再去做相应的操作。</p></li>
<li><p><strong>第三个就是 JSContext</strong>  <br>
前端可以直接调用客户端本地的方法。</p></li>
</ul>



<h5 id=""方案对比"">方案对比</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/6.png"" alt="""" title=""""></p>

<p>我们简单对比一下这三种方案，第一个方案是 URL 拦截，他的优点无论是哪种 WebView 都是支持这种方式的，但是它的 URL 拦截延时高一点。第二个方案，主动轮询，可以并发处理多条消息，但是如果在客户端性能开销大，第三个方案是我们现在正在用的，直接调用，但是他只支持 iOS 7 以上的系统。</p>



<h5 id=""模块化拆解"">模块化拆解</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/7.png"" alt="""" title=""""></p>

<p>接下来讲一个非常重要的一个点，叫<strong>模块化拆解</strong>，其实像我们业务，每个业务，都需要在上面定制自己的桥协议，实际上这个也方便管理。 我们除了底下红色，刚才讲的消息通讯层以外，上面有模块化的管理方式，像客户端这边，右侧是客户端这边有模块的管理模范，各个业务可以自己把自己的模块注册在这个里面，对应的JS层也有底层的封装，左边每一个JS对应右边每一个模块，会做一些模块化拆解的工作。</p>



<h5 id=""开发调试"">开发调试</h5>

<p>再说说我们怎么前端和客户端怎么去开发，调试方式，其实现在方式是说，如果我们需要新增一个桥协议的话，前端会先准备一个 Demo 页面，把这次需要新加的桥里面放在这个 Demo 页面里面，客户端基于这个 Demo 开发，会给前端打一个模拟器，前端会用这个模拟器安装包，自己完成剩余的链条开发工作，这样的好处是前端和客户端可以同时开发。</p>



<h5 id=""小结-1"">小结</h5>

<p>简单回顾一下桥协议，桥协议通信用最简单最直接的方式进行调用，桥协议的实现，最关键一点支持可扩展的能力，开发调试我们希望前端和客户段可独立并行开发。</p>



<h4 id=""3-h5-页面如何接近-native-的体验"">3. H5 页面如何接近 Native 的体验？</h4>

<p>第三个问题是指我们的 H5 页面怎么去接近 Native 的体验，在体验差距上主要两个方面。</p>



<h5 id=""页面渲染瓶颈"">页面渲染瓶颈</h5>

<p>第一个是前端的页面代码渲染，受限于 JS 的解析效率，以及手机硬件设备的一些性能。其实这个问题从应用开发的角度来说，是难以解决的。</p>



<h5 id=""资源加载缓慢"">资源加载缓慢</h5>

<p>第二个方面是 H5 页面是从服务器上下发的，客户端的页面在内存里面，页面加载时间上面， H5 页面和 Native 相比是有些差距的，但是这个差距我们可以通过一些方式弥补的，比如说我们做了一些<strong>资源预加载</strong>的方案。</p>

<p>在<strong>资源预加载</strong>方面，其实也很多方式，我主要列举了一些，基本上每种方式我们都尝试的做了。</p>

<p><strong>第一种方式是说使用 WebView 自身的缓存机制。</strong></p>

<p>如果我们在 APP 里面访问一个页面，短时间内再次访问这个页面的时候，会感觉到第二次打开的时候流畅很多，加载速度比第一次的时间要短。</p>

<p>这个就是因为，苹果自己内部 Web 自身会做一些缓存，只要打开过的资源，他都会试着缓存在本地，第二次需要访问的时候他直接从本地读取，但是这个读取其实是不太稳定的东西，关掉之后，或者说这种缓存之后，系统会自动把它清掉，我们没法进行控制。</p>

<p>基于这个 WebView 自身的缓存，有一种资源预加载方案，我们在应用启动的时候可以开一个像素的 WebView ，事先去访问一下我们常用的资源，后续打开页面的时候如果再用到这些资源他就可以从本地获取到，页面加载的时间会短一些。</p>

<p><strong>第二种方案是说，我们自己去构建，自己管理缓存。</strong></p>

<p>把这些需要预加载的资源放在 APP 里面，他可能是预制放进去的，也可能是后续下载的。</p>

<p>问题在于前端这些页面怎么去缓存？</p>

<p>两个方案，一个是，前端可以在 H5 打包的时候把里面的资源 URL 进行替换，这样可以直接访问本地的地址。客户端可以拦截到这些网页发出的所有请求做替换。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/8.png"" alt="""" title=""""></p>

<p>这个是我们做的资源预加载的方案，采用的刚才说的第二种方案，每当这个 WebView 发起资源请求的时候，我们会拦截到这些资源的请求，去本地检查一下我们的这些静态资源本地离线包有没有。针对本地的缓存文件我们有些策略能够及时的去更新它。为了安全考虑的话我们也做了一些预下载和安全包的一些加密的工作。</p>



<h5 id=""预加载方案的优势"">预加载方案的优势？</h5>

<ul>
<li><p>第一，我们拦截了 WebView 里面发出的所有的请求，但是并没有替换里面的前端应用的任何代码，前端这套页面代码可以在 APP 内，或者其他的 APP 里面都可以直接访问，他不需要为我们 APP 做定制化的东西。</p></li>
<li><p>第二，这些 URL 请求，他会直接带上先前用户操作所留下的 cookie 而都能够留下来，因为我们没有更改资源的 URL 地址。</p></li>
<li><p>第三，整个前端在用离线包的时候，缓存文件的时候是完全无感知的，前端只用管写一个自己的页面，客户端会帮他处理好这样一些静态资源预加载的问题，有这个离线包的话，他加载速度会变快很多，没有这些离线包加载速度会慢一些。如果版本不能跟他匹配的话，他的页面也不会发生什么问题。</p></li>
</ul>



<h5 id=""实践效果"">实践效果</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/9.png"" alt="""" title=""""></p>

<p>这个是我们当时做完之后，做完资源预加载之后的一些效果。比如说，这个图里面可以看三个部分，一个是前端部分是没有用资源预加载的下面，深色的部分是有资源预加载的效果，可以看到，如果把有些资源打成离线包放在本地的话，其实他的加载时间是可以缩短很多的。</p>

<p>另外一点可以横向的看，其实像一二三，或者是这边的一二三，三个页面，其实本质上这三个页面是一个购买流程人员，需要访问到的路径。</p>

<p>举个例子，要进入第三个页面，他一定会先打开第二个页面，如果他打开第二个页面，他一定会先打开第一个页面。</p>

<pre><code>前置筛选页-&gt;车次列表页-&gt;车次详情页
</code></pre>

<p>所以可以看到，整体的加载时间是不断的缩短的。这个也就符合我们现在说的 Webview 自身是有一套缓存的。因为访问后面页面的时候有些资源其实在前面的页面已经访问过了，所以整个加载时间是不断递减的。</p>

<p>总结一下今天 Hybrid 化讲的一些东西，包括我们做的动态路由切换，包括我们做的自定义桥协议，还有资源预加载的一些方案。</p>



<h5 id=""hybrid-vs-native"">Hybrid vs Native</h5>

<p>我们其实现在整个页面里面既有 Hybrid 页面也有 Native 页面，那么我们是怎么做区分的？</p>

<p>一般来说Hybrid的项目一般是用在一些快速迭代试错的地方。另外包括有一些非主流产品的页面，我们倾向于用 Hybrid 的形式做.</p>

<p>但是像前端购买一些交易环节，特别核心的流程的话，我们一般情况下会用 Native 的形式去写这些页面，去提升，达到一个极致的用户体验。</p>



<h2 id=""三其他方案对比"">三、其他方案对比</h2>

<p>最后想对比一下，简单聊一下我们现有的一些其他方案，当然这些方案，各个其他公司也正在去做。</p>



<h4 id=""1-react"">1. React</h4>

<p>第一个是 React 这边，现在做了一些尝试，因为 React 和安卓的平台差异性是比较小，如果安卓端写好代码的话，成本很低，在项目发展初期的话，很好的去应用了这样一种方式，减少成本。但是我们后面发现，当中也遇到了一些问题，如果其他同学有解决方案的话也欢迎分享一下。</p>

<p>第一稳定性没有达到一个很好的标准，当然也有可能是我们在使用上还存在一些没有掌握的地方。</p>

<p>第二个问题是人力的问题，我觉得可能比技术问题更复杂一点，就是说，其实现有市面上，我们很难在很短的时间内招到 10 个 iOS 的同学去做我们相应的开发。另外我们即使招到一些人，但是现有的公司里面培养体系，不太适合培养他们往更高层面发展。这个例子在后台比较常见，像我们现在美团点评是后台绝大部分都是用 Java 去写的，说白一点，就是说 Java 这个东西，还是比较好招人，好大规模的去扩展去做事的。</p>



<h4 id=""2-weex"">2. Weex</h4>

<p>Weex 方面，我们内部有一些调研和学习，但是人力的问题还是很凸显。</p>



<h4 id=""3-动态模板化"">3. 动态模板化</h4>

<p>我们从业务发展的角度来说，也想获得一些动态性的一些东西。希望考虑说把有一些局部的模块能够通过后台下发的方式去做。我们的名字叫动态模板化，但是目前还是在做的阶段，如果其他同学有相同的想法的话可以共同做一些分享。</p>

<p>今天的分享先到这儿，谢谢大家！</p>



<h2 id=""四互动问答"">四、互动问答</h2>

<p><strong>Q1：我有一个问题，刚才你说， JS 调用 Native 里面，有一个类似轮询。</strong></p>

<blockquote>
  <p>吴卓：我那句话意思是说，一次只能拦截到一条消息，如果用轮询的方式的话，可以多条。因为最近应该很少有，最近几期很少有美团的同学来这儿讲课，如果大家对美团的其他的技术也兴趣的话也可以提出来，我如果知道的话尽量也跟大家解释一下。</p>
</blockquote>

<p><strong>Q2：这里哪一个页面是 Hybrid 的？</strong></p>

<blockquote>
  <p>吴卓：您下的是最近的版本吗？举个例子机票里面选一个国际的城市，你能看到的就是， Hybrid 的页面。国际城市里面切换选择日期的时候，看到的就是 Hybrid 的页面。国际机票的列表也是用 Hybrid 走的。火车票里面以前是用 Hybrid 做的，现在的话，主流改成 Native 做的，当然如果出现一些紧急的情况，我们通过刚才的切换系统切换到原来的 Hybrid 上。</p>
  
  <p>另外如果您打开交通里面的船票也是 Hybrid 的形式。因为我是做大交通业务的，所以说可能比较熟悉一点，向您推荐的也是我们的产品。从您点击船票开始后面都是 Hybrid 的页面，当然这个页面里面有一些弹窗，有一些部分是Native做的。</p>
</blockquote>

<p><strong>Q3：你觉得 Hybrid 的模式和 Native 的模式，您觉得哪种可能是未来的发展趋势，技术上。</strong></p>

<blockquote>
  <p>吴卓：这是一个好问题。我只说一下我个人的观点，不代表公司的观点。首先我觉得从一个用户体验的角度来说，我更希望把所有页面做成 Native 的，但是如果怎么说呢，我觉得比如像 WebView，我刚才说两个问题，一个是说稳定性的问题，还有一个人力资源的问题，如果这两个问题能解决的话，现在属于观望状态，我们其实可以朝着这方面去做。因为我个人的观点还是说，所有页面都能尽可能的做成 Native 。在做 Hybrid 上，我们想尽方式让它接近 Native 。</p>
</blockquote>

<p><strong>Q4：你们是如何管理 Hybrid 代码更新的呢？</strong></p>

<blockquote>
  <p>吴卓：离线包的形式肯定会增加内存的大小。我们的团队做增量的更新，以减少这种资源包下载的流量，这是战略空间的问题。  <br>
  第二个是离线包里面有什么，最主要是一些静态资源文件，包括JS，CSS。基本上H5页面访问，就是在访问一个页面的时候需要加载这些资源我们都可以从本地给他获取。当然现在不是100%资源的离线化，一是考虑安全的因素，第二战略方面的原因有些技术没法做离线化。</p>
</blockquote>

<hr>

<p>更多精彩内容欢迎关注<a href=""https://bugly.qq.com/"">bugly</a>的微信公众账号： </p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/Bugly%E5%A4%96%E5%8F%91%E6%96%87%E7%AB%A0%E4%BA%8C%E7%BB%B4%E7%A0%81.png"" alt="""" title=""""></p>

<p><a href=""https://bugly.qq.com/"">腾讯 Bugly</a>是一款专为移动开发者打造的质量监控工具，帮助开发者快速，便捷的定位线上应用崩溃的情况以及解决方案。智能合并功能帮助开发同学把每天上报的数千条 <a href=""https://bugly.qq.com/"">Crash</a> 根据根因合并分类，每日日报会列出影响用户数最多的崩溃，精准定位功能帮助开发同学定位到出问题的代码行，实时上报可以在发布后快速的了解应用的质量情况，适配最新的 iOS, Android 官方操作系统，鹅厂的工程师都在使用，快来加入我们吧！</p></div>",移动开发,2016-12-06 13:02
6139,在2006年12月召开的 IEEE 数据挖掘国际会议上，与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），在本系列已经发布的文章中我们已经讨...,baimafujinji,http://blog.csdn.net/baimafujinji/article/details/53456931,数据挖掘十大算法之Apriori详解,"<div class=""markdown_views""><p>在2006年12月召开的 IEEE 数据挖掘国际会议上（ICDM， International Conference on Data Mining），与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），可以参见文献【1】。本博客已经介绍过的位列十大算法之中的算法包括：</p>

<ul>
<li>[1] <em>k</em>-means算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50570824"">http://blog.csdn.net/baimafujinji/article/details/50570824</a>）</li>
<li>[2] 支持向量机SVM（<a href=""http://blog.csdn.net/baimafujinji/article/details/49885481"">http://blog.csdn.net/baimafujinji/article/details/49885481</a>）</li>
<li>[3] EM算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50626088"">http://blog.csdn.net/baimafujinji/article/details/50626088</a>）</li>
<li>[4] 朴素贝叶斯算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50441927"">http://blog.csdn.net/baimafujinji/article/details/50441927</a>）</li>
<li>[5] <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-60-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-442"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-443""><span class=""mi"" id=""MathJax-Span-444"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-60"">k</script>NN算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/6496222"">http://blog.csdn.net/baimafujinji/article/details/6496222</a>）</li>
<li>[6] C4.5决策树算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/53239581"">http://blog.csdn.net/baimafujinji/article/details/53239581</a>）</li>
<li>[7]  CART算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/53269040"">http://blog.csdn.net/baimafujinji/article/details/53269040</a>）</li>
</ul>

<p>Apriori算法是一种用于关联规则挖掘（Association rule mining）的代表性算法，它同样位居十大数据挖掘算法之列。关联规则挖掘是数据挖掘中的一个非常重要的研究方向，也是一个由来已久的话题，它的主要任务就是设法发现事物之间的内在联系。</p>

<p>欢迎关注白马负金羁的博客 <a href=""http://blog.csdn.net/baimafujinji"">http://blog.csdn.net/baimafujinji</a>，为保证公式、图表得以正确显示，强烈建议你从该地址上查看原版博文。本博客主要关注方向包括：数字图像处理、算法设计与分析、数据结构、机器学习、数据挖掘、统计分析方法、自然语言处理。</p>

<hr>

<h2 id=""引言数据挖掘与机器学习"">引言：数据挖掘与机器学习</h2>

<p>有时候，人们会对机器学习与数据挖掘这两个名词感到困惑。如果你翻开一本冠以机器学习之名的教科书，再同时翻开一本名叫数据挖掘的教材，你会发现二者之间有相当多重合的内容。比如机器学习中也会讲到决策树和支持向量机，而数据挖掘的书里也必然要在决策树和支持向量机上花费相当的篇幅。可见二者确有相当大的重合面，但如果细研究起来，二者也的确是各自不同的领域。</p>

<p>大体上看，数据挖掘可以视为数据库、机器学习和统计学三者的交叉。简单来说，对数据挖掘而言，数据库提供了数据管理技术，而机器学习和统计学则提供了数据分析技术。所以你可以认为数据挖掘包含了机器学习，或者说机器学习是数据挖掘的弹药库中一类相当庞大的弹药集。既然是一类弹药，其实也就是在说数据挖掘中肯定还有其他非机器学习范畴的技术存在。Apriori算法就属于一种非机器学习的数据挖掘技术。</p>

<p>我们都知道数据挖掘是从大量的、不完全的、有噪声的、模糊的、随机的数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程。 而机器学习是以数据为基础，设法构建或训练出一个模型，进而利用这个模型来实现数据分析的一类技术。这个被训练出来的机器学习模型当然也可以认为是我们从数据中挖掘出来的那些潜在的、有意义的信息和知识。在非机器学习的数据挖掘技术中，我们并不会去建立这样一个模型，而是直接从原数据集入手，设法分析出隐匿在数据背后的某些信息或知识。在后续介绍Apriori算法时，你会相当明显地感受到这一特点。</p>

<hr>



<h2 id=""基本概念"">基本概念</h2>

<p>许多商业企业在日复一日的运营中积聚了大量的交易数据。例如，超市的收银台每天都收集大量的顾客购物数据。例如，下表给出了一个这种数据集的例子，我们通常称其为购物篮交易（market basket transaction)。表中每一行对应一个交易，包含一个唯一标识TID和特定顾客购买的商品集合。零售商对分析这些数据很感兴趣，以便了解其顾客的购买行为。可以使用这种有价值的信息来支持各种商业中的实际应用，如市场促销，库存管理和顾客关系管理等等。 </p>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161204222245953"" width=""230""> <br>
</center><p></p>

<p>令<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-4-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-24"" style=""width: 7.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 7.165em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.688em, 1000em, 2.922em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-25""><span class=""mi"" id=""MathJax-Span-26"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span><span class=""mo"" id=""MathJax-Span-27"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-28"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""msubsup"" id=""MathJax-Span-29""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-30"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mn"" id=""MathJax-Span-31"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-32"" style=""font-family: STIXGeneral;"">,</span><span class=""msubsup"" id=""MathJax-Span-33"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-34"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mn"" id=""MathJax-Span-35"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-36"" style=""font-family: STIXGeneral;"">,</span><span class=""mo"" id=""MathJax-Span-37"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">⋯</span><span class=""mo"" id=""MathJax-Span-38"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">,</span><span class=""msubsup"" id=""MathJax-Span-39"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-40"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mi"" id=""MathJax-Span-41"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.019em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-42"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.055em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-4"">I=\{i_1, i_2, \cdots, i_d\}</script>是购物篮数据中所有项的集合，而<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-5-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-43"" style=""width: 8.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 7.664em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.688em, 1000em, 2.922em, -0.502em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-44""><span class=""mi"" id=""MathJax-Span-45"" style=""font-family: STIXGeneral; font-style: italic;"">T<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-46"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-47"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""msubsup"" id=""MathJax-Span-48""><span style=""display: inline-block; position: relative; width: 0.742em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-49"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mn"" id=""MathJax-Span-50"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-51"" style=""font-family: STIXGeneral;"">,</span><span class=""msubsup"" id=""MathJax-Span-52"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.742em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-53"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mn"" id=""MathJax-Span-54"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-55"" style=""font-family: STIXGeneral;"">,</span><span class=""mo"" id=""MathJax-Span-56"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">⋯</span><span class=""mo"" id=""MathJax-Span-57"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">,</span><span class=""msubsup"" id=""MathJax-Span-58"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.867em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-59"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mi"" id=""MathJax-Span-60"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.042em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-61"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.055em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-5"">T=\{t_1, t_2, \cdots, t_N\}</script>是所有交易的集合。包含0个或多个项的集合被称为项集（itemset）。如果一个项集包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-6-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-62"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-63""><span class=""mi"" id=""MathJax-Span-64"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-6"">k</script>个项，则称它为 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-7-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-65"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-66""><span class=""mi"" id=""MathJax-Span-67"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-7"">k</script>-项集。显然，每个交易<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-8-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-68"" style=""width: 0.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.561em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.323em, 1000em, 2.401em, -0.523em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-69""><span class=""msubsup"" id=""MathJax-Span-70""><span style=""display: inline-block; position: relative; width: 0.555em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-71"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mi"" id=""MathJax-Span-72"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.886em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-8"">t_i</script>包含的项集都是<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-9-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-73"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-74""><span class=""mi"" id=""MathJax-Span-75"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-9"">I</script>的子集。</p>

<p><strong>关联规则</strong>是形如 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-10-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-76"" style=""width: 3.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.866em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-77""><span class=""mi"" id=""MathJax-Span-78"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-79"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-80"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-10"">X\to Y</script> 的蕴涵表达式，其中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-11-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-81"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-82""><span class=""mi"" id=""MathJax-Span-83"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-11"">X</script>和<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-12-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-84"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-85""><span class=""mi"" id=""MathJax-Span-86"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-12"">Y</script>是不相交的项集，即 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-13-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-87"" style=""width: 4.55em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 4.237em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.639em, 1000em, 2.815em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-88""><span class=""mi"" id=""MathJax-Span-89"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-90"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∩</span><span class=""mi"" id=""MathJax-Span-91"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-92"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-93"" style=""font-family: STIXVariants; padding-left: 0.313em;"">∅</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.146em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-13"">X\cap Y=\emptyset</script>。关联规则的强度可以用它的支持度（support）和置信度（confidence）来度量。支持度确定规则可以用于给定数据集的频繁程度，而置信度确定<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-14-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-94"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-95""><span class=""mi"" id=""MathJax-Span-96"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-14"">Y</script>在包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-15-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-97"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-98""><span class=""mi"" id=""MathJax-Span-99"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-15"">X</script>的交易中出现的频繁程度。支持度（<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-16-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-100"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-101""><span class=""mi"" id=""MathJax-Span-102"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-16"">s</script>：Fraction of transactions that contain both <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-17-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-103"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-104""><span class=""mi"" id=""MathJax-Span-105"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-17"">X</script> and <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-18-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-106"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-107""><span class=""mi"" id=""MathJax-Span-108"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-18"">Y</script>）和置信度（<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-19-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-109"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-110""><span class=""mi"" id=""MathJax-Span-111"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-19"">c</script>：How often items in <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-20-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-112"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-113""><span class=""mi"" id=""MathJax-Span-114"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-20"">Y</script> appear in transactions that contain <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-21-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-115"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-116""><span class=""mi"" id=""MathJax-Span-117"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-21"">X</script>）这两种度量的形式定义如下： <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true""><span class=""MathJax"" id=""MathJax-Element-22-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-118"" style=""width: 100%; display: inline-block; min-width: 9.883em;""><span style=""display: inline-block; position: relative; width: 100%; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(4.193em, 1000em, 9.32em, -0.561em); top: -5.732em; left: 0em; width: 100%;""><span class=""mrow"" id=""MathJax-Span-119""><span style=""display: inline-block; position: relative; width: 100%; height: 0px;""><span style=""position: absolute; clip: rect(2.448em, 1000em, 4.875em, -0.545em); top: -3.988em; left: 50%; margin-left: -4.59em;""><span class=""mi"" id=""MathJax-Span-120"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-121"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-122"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-123"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-124"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-125"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-126"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-127"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 3.734em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -3.231em; left: 50%; margin-left: -1.807em;""><span class=""mrow"" id=""MathJax-Span-128""><span class=""mi"" id=""MathJax-Span-129"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-130"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-131"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-132"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∪</span><span class=""mi"" id=""MathJax-Span-133"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-134"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.756em, -0.581em); top: -1.869em; left: 50%; margin-left: -0.374em;""><span class=""mi"" id=""MathJax-Span-135"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 3.734em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span><span style=""position: absolute; clip: rect(2.448em, 1000em, 5.037em, -0.561em); top: -1.45em; left: 50%; margin-left: -4.617em;""><span class=""mspace"" id=""MathJax-Span-136"" style=""height: 0em; vertical-align: 0em; width: 0em; display: inline-block; overflow: hidden;""></span><span class=""mi"" id=""MathJax-Span-137"" style=""font-family: STIXGeneral; font-style: italic;"">c</span><span class=""mo"" id=""MathJax-Span-138"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-139"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-140"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-141"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-142"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-143"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-144"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 3.734em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -3.231em; left: 50%; margin-left: -1.807em;""><span class=""mrow"" id=""MathJax-Span-145""><span class=""mi"" id=""MathJax-Span-146"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-147"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-148"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-149"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∪</span><span class=""mi"" id=""MathJax-Span-150"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-151"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -1.869em; left: 50%; margin-left: -0.935em;""><span class=""mrow"" id=""MathJax-Span-152""><span class=""mi"" id=""MathJax-Span-153"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-154"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-155"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-156"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 3.734em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 5.732em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 5.219em; vertical-align: -3.706em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-22"">s(X\to Y)=\frac{\sigma(X\cup Y)}{N}\\
c(X\to Y)=\frac{\sigma(X\cup Y)}{\sigma(X)}</script> <br>
例如考虑规则{Milk, Diaper}<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-23-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-157"" style=""width: 1.017em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.935em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.92em, 1000em, 2.684em, -0.491em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-158""><span class=""mo"" id=""MathJax-Span-159"" style=""font-family: STIXGeneral;"">→</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.552em; vertical-align: -0.006em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-23"">\to</script>{Beer}，则易得： <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true""><span class=""MathJax"" id=""MathJax-Element-24-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-160"" style=""width: 100%; display: inline-block; min-width: 17.217em;""><span style=""display: inline-block; position: relative; width: 100%; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(4.286em, 1000em, 9.503em, -0.561em); top: -5.857em; left: 0em; width: 100%;""><span class=""mrow"" id=""MathJax-Span-161""><span style=""display: inline-block; position: relative; width: 100%; height: 0px;""><span style=""position: absolute; clip: rect(2.417em, 1000em, 4.874em, -0.545em); top: -3.988em; left: 50%; margin-left: -7.757em;""><span class=""mi"" id=""MathJax-Span-162"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-163"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-164"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 8.843em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -3.255em; left: 50%; margin-left: -4.361em;""><span class=""mrow"" id=""MathJax-Span-165""><span class=""mi"" id=""MathJax-Span-166"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-167"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-168"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-169"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-170"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-171"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-172"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-173"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-174"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-175"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-176"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-177"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-178"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-179"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-180"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">B</span><span class=""mi"" id=""MathJax-Span-181"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-182"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-183"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-184"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.494em); top: -1.869em; left: 50%; margin-left: -0.53em;""><span class=""mrow"" id=""MathJax-Span-185""><span class=""texatom"" id=""MathJax-Span-186""><span class=""mrow"" id=""MathJax-Span-187""><span class=""mo"" id=""MathJax-Span-188"" style=""font-family: STIXGeneral;"">|</span></span></span><span class=""mi"" id=""MathJax-Span-189"" style=""font-family: STIXGeneral; font-style: italic;"">T<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""texatom"" id=""MathJax-Span-190""><span class=""mrow"" id=""MathJax-Span-191""><span class=""mo"" id=""MathJax-Span-192"" style=""font-family: STIXGeneral;"">|</span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 8.843em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-193"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-194"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-195"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.68em, 1000em, 2.755em, -0.53em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-196"" style=""font-family: STIXGeneral;"">5</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-197"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-198"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.4</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span><span style=""position: absolute; clip: rect(2.417em, 1000em, 5.065em, -0.561em); top: -1.419em; left: 50%; margin-left: -8.034em;""><span class=""mspace"" id=""MathJax-Span-199"" style=""height: 0em; vertical-align: 0em; width: 0em; display: inline-block; overflow: hidden;""></span><span class=""mi"" id=""MathJax-Span-200"" style=""font-family: STIXGeneral; font-style: italic;"">c</span><span class=""mo"" id=""MathJax-Span-201"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-202"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 8.843em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -3.255em; left: 50%; margin-left: -4.361em;""><span class=""mrow"" id=""MathJax-Span-203""><span class=""mi"" id=""MathJax-Span-204"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-205"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-206"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-207"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-208"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-209"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-210"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-211"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-212"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-213"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-214"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-215"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-216"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-217"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-218"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">B</span><span class=""mi"" id=""MathJax-Span-219"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-220"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-221"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-222"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -1.869em; left: 50%; margin-left: -3.209em;""><span class=""mrow"" id=""MathJax-Span-223""><span class=""mi"" id=""MathJax-Span-224"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-225"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-226"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-227"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-228"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-229"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-230"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-231"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-232"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-233"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-234"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-235"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-236"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-237"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 8.843em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-238"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-239"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-240"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-241"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-242"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-243"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.67</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 5.857em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 5.315em; vertical-align: -3.768em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-24"">s=\frac{\sigma(Milk, Diaper, Beer)}{|T|}=\frac{2}{5}=0.4\\
c=\frac{\sigma(Milk, Diaper, Beer)}{\sigma(Milk, Diaper)}=\frac{2}{3}=0.67</script>

<p>Association Rule Mining Task：Given a set of transactions T, the goal of association rule mining is to find all rules having </p>

<ul>
<li>support ≥ minsup threshold</li>
<li>confidence ≥ minconf threshold</li>
</ul>

<p>因此，大多数关联规则挖掘算法通常采用的一种策略是，将关联规则挖掘任务分解为如下两个主要的子任务。 </p>

<ol>
<li><strong>频繁项集产生</strong>：其目标是发现满足最小支持度阈值的所有项集，这些项集称作频繁项集（frequent itemset）。 </li>
<li><strong>规则的产生</strong>：其目标是从上一步发现的频繁项集中提取所有高置信度的规则，这些规则称作强规则（strong rule）。</li>
</ol>

<p>通常，频繁项集产生所需的计算开销远大于产生规则所需的计算开销。 </p>

<p>最容易想到、也最直接的进行关联关系挖掘的方法或许就是暴力搜索（Brute-force）的方法：</p>

<ul>
<li>List all possible association rules</li>
<li>Compute the support and confidence for each rule</li>
<li>Prune rules that fail the minsup and minconf thresholds</li>
</ul>

<p>然而，由于Brute-force的计算量过大，所以采样这种方法并不现实！格结构（Lattice structure）常被用来枚举所有可能的项集。如下图所示为<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-25-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-244"" style=""width: 7.35em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 6.854em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.922em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-245""><span class=""mi"" id=""MathJax-Span-246"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span><span class=""mo"" id=""MathJax-Span-247"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-248"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""mi"" id=""MathJax-Span-249"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mo"" id=""MathJax-Span-250"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-251"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">b</span><span class=""mo"" id=""MathJax-Span-252"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-253"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">c</span><span class=""mo"" id=""MathJax-Span-254"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-255"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mo"" id=""MathJax-Span-256"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-257"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">e</span><span class=""mo"" id=""MathJax-Span-258"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.058em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-25"">I=\{a,b,c,d,e\}</script>的项集格。一般来说，排除空集后，一个包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-26-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-259"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-260""><span class=""mi"" id=""MathJax-Span-261"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-26"">k</script>个项的数据集可能产生<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-27-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-262"" style=""width: 2.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.555em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.482em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-263""><span class=""msubsup"" id=""MathJax-Span-264""><span style=""display: inline-block; position: relative; width: 0.885em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mn"" id=""MathJax-Span-265"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.521em; left: 0.498em;""><span class=""mi"" id=""MathJax-Span-266"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-267"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mn"" id=""MathJax-Span-268"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">1</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.081em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-27"">2^k-1</script>个频繁项集。由于在实际应用中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-28-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-269"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-270""><span class=""mi"" id=""MathJax-Span-271"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-28"">k</script>的值可能非常大，需要探查的项集搜索空集可能是指数规模的。 <br>
</p><center> <br>
<img src=""http://img.blog.csdn.net/20161205230205056"" width=""480""> <br>
</center> <br>
发现频繁项集的一种原始方法是确定格结构中每个候选项集（candidate itemset）的支持度计 数。为了完成这一任务，必须将每个候选项集与每个交易进行比较，如下图所示。如果候选项集包含在交易中，则候选项集的支持度计数增加。例如，由于项集{Bread, Milk}出现在事务1、4 和5中，其支持度计数将增加3次。这种方法的开销可能非常大，因为它需要进行<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-29-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-272"" style=""width: 3.95em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 3.676em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.501em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-273""><span class=""mi"" id=""MathJax-Span-274"" style=""font-family: STIXGeneral; font-style: italic;"">O</span><span class=""mo"" id=""MathJax-Span-275"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-276"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span><span class=""mi"" id=""MathJax-Span-277"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-278"" style=""font-family: STIXGeneral; font-style: italic;"">w</span><span class=""mo"" id=""MathJax-Span-279"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.046em; vertical-align: -0.256em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-29"">O(NMw)</script>次比 较，其中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-30-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-280"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.756em, -0.581em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-281""><span class=""mi"" id=""MathJax-Span-282"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.848em; vertical-align: -0.083em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-30"">N</script>是交易数，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-31-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-283"" style=""width: 5.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 4.735em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.482em, 1000em, 2.741em, -0.579em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-284""><span class=""mi"" id=""MathJax-Span-285"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mo"" id=""MathJax-Span-286"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""msubsup"" id=""MathJax-Span-287"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.885em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mn"" id=""MathJax-Span-288"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.521em; left: 0.498em;""><span class=""mi"" id=""MathJax-Span-289"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-290"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mn"" id=""MathJax-Span-291"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">1</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.081em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-31"">M=2^k-1</script>是候选项集数，而<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-32-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-292"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.759em, -0.546em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-293""><span class=""mi"" id=""MathJax-Span-294"" style=""font-family: STIXGeneral; font-style: italic;"">w</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.624em; vertical-align: -0.086em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-32"">w</script>是交易的最大宽度（也就是交易中最大的项数）。 <p></p>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161204230707677"" width=""480""> <br>
</center><p></p>

<hr>



<h2 id=""先验原理"">先验原理</h2>

<p>在上一小节的末尾，我们已经看到Brute-force在实际中并不可取。我们必须设法降低产生频繁项集的计算复杂度。此时我们可以利用支持度对候选项集进行剪枝，这也是Apriori所利用的第一条先验原理：</p>

<p><strong>Apriori定律1</strong>：如果一个集合是频繁项集，则它的所有子集都是频繁项集。</p>

<p>例如：假设一个集合{A,B}是频繁项集，即A、B同时出现在一条记录的次数大于等于最小支持度min_support，则它的子集{A},{B}出现次数必定大于等于min_support，即它的子集都是频繁项集。</p>

<p><strong>Apriori定律2</strong>：如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。</p>

<p>举例：假设集合{A}不是频繁项集，即A出现的次数小于 min_support，则它的任何超集如{A,B}出现的次数必定小于min_support，因此其超集必定也不是频繁项集。</p>

<p>下图表示当我们发现{A,B}是非频繁集时，就代表所有包含它的超级也是非频繁的，即可以将它们都剪除。 <br>
</p><center> <br>
<img src=""http://img.blog.csdn.net/20161204231748224"" width=""600""> <br>
</center><p></p>

<hr>



<h2 id=""apriori算法与实例"">Apriori算法与实例</h2>

<p>R. Agrawal 和 R. Srikant于1994年在文献【2】中提出了Apriori算法，该算法的描述如下：</p>

<ul>
<li>Let <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-33-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-295"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-296""><span class=""mi"" id=""MathJax-Span-297"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-33"">k</script>=1</li>
<li>Generate frequent itemsets of length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-34-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-298"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-299""><span class=""mi"" id=""MathJax-Span-300"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-34"">k</script></li>
<li>Repeat until no new frequent itemsets are identified <br>
<ul><li>Generate length (<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-35-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-301"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-302""><span class=""mi"" id=""MathJax-Span-303"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-35"">k</script>+1) candidate itemsets from length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-36-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-304"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-305""><span class=""mi"" id=""MathJax-Span-306"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-36"">k</script> frequent itemsets</li>
<li>Prune candidate itemsets containing subsets of length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-37-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-307"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-308""><span class=""mi"" id=""MathJax-Span-309"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-37"">k</script>+1 that are infrequent </li>
<li>Count the support of each candidate by scanning the DB</li>
<li>Eliminate candidates that are infrequent, leaving only those that are frequent</li></ul></li>
</ul>

<p>或者在其他资料上更为常见的是下面这种形式化的描述（注意这跟前面的文字描述是一致的）： <br>
</p><center><img src=""http://img.blog.csdn.net/20161206105139020"" width=""480""> <br>
</center> <br>
下面是一个具体的例子，最开始数据库里有4条交易，{A、C、D}，{B、C、E}，{A、B、C、E}，{B、E}，使用min_support=2作为支持度阈值，最后我们筛选出来的频繁集为{B、C、E}。 <br>
<center> <br>
<img src=""http://img.blog.csdn.net/20161206104307033"" width=""540""> <br>
</center> <br>
上述例子中，最值得我们从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-38-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-310"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-311""><span class=""msubsup"" id=""MathJax-Span-312""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-313"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-314"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-38"">L_2</script>到<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-39-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-315"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.403em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-316""><span class=""msubsup"" id=""MathJax-Span-317""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-318"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-319"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.017em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-39"">C_3</script>的这一步。这其实就是在执行伪代码中第一个蓝色框条所标注的地方：<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-40-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-320"" style=""width: 14.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 13.271em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.92em, -0.495em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-321""><span class=""msubsup"" id=""MathJax-Span-322""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-323"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-324""><span class=""mrow"" id=""MathJax-Span-325""><span class=""mi"" id=""MathJax-Span-326"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-327"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-328"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-329"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-330"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">G</span><span class=""mi"" id=""MathJax-Span-331"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-332"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-333"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-334"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mi"" id=""MathJax-Span-335"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-336"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span class=""mi"" id=""MathJax-Span-337"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-338"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span class=""mi"" id=""MathJax-Span-339"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-340"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-341"" style=""font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mi"" id=""MathJax-Span-342"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-343"" style=""font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mi"" id=""MathJax-Span-344"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-345"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span class=""mi"" id=""MathJax-Span-346"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-347"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-348"" style=""font-family: STIXGeneral;"">(</span><span class=""msubsup"" id=""MathJax-Span-349""><span style=""display: inline-block; position: relative; width: 0.944em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-350"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mi"" id=""MathJax-Span-351"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-352"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.056em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-40"">C_{k+1}=GenerateCandidates(L_k)</script>，具体来说在Apriori算法中，它所使用的策略如下： <br>
<center><img src=""http://img.blog.csdn.net/20161206112355408"" width=""480""> <br>
</center> <br>
可见生成策略由两部分组成，首先是self-joining部分。例如，假设我们有一个<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-41-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-353"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.403em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-354""><span class=""msubsup"" id=""MathJax-Span-355""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-356"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-357"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-41"">L_3</script>={abc, abd, acd, ace, bcd}（注意这已经是排好序的}。选择两个itemsets，它们满足条件：前<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-42-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-358"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-359""><span class=""mi"" id=""MathJax-Span-360"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-42"">k</script>-1个item都相同，但最后一个item不同，把它们组成一个新的<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-43-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-361"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-362""><span class=""msubsup"" id=""MathJax-Span-363""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-364"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-365""><span class=""mrow"" id=""MathJax-Span-366""><span class=""mi"" id=""MathJax-Span-367"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-368"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-369"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-43"">C_{k+1}</script>的项集<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-44-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-370"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-371""><span class=""mi"" id=""MathJax-Span-372"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-44"">c</script>。如下图所示，{abc}和{abd}组成{abcd}，{acd}和{ace}组成{acde}。生成策略的第二部分是pruning。对于一个位于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-45-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-373"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-374""><span class=""msubsup"" id=""MathJax-Span-375""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-376"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-377""><span class=""mrow"" id=""MathJax-Span-378""><span class=""mi"" id=""MathJax-Span-379"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-380"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-381"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-45"">C_{k+1}</script>中的项集<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-46-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-382"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-383""><span class=""mi"" id=""MathJax-Span-384"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-46"">c</script>，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-47-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-385"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-386""><span class=""mi"" id=""MathJax-Span-387"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-47"">s</script>是<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-48-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-388"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-389""><span class=""mi"" id=""MathJax-Span-390"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-48"">c</script>的大小为<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-49-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-391"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-392""><span class=""mi"" id=""MathJax-Span-393"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-49"">k</script>的子集，如果<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-50-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-394"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-395""><span class=""mi"" id=""MathJax-Span-396"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-50"">s</script>不存在于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-51-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-397"" style=""width: 1.017em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.935em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.401em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-398""><span class=""msubsup"" id=""MathJax-Span-399""><span style=""display: inline-block; position: relative; width: 0.944em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-400"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mi"" id=""MathJax-Span-401"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.001em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-51"">L_k</script>中，则将<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-52-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-402"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-403""><span class=""mi"" id=""MathJax-Span-404"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-52"">c</script>从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-53-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-405"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-406""><span class=""msubsup"" id=""MathJax-Span-407""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-408"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-409""><span class=""mrow"" id=""MathJax-Span-410""><span class=""mi"" id=""MathJax-Span-411"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-412"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-413"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-53"">C_{k+1}</script>中删除。如下图所示，因为{acde}的子集{cde}并不存在于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-54-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-414"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.403em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-415""><span class=""msubsup"" id=""MathJax-Span-416""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-417"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-418"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-54"">L_3</script>中，所以我们将{acde}从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-55-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-419"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.393em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-420""><span class=""msubsup"" id=""MathJax-Span-421""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-422"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-423"" style=""font-size: 70.7%; font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.006em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-55"">C_4</script>中删除。最后得到的<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-56-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-424"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.393em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-425""><span class=""msubsup"" id=""MathJax-Span-426""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-427"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-428"" style=""font-size: 70.7%; font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.006em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-56"">C_4</script>，仅包含一个项集{abcd}。 <br>
<center><img src=""http://img.blog.csdn.net/20161206113016411"" width=""250""></center> <br>
回到之前的例子，从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-57-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-429"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-430""><span class=""msubsup"" id=""MathJax-Span-431""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-432"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-433"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-57"">L_2</script>到<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-58-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-434"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.403em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-435""><span class=""msubsup"" id=""MathJax-Span-436""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-437"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-438"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.017em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-58"">C_3</script>的这一步，我们就只能获得{B、C、E}。以上便是Apriori算法的最核心思想。当然在具体实现的时候，如何Count Supports of Candidates也是需要考虑的问题，我们这里略去这部分内容的讨论，有兴趣读者可以参阅文献【3】以了解更多。<p></p>

<hr>



<h2 id=""参考文献"">参考文献</h2>

<p>【1】Wu, X., Kumar, V., Quinlan, J.R., Ghosh, J., Yang, Q., Motoda, H., McLachlan, G.J., Ng, A., Liu, B., Philip, S.Y. and Zhou, Z.H., 2008. Top 10 algorithms in data mining. Knowledge and information systems, 14(1), pp.1-37. (<a href=""http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf"">http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf</a>） </p>

<p>【2】Rakesh Agrawal and Ramakrishnan Srikant Fast algorithms for mining association rules in large databases. Proceedings of the 20th International Conference on Very Large Data Bases, VLDB, pages 487-499, Santiago, Chile, September 1994. (<a href=""http://rakesh.agrawal-family.com/papers/vldb94apriori.pdf"">http://rakesh.agrawal-family.com/papers/vldb94apriori.pdf</a>)</p>

<p>【3】Pang-Ning Tan, Micheale Steinbach, Vipin Kumar. 数据挖掘导论，范明，等译. 人民邮电出版社，2011</p></div>",数据库,2016-12-06 13:32
4612,"前言


  UML（Unified Modeling Language）中文统一建模语言，是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UM...",xiehuimx,http://blog.csdn.net/xiehuimx/article/details/53427452,Java利器之UML类图详解,"<div class=""markdown_views""><h1 id=""前言"">前言</h1>

<blockquote>
  <p>UML（Unified Modeling Language）中文统一建模语言，是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。                       【维基百科】</p>
</blockquote>

<p>最近看一些开源项目的时候，总是看到UML中的类图，一开始自己的做法就是跳过去类图的部分，不过后来又遇到了几次，就决定学习下，不能再选择逃避了，这也是一个即将优秀的程序探索者应该必备的素质。今天把自己学习到的内容记录一下（怕健忘…），相信对类图不清楚的朋友，通过读取这篇文章后也能有一个比较清晰的认识，让你看的懂，画的出。</p>



<h1 id=""类图作用"">类图作用</h1>

<p>类图是软件工程的统一建模语言一种静态结构图，该图描述了系统的类集合，类的属性和类之间的关系。帮助人们简化对系统的理解，它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。学习好类图的绘制，是一位合格的软件工程师应有的技能。</p>



<h1 id=""类的uml图示"">类的UML图示</h1>

<p>在UML类图中，类使用包含类名，属性，方法名及其参数并且用分割线分隔的长方形表示。例如最简单的一个类Person 类有两个属性分别是name和age,并提供对应的get和set方法。java类代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Person.java
 * Author:  Code4Android
 * Purpose: Defines the Class Person
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 4615fa10-38a3-446e-a7d5-59dcb3e786b5 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> f314a698-c3c1-4ec7-a8ea-f8b2df107a29 */</span>
   <span class=""hljs-keyword"">private</span> String name = zhangsan;
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 271c633b-87e5-4b41-9f70-2ce320635014 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> age = <span class=""hljs-number"">23</span>;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> ccf5b7c1-d005-4a5f-b823-9988f2dd6f91 */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getName</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> name;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 83e01fba-b004-498e-b7ab-778de8be6dfa */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">getAge</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> age;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> name
    *<span class=""hljs-javadoctag""> @pdOid</span> 9525895a-11bf-44a3-afed-b4a014540a98 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setName</span>(String name) {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">this</span>.name=name;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> age
    *<span class=""hljs-javadoctag""> @pdOid</span> 16fd66cc-2af1-4fef-ae98-2a37f495a487 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setAge</span>(<span class=""hljs-keyword"">int</span> age) {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">this</span>.age=age;
   }

}</code></pre>

<p>那么用类图表示如下，它很简单的表示出了类的所有信息。</p>

<p><img src=""http://img.blog.csdn.net/20161205102937081"" alt=""这里写图片描述"" title=""""></p>

<p>通过上面的Person的类图，你应该可以看出类图有三部分组成，类名，属性和操作方法</p>



<h2 id=""类名"">类名</h2>

<p>顾名思义就是类的名字，对应于Java类中的类名，如果该类是抽象类的话，在类名右下角会有一个(Abstract)表示，假如Person是一个抽象类的话，则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103047286"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""属性名"">属性名</h2>

<p>UML中的属性名就是Java中的成员变量，当然一个类可以没有属性也可以有任意多个属性。Java类中成员变量的修饰符，类型和默认值都可以在UML类图中体现出来。通用表示方法如下</p>



<pre class=""prettyprint""><code class="" hljs fix""><span class=""hljs-attribute"">可见性  名称:类型 [ </span>=<span class=""hljs-string""> 默认值 ]</span></code></pre>

<p>在Java类中可见性分为三类，分别是private,public 和protected,在类图中分别用符号-、+和#表示。通用表示方法中名称就成员变量的名字，类型就是成员变量的类型如String类型，int类型等，当然也可以是自定义类型。而后面的默认值是可选参数，如果我们没有给成员变量设置初始值，UML类图中就不显示，如上面Person类图，变量name，age没有设置初始值，如果此时我们给name和vaule分别设置默认值zhangsan，23。则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205102818719"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""操作方法"">操作方法</h2>



<pre class=""prettyprint""><code class="" hljs css"">可见性  名称(参数列表) <span class=""hljs-attr_selector"">[ : 返回类型]</span></code></pre>

<p>类的操作方法通用表示方式如上，方法可见性和属性可见性是一致的，名称就是方法名，参数列表是可选像，可以是对个参数也是没有参数，若多个参数用英文逗号隔开，返回类型是一个可选项，表示方法的返回值类型，依赖于具体的编程语言，可以是基本数据类型，也可以是用户自定义类型，还可以是空类型(void)，如果是构造方法，则无返回类型。</p>



<h1 id=""类之间的关系"">类之间的关系</h1>

<p>在UML类图中类与类之间存在多种关系，如泛化(Generalization)关系，实现（Realization)关系，依赖(Dependence)关系，关联（Association）关系，聚合(Aggregation)关系， 组合(Composition)关系。</p>



<h2 id=""泛化generalization关系"">泛化(Generalization)关系</h2>

<p>泛化关系也就是Java中的继承，类和类，接口和接口都可以是继承关系，父类又称作基类或超类，子类又称作派生类，类继承父类后可以实现父类的所以功能，并能拥有父类没有的功能。在UML中，泛化关系可以用带空心三角形的直线来表示；例如我们创建两个Java类Teachers和Students类如下代码</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Teachers.java
 * Author:  Code4Android
 * Purpose: Defines the Class Teachers
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> b54e2d34-d17e-4f2d-993d-563b8e007db4 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Teachers</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 55b38630-1e30-449b-9cb7-f8ef9de59412 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> tNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> f603d47d-a51f-4b0c-b10b-881842374f8a */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">teach</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am teaching""</span>;
   }

}


<span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Students.java
 * Author:  Code4Android
 * Purpose: Defines the Class Students
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 6b8ac239-000e-46d3-8233-962a612c12bd */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Students</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0c7627fd-fa78-4f60-a859-2b90274323e1 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 1f929347-b84a-4a54-9ca9-144de66c742b */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">study</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am learning""</span>;
   }

}
</code></pre>

<p>则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103413880"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""实现realization关系"">实现（Realization)关系</h2>

<p>实现关系在java中就是一个类和接口之间的关系，接口中一般是没有成员变量，所有操作都是抽象的（abstract修饰），只有声明没有具体的实现，具体实现需在实现该接口的类中。在UML中用与类的表示法类似的方式表示接口，区别可在UML中类图中看出。如我们创建一个交通工具类接口IVehicle,并有一个形式速度方法声明travelSpeed，Java代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  IVehicle.java
 * Author:  Code4Android
 * Purpose: Defines the Interface IVehicle
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 7cbe9f91-a7d9-44b5-a743-280cbc464e61 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 5e87ebbc-5647-4dc6-8c3c-d23857662584 */</span>
   <span class=""hljs-keyword"">int</span> travelSpeed();

}</code></pre>

<p>对于交通工具，有很多种，不同交通工具都有一个速度，我们举两个例子，如HighSpeedRail（高铁，时速288KM）和Bicycle（自行车类时速20KM）,则两个实现类代码为</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  HighSpeedRail.java
 * Author:  Code4Android
 * Purpose: Defines the Class HighSpeedRail
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0ae31b48-07b0-4bcd-83ff-a8a7c7d94518 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">HighSpeedRail</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> a7693fd4-d6d4-4e93-a946-380f69011b13 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">travelSpeed</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">288</span>;
   }

}

<span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Bicycle.java
 * Author:  Code4Android
 * Purpose: Defines the Class Bicycle
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> c212a8c3-88db-48d8-a2a0-d381d2ee7f91 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Bicycle</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 9ac52769-7489-47b0-9079-4f63f84f1fde */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">travelSpeed</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">20</span>;
   }

}</code></pre>

<p>在UML中实现接口用虚线和带空心的三角形表示。则上面对应的UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161204124436841"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""依赖dependence关系"">依赖(Dependence)关系</h2>

<p>依赖关系是类与类之间最弱的关系，依赖可以简单的理解一个类使用了另一个类，这种使用关系具有临时性特征，但是一个类又会由于另一个类的改变而受到影响，例如在上面举的例子中，假如我们的Students类拥有一个Bicycle，那么要获取移动速度则需要使用Bicycle中获取速度的方法travelSpeed()方法。此时Students代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Students.java
 * Author:  Code4Android
 * Purpose: Defines the Class Students
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 6b8ac239-000e-46d3-8233-962a612c12bd */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Students</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0c7627fd-fa78-4f60-a859-2b90274323e1 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 1f929347-b84a-4a54-9ca9-144de66c742b */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">study</span>() {
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am learning""</span>;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> bicycle
    *<span class=""hljs-javadoctag""> @pdOid</span> 82bd76ff-f70c-4e25-bea5-8de19db4699c */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">moveSpeed</span>(Bicycle bicycle) {
      <span class=""hljs-keyword"">return</span> bicycle.travelSpeed();
   }

}</code></pre>

<p>在UML中一栏用带箭头的虚线表示依赖，对应的UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103645029"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""关联association关系"">关联（Association）关系</h2>

<p>关联关系表示一个类和另一类有联系，例如在上面的举例中每个Teachers都有个家庭住址与之对应，而此时Teacher和Address就形成了一对一的关联关系。如下</p>

<p><img src=""http://img.blog.csdn.net/20161205105807907"" alt=""这里写图片描述"" title=""""></p>

<p>关联关系是一种包含关系，在UML中用一个带箭头的实线表示，箭头指向被包含类。在上图中你可能会发现在线上有1 ..1,这个是说明包含关系的。在UML类中有如下几种。</p>



<pre class=""prettyprint""><code class="" hljs markdown"">1..1 表示另一个类的一个对象只与该类的一个对象有关系

0..* 表示另一个类的一个对象与该类的零个或多个对象有关系

1..* 表示另一个类的一个对象与该类的一个或多个对象有关系

0..1 表示另一个类的一个对象没有或只与该类的一个对象有关系

<span class=""hljs-bullet"">* </span>任意多个对象关联</code></pre>



<h2 id=""聚合aggregation关系"">聚合(Aggregation)关系</h2>

<p>聚合关系是表示整体与部分的关系，但是部分可以脱离整体而存在。例如一个Teachers对象有一辆汽车Car，此时Car就是Teachers的一部分，但是Car可以脱离Teachers而存在。在UML类中聚合关系用带空心菱形的直线表示。 <br>
<img src=""http://img.blog.csdn.net/20161205115412548"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""组合composition关系"">组合(Composition)关系</h2>

<p>组合关系也是一种部分和整体的关系，但是部分存活周期受到整体的影响，若整体不存在则部分也将不存在。此时部分需在整体的构造方法中创建。在UML类中，组合关系用带实心菱形的直线表示。</p>

<p><img src=""http://img.blog.csdn.net/20161205115204805"" alt=""这里写图片描述"" title=""""></p>

<p>在文章的最后，附上本篇文章所画的完整的UML类图。</p>

<p><img src=""http://img.blog.csdn.net/20161205122009647"" alt=""这里写图片描述"" title=""""></p>

<p>到此，本篇文章真的结束了，若文章有不足或者错误的地方，欢迎指正，以防止给其他读者错误引导。最后感谢<a href=""http://blog.csdn.net/LoveLion/article/category/738449"">LoveLion</a>的系列文章。</p></div>",移动开发,2016-12-06 15:48
5511,今天要写的这篇博文意义重大，也是网上很少有的，这是在我工作中学会的一项技术，当然，它也是由简单的问题组合而来的。如何在安卓中写C语言程序，调试安卓驱动，测试程序的的一项重要技能，下面我就不说废话了，直...,morixinguan,http://blog.csdn.net/morixinguan/article/details/53469818,在android系统上写C语言程序--开机启动该程序不进入安卓系统,,"移动开发,MTK平台Android系统开发与定制",2016-12-06 15:48
5001,本文属于 SQL Server 扩展事件（Extented Events）从入门到进阶 系列	由于工作需要，决定深入研究SQL Server的扩展事件（Extended Events/xEvents）...,DBA_Huangzj,http://blog.csdn.net/dba_huangzj/article/details/53423971,SQL Server 扩展事件（Extented Events）从入门到进阶（1）——从SQL Trace到Extented Events,,"数据库,SQL Server DBA",2016-12-06 17:00
3162,"使用Android SwipeRefreshLayout了解Android的嵌套滑动机制
NestedScrollingChild，NestedScrollingParent，NestedScroll...",hehe26,http://blog.csdn.net/hehe26/article/details/53487083,使用Android SwipeRefreshLayout了解Android的嵌套滑动机制,,移动开发,2016-12-06 17:39
5460,"摘要
环境搭建
前奏
后招
配置
配置环境变量
配置数据路径
查看信息
初次使用
登陆
显示数据库信息
选择数据库
显示表文档信息
增删改查
客户端
下载安装
破解之路
总结摘要一直以来接触最多的都是...",Marksinoberg,http://blog.csdn.net/marksinoberg/article/details/53489989,我的MongoDB坎坷之路,"<div class=""markdown_views""><p></p><div class=""toc""><div class=""toc"">
<ul>
<li><ul>
<li><a href=""#%E6%91%98%E8%A6%81"">摘要</a></li>
<li><a href=""#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA"">环境搭建</a><ul>
<li><a href=""#%E5%89%8D%E5%A5%8F"">前奏</a></li>
<li><a href=""#%E5%90%8E%E6%8B%9B"">后招</a></li>
<li><a href=""#%E9%85%8D%E7%BD%AE"">配置</a><ul>
<li><a href=""#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"">配置环境变量</a></li>
<li><a href=""#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E8%B7%AF%E5%BE%84"">配置数据路径</a></li>
<li><a href=""#%E6%9F%A5%E7%9C%8B%E4%BF%A1%E6%81%AF"">查看信息</a></li>
</ul>
</li>
</ul>
</li>
<li><a href=""#%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8"">初次使用</a><ul>
<li><a href=""#%E7%99%BB%E9%99%86"">登陆</a></li>
<li><a href=""#%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF"">显示数据库信息</a></li>
<li><a href=""#%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E5%BA%93"">选择数据库</a></li>
<li><a href=""#%E6%98%BE%E7%A4%BA%E8%A1%A8%E6%96%87%E6%A1%A3%E4%BF%A1%E6%81%AF"">显示表文档信息</a></li>
<li><a href=""#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5"">增删改查</a></li>
</ul>
</li>
<li><a href=""#%E5%AE%A2%E6%88%B7%E7%AB%AF"">客户端</a><ul>
<li><a href=""#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"">下载安装</a></li>
<li><a href=""#%E7%A0%B4%E8%A7%A3%E4%B9%8B%E8%B7%AF"">破解之路</a></li>
</ul>
</li>
<li><a href=""#%E6%80%BB%E7%BB%93"">总结</a></li>
</ul>
</li>
</ul>
</div>
</div>




<h2 id=""摘要"">摘要</h2>

<p>一直以来接触最多的都是关系型数据库，对于NoSQL确实是不甚了解。但是对于目前开发而言，NoSQL也算是一个比较火的方向，而在众多NoSQL数据库之中，MongoDB又是这么的“靓丽”，让人不禁心仪神往。然而没想到的是，在这个过程中，却又是那么的坎坷。于是作此文以记之。</p>



<h2 id=""环境搭建"">环境搭建</h2>



<h3 id=""前奏"">前奏</h3>

<p>照常在官网上 <a href=""https://www.mongodb.com/"">https://www.mongodb.com/</a>  直接找到download 按钮，下载一个windows.msi版本的就好了。 <br>
<img src=""http://img.blog.csdn.net/20161206172000054?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""下载msi windows版本即可"" title=""""> <br>
官方最新版的mongodb需要： <br>
VC++2015 RC x64的支持，否则会报出 <br>
<img src=""http://img.blog.csdn.net/20161206172025272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""由于系统版本问题，导致安装出现异常"" title=""""> <br>
但是， 但是 遗憾的是我的电脑版本竟然不够，竟然不够。这是什么情况？ <br>
然后查了下文档，Windows7的话需要最低版本为7601，而我的版本是7600.( ⊙ o ⊙ )啊！真的是好气哦。 <br>
<img src=""http://img.blog.csdn.net/20161206172242289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""查看电脑详细版本号命令 msinfo32"" title=""""> <br>
安装的时候会弹出这样的一个窗口，上面写着：</p>

<blockquote>
  <p>丢失api-ms-win-crt-runtime-|1-1-0.dll</p>
</blockquote>

<p>既然知道了问题出自何方，那目标就很明确了，然后在网上找啊找的，答案倒是挺多的， 但是基本上都不靠谱。反正我是没能成功。</p>

<p>最后升级Windows，添加补丁包吧，奈何网速不给力，下了好久，最终不了了之。</p>



<h3 id=""后招"">后招</h3>

<p>既然下载最新的是不行了，那就退而求其次，下载之前较低版本的吧。反正是学习使用，也用不到多么复杂的功能，应该是足够的啦。</p>

<p>我这边尝试的是2.0.6版本的，亲测好用。为了更多人学习使用，可以到下面的链接处进行下载。（不要积分： <a href=""http://download.csdn.net/detail/marksinoberg/9703363"">http://download.csdn.net/detail/marksinoberg/9703363</a>  ）</p>

<p>下载后解压到一个文件夹即可。 <br>
<img src=""http://img.blog.csdn.net/20161206172332196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""下载后解压即可"" title=""""></p>

<blockquote>
  <p>我也是歪打正着，没想到这个版本的真的可以用啦</p>
</blockquote>



<h3 id=""配置"">配置</h3>

<p>如第二步所示，下载完后解压到一个文件夹下即可。然后新建一个文件夹用于存放数据库数据（这个文件夹随意放置，但是为了方便管理，还是放到一起比较好）。 <br>
<img src=""http://img.blog.csdn.net/20161206172443840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""新建一个文件夹存放数据"" title=""""></p>



<h4 id=""配置环境变量"">配置环境变量</h4>

<p>为了让命令行下可以找到mongodb的一些内置的命令，我们需要将bin目录配置到自己的电脑的环境变量中。</p>

<blockquote>
  <p>计算机–系统属性–高级系统设置–环境变量–path</p>
</blockquote>



<h4 id=""配置数据路径"">配置数据路径</h4>

<p>为了方便MongoDB找到数据位置，我们需要稍微的配置一下。用于临时开启mongodb数据库服务。如果有兴趣的话，也可以将其变为一个系统服务，这样也会更方便于使用。这里不过多叙述啦。</p>

<blockquote>
  <p>mongod –dbpath “数据文件夹路径”</p>
</blockquote>

<p>新版本的mongodb用MongoVUE打开的时候会显示不出collections。这是因为引擎的缘故。 <br>
可以使用这样的命令，启动mongodb服务。</p>

<blockquote>
  <p>mongod.exe –storageEngine mmapv1 –dbpath D:\Software\mongodb\db</p>
</blockquote>

<p>需要注意的是这个时候的db的路径应该是新的数据库文件夹路径。原因嘛，使用mmapv1引擎创建的当然和wiredTiger引擎创建的不能一致咯。</p>

<p>出现下图所示信息说明数据库路径配置成功。 <br>
<img src=""http://img.blog.csdn.net/20161206172510759?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""开启mongodb服务，便于客户端进行连接"" title=""""></p>

<h4 id=""查看信息"">查看信息</h4>

<p>为了更加清晰的开启mongodb神秘的面纱，可以利用浏览器查看详情。</p>

<blockquote>
  <p>mongo 127.0.0.1:27017/admin</p>
</blockquote>

<p><img src=""http://img.blog.csdn.net/20161206172545216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""27017端口 处查看"" title=""""></p>

<p>按照提示，下面尝试一下</p>

<blockquote>
  <p>mongo 127.0.0.1:28017/admin <br>
  <img src=""http://img.blog.csdn.net/20161206172606634?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""28017 端口处查看"" title=""""></p>
</blockquote>



<h2 id=""初次使用"">初次使用</h2>

<p>对于MongoDB，一开始还是要使用Shell的方式，这样可以为今后打下更为坚实的基础。下面大部分将以对比关系型数据库MySQL的方式进行，来进一步加深对于NoSQL的学习理解和使用。</p>



<h3 id=""登陆"">登陆</h3>

<p>类比关系型数据库MySQL的终端登录：</p>

<blockquote>
  <p>mysql -u root -p password</p>
</blockquote>

<p>Mongodb也是类似的，如下：</p>

<blockquote>
  <p>mongo 127.0.0.1:27017admin</p>
</blockquote>

<p>出现下图，说明你登陆成功了。（默认是没有密码的）。 <br>
<img src=""http://img.blog.csdn.net/20161206172638701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""Shell 登陆成功"" title=""""></p>



<h3 id=""显示数据库信息"">显示数据库信息</h3>

<p>类比MySQL，查看系统内拥有的数据库信息。</p>

<blockquote>
  <p>show databases; <br>
  mongodb也是类似，只不过命令名称不同罢了。 <br>
  show dbs;</p>
</blockquote>

<p>如下图： <br>
<img src=""http://img.blog.csdn.net/20161206172657775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""show dbs;"" title=""""></p>



<h3 id=""选择数据库"">选择数据库</h3>

<p>在MySQL中，要想使用一个指定的数据库，可以使用：</p>

<blockquote>
  <p>use DatabaseName;</p>
</blockquote>

<p>在MongoDB中，同样如此：</p>

<blockquote>
  <p>use foobar</p>
</blockquote>

<p>如下图： <br>
<img src=""http://img.blog.csdn.net/20161206172714749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""use databasename;"" title=""""></p>



<h3 id=""显示表文档信息"">显示表/文档信息</h3>

<p>在关系型数据库中，查看某一个数据库中有哪些表，可以使用：</p>

<blockquote>
  <p>show tables;</p>
</blockquote>

<p>在MongoDB这种非关系型数据库中，原理其实是差不多的。但是概念上来讲稍有出入。比如NoSQL中称表为文档（collection）。显示mongodb中文档的命令为：</p>

<blockquote>
  <p>show collections; <br>
  如下图： <br>
  <img src=""http://img.blog.csdn.net/20161206172731390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWFya3Npbm9iZXJn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""show collections;"" title=""""></p>
</blockquote>



<h3 id=""增删改查"">增删改查</h3>

<p>与MySQL这种关系型数据库有所不同的是，NoSQL中的增删改查命令都有特定的使用方式。而且都是基于“条件”来实现的，这一点跟SQL语句可没什么关系啦。</p>

<ul>
<li>find()</li>
<li>remove()</li>
<li>update()</li>
<li>insert()</li>
</ul>

<p>至于细节部分，此处暂且略过，接下来的博文中可能会进行详细的阐述。</p>



<h2 id=""客户端"">客户端</h2>

<p>熟悉了Shell方式操作mongodb，也就对命令的书写比较熟悉了。这个时候就可以使用客户端工具帮助我们进一步提升效率了。网上找到一篇针对于MongoDB的客户端的文章。 <br>
<a href=""http://blog.csdn.net/chszs/article/details/51348248"">http://blog.csdn.net/chszs/article/details/51348248</a></p>

<p>我这里要说的是，一个比较好用的客户端工具。MongoVUE。而且这里主要讲解一下如何破解这个工具，免得以后弹出窗口讨厌。</p>



<h3 id=""下载安装"">下载安装</h3>



<h3 id=""破解之路"">破解之路</h3>

<p>首先 Win+R键调出CMD命令行，输入regedit。找到下面图示的字段，删掉右边的1,2,3即可。（由于博主事先已破解，所以借用一下博友的破解图）。 <br>
<img src=""http://img.blog.csdn.net/20160215203639896?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"" alt=""破解图"" title=""""></p>

<p>这样就可以免费使用这个神器啦。</p>



<h2 id=""总结"">总结</h2>

<p>这篇文章就是大致的讲了讲NoSQL中的翘楚MongoDB的一些基础性的东西。没什么技巧而言，仅仅是搭建了一个环境。解决了自己遇到的一些奇奇怪怪的问题。</p></div>",数据库,2016-12-06 18:10
4654,晚上叫外卖，打开饿了么，发现推了一个版本，更新以后，点开了个鸡腿，哇，交互炫炸了。不过还是有槽点。我是无意中才发现可以左右滑动的。这。。。你不告诉我，我怎么知道左右可以滑。https://github...,wingichoy,http://blog.csdn.net/wingichoy/article/details/53501179,这交互炸了：饿了么是怎么让Image变成详情页的,"<div class=""markdown_views""><blockquote>
  <p>本文已授权微信公众号：鸿洋（hongyangAndroid）原创首发</p>
</blockquote>

<p>晚上叫外卖，打开饿了么，发现推了一个版本，更新以后，点开了个鸡腿，哇，交互炫炸了。</p>

<p>不过还是有槽点。我是无意中才发现可以左右滑动的。这。。。你不告诉我，我怎么知道左右可以滑。</p>

<p><a href=""https://github.com/githubwing/ZoomHeader"">https://github.com/githubwing/ZoomHeader</a></p>

<p>直接上图啊：</p>

<p><img src=""https://dn-mhke0kuv.qbox.me/23ab7109797b44f1060e.gif"" alt="""" title=""""></p>

<p>挺有意思的，对吧？ 所以我就想模仿一下。下面是我做出来的效果：</p>

<p><img src=""https://dn-mhke0kuv.qbox.me/27f3473d0d6b4c0e88de.gif"" alt="""" title=""""></p>

<p>额。。不过图片不是长条的哈。大概意思一样就行了。接下来将和大家分享这个效果是如何实现的。讲思路以及遇到的问题。但是不会讨论细节，具体的细节请看源码。</p>

<h3 id=""他是一个activity还是两个"">他是一个Activity还是两个？</h3>

<p>相信你肯定有这样的疑问，答案是一个。你看到的中间imageview是viewpager。在Viewpager上面是一个透明的View。当然，这个Activity的背景也是透明的。</p>



<h3 id=""实现思路"">实现思路</h3>

<p>我使用CoordinatorLayout+Behavior实现的。说实话，Behavior真心强大。。</p>



<h3 id=""viewpager头部"">viewpager+头部</h3>

<p>整个实现的思路是这样的。整体布局从上到下依次是：</p>

<ul>
<li>透明View</li>
<li>viewpager</li>
<li>RecyclerView</li>
</ul>

<p>其中透明View和Viewpager 合并成一个自定义的Header。当这个Header上移的时候，图片放大，并且RecyclerView联动上衣，从透明转向并且不透明。</p>

<p>所以首先要定制一个透明的可移动的HeaderView。</p>

<p>在onTouchEvent处理一下手势。。</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span> <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onTouchEvent</span>(MotionEvent ev) {
    <span class=""hljs-keyword"">switch</span> (ev.getAction()) {
      <span class=""hljs-keyword"">case</span> MotionEvent.ACTION_DOWN:
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">true</span>;
      <span class=""hljs-keyword"">case</span> MotionEvent.ACTION_MOVE:
         <span class=""hljs-keyword"">if</span>(上下移动到阀值){
            展开为详情()
         }<span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span>(上下滑动到阀值，恢复viewpager){
         }<span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span>(下滑，则关闭Activity)</code></pre>

<p>将header分为三种状态：</p>

<ul>
<li>上移。则展开为详情页。</li>
<li>下移，则恢复为viewpager。</li>
<li>再下移，则finish Activity。</li>
</ul>

<p>在上移的过程中，遇到了一点小挑战，这里分享下：</p>

<p>上移的过程中，图片需要放大。但是在做的过程中，不能使用LayoutParams实现。这里就关系到一些动画的小细节。</p>

<p><strong>动画使用LayoutParams实现是一个禁忌。他会导致不停requestLayout，从而影响UI性能。</strong></p>

<p>所以这里我的一个解法就是，我放大图片，不是真正的改变ImageView大小，而是去Scale图片。即使看起来变大了，他的View真正大小也不会变。</p>

<p>所以，有一句话叫做<strong>真亦是假、假亦是真</strong> 真真假假，你又何必当真呢？动画效果只要遵循这句话，基本上都是可以实现的。你所看到的效果都是假的。都是障眼法。View变大不是真正的变大。View悬浮不是真正的悬浮(有可能是显隐)。就像变魔术一样。。其实很简单。</p>

<p>接下来又遇到问题了。图片放大了，文字如何对齐？ 文字的位置当然也不能真正改变。所以这里使用TranslationX实现。在图片放大的过程中，使用scale的系数，与两个端点值进行一个线性变化计算。主要文字对齐代码如下：</p>



<pre class=""prettyprint""><code class=""language-java hljs "">      bottom.offsetLeftAndRight(
            (<span class=""hljs-keyword"">int</span>) (target.getWidth() / <span class=""hljs-number"">2</span> - target.getWidth() * (<span class=""hljs-number"">1</span> + progress) / <span class=""hljs-number"">2</span>
                + MarginConfig.MARGIN_LEFT_RIGHT - bottom.getX()));
</code></pre>

<p>第二个点。就是在图片放大过程中，底部文字和按钮左右padding不能变。这也是我没有封装成一个拿来就用的View的原因(其实还是水平不够)。因为这些空间需要全部按照上方的方法进行动态计算。。所以也是比较坑爹的。。</p>



<h3 id=""viewpager"">ViewPager</h3>

<p>拿了网上一个画廊的效果。直接</p>



<pre class=""prettyprint""><code class=""language-java hljs "">    setPageTransformer(<span class=""hljs-keyword"">true</span>, <span class=""hljs-keyword"">new</span> ZoomOutPageTransformer());</code></pre>

<p>这里注意，需要改变一下view的绘制顺序，保证当前view是最后绘制处于最上层</p>



<pre class=""prettyprint""><code class=""language-java hljs "">/改变系统绘制顺序
  <span class=""hljs-annotation"">@Override</span> <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">getChildDrawingOrder</span>(<span class=""hljs-keyword"">int</span> childCount, <span class=""hljs-keyword"">int</span> i) {

    <span class=""hljs-keyword"">int</span> position = getCurrentItem();
    <span class=""hljs-keyword"">if</span>(position&lt;<span class=""hljs-number"">0</span>){
      <span class=""hljs-keyword"">return</span> i;
    }<span class=""hljs-keyword"">else</span>{
      <span class=""hljs-keyword"">if</span>(i == childCount - <span class=""hljs-number"">1</span>){<span class=""hljs-comment"">//这是最后一个需要刷新的item</span>
        <span class=""hljs-keyword"">if</span>(position&gt;i){
          position=i;
        }
        <span class=""hljs-keyword"">return</span> position;
      }
      <span class=""hljs-keyword"">if</span>(i == position){<span class=""hljs-comment"">//这是原本要在最后一个刷新的item</span>
        <span class=""hljs-keyword"">return</span> childCount - <span class=""hljs-number"">1</span>;
      }
    }
    <span class=""hljs-keyword"">return</span> i;
  }
}
</code></pre>



<h3 id=""recyclerview"">RecyclerView</h3>

<p>RecyclerView最开始是完全透明的。并且跟随HeaderView上移而上移，在上移的过程中渐渐显示出来。 需要监听RecyclerView滚动，当RecyclerView滚动到顶部的时候。告知Header，该恢复最初原样了。</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span>
  <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onNestedFling</span>(CoordinatorLayout coordinatorLayout, View child, View target,
      <span class=""hljs-keyword"">float</span> velocityX, <span class=""hljs-keyword"">float</span> velocityY, <span class=""hljs-keyword"">boolean</span> consumed) {

    <span class=""hljs-comment"">//向下Fling并且到顶部</span>
    <span class=""hljs-keyword"">if</span> (velocityY &lt; <span class=""hljs-number"">0</span> &amp;&amp; ((RecyclerView) target).getChildAt(<span class=""hljs-number"">0</span>).getY() == <span class=""hljs-number"">0</span>) {
      mDependency.restore(mDependency.getY());
    }
    <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">super</span>.onNestedFling(coordinatorLayout, child, target, velocityX, velocityY, consumed);
  }

  <span class=""hljs-annotation"">@Override</span>
  <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onNestedPreScroll</span>(CoordinatorLayout coordinatorLayout, View child, View target,
      <span class=""hljs-keyword"">int</span> dx, <span class=""hljs-keyword"">int</span> dy, <span class=""hljs-keyword"">int</span>[] consumed) {

    <span class=""hljs-comment"">//如果在顶部</span>
    <span class=""hljs-keyword"">if</span> (((RecyclerView) target).getChildAt(<span class=""hljs-number"">0</span>).getY() == <span class=""hljs-number"">0</span>) {
      <span class=""hljs-comment"">//向下滑动</span>
      <span class=""hljs-keyword"">if</span> (dy &lt; <span class=""hljs-number"">0</span>) {
        mDependency.setY(mDependency.getY() - dy);
        <span class=""hljs-comment"">//小于阀值</span>
        <span class=""hljs-keyword"">if</span> (mDependency.getY() &lt; <span class=""hljs-number"">500</span>) {
          mDependency.restore(mDependency.getY());
        }
      }
    }
    <span class=""hljs-keyword"">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);
  }
}</code></pre>



<h3 id=""behavior"">Behavior</h3>

<p>让header和RecyclerView关联起来的就是Behavior了。Behavior之前写过几篇介绍过了，这里就不再啰嗦。</p>

<p>denpendcy为HeaderView。并且监听RecyclerView的滑动。</p>

<p>具体的细节还是看源码吧~</p>

<p>如果你觉得还不错，欢迎Star <br>
<a href=""https://github.com/githubwing/ZoomHeader"">本项目地址</a></p>

<p>欢迎加入我的qq群: 425983695</p></div>",移动开发,2016-12-07 09:26
50747,任何一件事，如果你不投入时间和精力去驯养，就不可能产生真正的兴趣和热爱。多数时候我们是因为做得好而热爱，因热爱而做得更好。,foruok,http://blog.csdn.net/foruok/article/details/53500801,凭兴趣求职80%会失败，为什么,"<div class=""markdown_views""><p>最近在分答上收到了下面几个问题：</p>

<blockquote>
  <ul>
  <li>大学毕业不到两年，换了快十个工作了，总觉得工作不适合自己，总想辞职，怎么办？</li>
  <li>博士在读，但感觉对自己研究方向没兴趣，缺乏科研热情，该怎么办？</li>
  <li>毕业一年心态不好换了两份工作，现在很迷茫，找工作找不到合适喜欢的，我该如何调整自己的状态重新出发？</li>
  </ul>
  
  <p>注：分答中搜索安晓辉可找到我</p>
</blockquote>

<p>看来很多人都想做自己的喜欢的工作，会因为不喜欢当下在做的事情而焦虑，选择离职。那么，该怎么判定自己到底是喜欢当下的工作还是不喜欢？</p>



<h1 id=""所谓兴趣"">所谓兴趣</h1>

<p>听到一段旋律优美的音乐，会对小提琴发生兴趣；吃了别人做的板栗红烧肉，也想自己做做看；去摄影展看到美轮美奂的照片，就想马上买一部单反也到悬崖边上拍云卷云舒；路上见到踩着旱冰鞋刷街的人从身边呼啸而过，很可能心中一动打算明天就到广场练滑冰……</p>

<p>当我们的眼耳鼻舌身意等感受到了某件事情带给我们新奇、快乐，我们就很容易对其产生兴趣。这个阶段的兴趣，停留在感官阶段，处在“想要”层面，只看到美好的一面，甚至不自觉的放大美好的一面。</p>

<p>当你在感官上受到刺激，对一件事产生了兴趣，就可能会去做。而做的时候，事情的本质就会暴露出来——一件事情既有新奇好玩的一面也有滞涩艰难的一面，当你遇见了滞涩艰难的那一面，很可能就会产生“怎么会这样啊”、“一点儿也不好玩”之类的想法，就会有挫败感。当你不能从做这件事中获得新奇、快乐的体验，就会放弃，这个浅层的兴趣就失去了进一步发展的机会。</p>

<p>如果你在尝试之后真的感受到了快乐、愉悦（明显比不适感强烈），那你就愿意继续做下去，就愿意经常性的来做，这样，初期的感官兴趣就成了乐趣，就可以保持下来。比如你听歌，听了之后又去了解这首歌背后的故事，了解之后你会更愿意听；比如你吃到好吃的菜，会琢磨它是你怎么做出来的，你自己要是做出来了你会更高兴；比如你在影展看到令人惊叹的照片，会思考摄影者是怎么选景、构图，如果你体会的指引你拍出了更好的照片，你会寻找机会更多地看好的摄影作品……</p>

<p>某件事成了你的乐趣，你也愿意去做，就可能萌发把这件事做到出类拔萃的想法，如果你能够持续地、刻意地练习（参见《刻意练习》一书），就可能成为这方面的高手和行家。这个时候，你可能会觉得这件事是我一辈子想做的，我就要在这方面有所成就。于是，乐趣就转变成了志趣。</p>

<p>这就是兴趣的三个层次：（感官）兴趣、乐趣、志趣。</p>



<h1 id=""兴趣与离职"">兴趣与离职</h1>

<p>沿着兴趣往志趣这条路走，有两个明显的时期，可能让你对自己的兴趣产生怀疑</p>

<ol>
<li>从兴趣到乐趣之间的挫败期</li>
<li>从乐趣到志趣之间的停滞期</li>
</ol>

<p>很多想根据自己的兴趣找工作、实际上频繁换来换去的朋友，其实是在不断地经历挫败期。他们觉得工作应该与自己的兴趣结合起来，也遵循这点来找工作，但是一旦真的开始从事一种职业，就发现远不是自己想象的那么回事——今天这点让自己不舒服明天那个让自己难受后天又有东西让自己受挫，这和原来的想象之间的差距太大了，各种不适冲击着自己，就觉得眼下这工作不合适，就又对其他的工作发生了兴趣，萌生了“那个更好”、“那个更适合自己”之类的想法，就有了跳槽的冲动。</p>

<p>可是如果跳过去呢，其实干上一段时间，又会回到被不适感包围、怀疑自己不喜欢、准备再跳这样的路上了，于是就形成了下面的循环：</p>

<p><img src=""http://img.blog.csdn.net/20161207055312605?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZm9ydW9r/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt="""" title=""""></p>

<p>实际上，这些朋友不是不喜欢工作，而是不喜欢那个挫败的、狼狈的、不堪的自己。而他们喜欢另一个工作，对另一个感兴趣，又往往是因为还没开始，偏向臆想这份还没开始的工作的好处，一旦开始呢，就又进入做不好、不喜欢的死胡同里来了。</p>

<p>还有一部分朋友，在尝试时接受了感兴趣的工作中也存在各种各样的不适这种事实，愿意为了自己喜欢的事而接纳那些不那么喜欢的因素，度过了挫败期，在当下的岗位上干了一段时间，慢慢进入了停滞期。</p>

<p>当一个人进入停滞期，会发现自己在这段时间内进步缓慢，多努力一点还是少努力一点，都是那个样子，没什么差别。此时就会产生怀疑，就可能把自己的瓶颈期归因为正在做的事情不是自己的真爱，产生再去寻找喜欢的工作的想法。</p>

<p>但其实从事任何一种职业，都会经历快速成长期，进入看似停滞的高原期，高原期后面还可能有突破，就看你能不能找到新的增长点，持续努力，刻意练习，迎来质变。</p>

<p>下面是能力发展曲线图，说明了精力投入和能力成长的关系。</p>

<p><img src=""http://img.blog.csdn.net/20161207055336309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZm9ydW9r/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt="""" title=""""></p>



<h1 id=""破解兴趣与工作的迷局"">破解兴趣与工作的迷局</h1>

<p>下面是日本经营之圣稻盛和夫突破自己讨厌的工作走向成功的经历，也许能给我们一些启发。</p>

<blockquote>
  <p>稻盛和夫大学毕业后找不到工作，后来托关系进了一家濒临倒闭的陶瓷厂（松风工业）。松风工业经营惨淡，员工工资都发不下来，旁边小卖部的老板都说在这里上班老婆都找不到。稻盛和夫对瓷器不感兴趣，又拿不到工资，吃穿用度都成问题非常苦闷，一度徘徊在黑社会堂口前，想要加入他们。</p>
  
  <p>过了没几个月，与稻盛和夫同时加入松风工业的几位同事先后离职，很快只剩他和另外一位同事。两人看看在松风工业陶待下去不是个事儿，就去参加自卫队干部候补生学校的考试，两人都通过了，只要从家里拿到户口簿就可以报道了。那位同事的家人很快寄来了户口簿，稻盛和夫写给家里的信却石沉大海——他哥哥非常恼火，认为“家里节衣缩食把你送进大学，多亏老师介绍才进了精度的公司，结果你不到半年就忍不住要辞职？真是一个忘恩负义的家伙。”，气愤之余据不寄送户口簿复印件。</p>
  
  <p>后来只剩稻盛和夫一个人继续留在破败的松风工业。此时他已经无法选择，只好从自己身上开刀了。他不再抱怨工作和没有工资，决心要先埋头工作，于是铺盖卷一卷，锅碗瓢盆都搬进实验室，睡在那里，昼夜不分，极度认真的投入工作。</p>
  
  <p>后来稻盛和夫接受了一项新任务，研究开发一种叫作“镁橄榄石”的新材料，这是一种新型陶瓷，绝缘性超好，特别适合于高频电流。但这种材料极难合成成型，因为没有合适的粘性材料。当时全世界只有通用电气（GE）一家成功合成“镁橄榄石”。</p>
  
  <p>稻盛和夫在像样的实验设备都没有的境况下日以继夜的工作，反复试验，结果却总是不理想。为了解决“粘性”的问题，稻盛和夫每天思考、试验，绞尽脑汁，百思不得其解，到了几乎痴狂的地步。有一天他在走进实验室时被某个容器绊了一下，差点跌倒，下意识一看脚下，鞋上沾了试验用的松香树脂。正当他要喊“谁把松香搁在这个地方！”时福至心灵，立即架起一个简单的锅，将陶瓷原料和松香放入锅中，一边加热一边混合……</p>
  
  <p>后来，成功了！令人头痛的难题就这样解决了，稻盛和夫称那一瞬间为“神的启示”。</p>
  
  <p>稻盛和夫后来创立“京瓷”，上市，成为世界五百强企业。再后来又创立KDDI，再度成为世界500强。稻盛和夫也成了唯一一位创立两家世界五百强公司的人。再后来78岁时出任日本航空公司懂事长兼首席执行官，把日本航空公司重新带回世界500强。</p>
</blockquote>

<p><strong>任何一件事，如果你不投入时间和精力去驯养，就不可能产生真正的兴趣和热爱。多数时候我们是因为做得好而热爱，因热爱而做得更好。</strong>这才是事实的真相。</p>

<p><img src=""http://img.blog.csdn.net/20161207055409778?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZm9ydW9r/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt="""" title=""""></p>

<p>回头来看，其实兴趣对于寻找工作来讲，起的是一个过滤器的作用，它帮我们筛选出一个想做的职业列表，而到底哪个是你的真爱，则需要实践之后才知道，需要做好之后才知道。</p>

<p>如果遇到一点挫折和艰难，遭受一点挫败就放弃，那很可能陷入“感兴趣–&gt;尝试–&gt;放弃–&gt;感兴趣……”这种恶性循环，最终什么也做不成。</p>

<p>假如你已经陷入了“感兴趣–&gt;尝试–&gt;放弃–&gt;感兴趣……”这样的循环，常常感到茫然和挫败，那不妨先停下来，打破换来换去的恶性循环，聚焦在当下的事情，努力做到出类拔萃。</p>

<p>很多时候我们不是对自己所从事的工作没兴趣，而是没把事情做好，不喜欢那个挫败的自己。如果你真的做好了一件事，就很可能会开始喜欢这件事——因为你喜欢自己投入的感情和努力，你喜欢自己有价值的样子。</p>

<p>当你做好，当你取得令人高兴的成长，当你做到出类拔萃，你的经历、眼界、思维，都会发生变化，那时的体会，和现在四处辗转寻求喜欢的工作而不得的感受，天差地别。</p>

<p>所以，从现在开始，精进吧，成为一个很厉害的人。</p>



<h1 id=""如何精进"">如何精进</h1>

<p>有一本畅销书叫作《异类》，讲述了一万小时天才理论，大意是说，在大多数领域，持续做上一万小时，就可以成为高手。</p>

<p>有另外一本书，叫作《刻意练习》，它讲，只有你聚焦到某个方向，不断设定有挑战的目标，刻意地练习，反复的修正和改善，才能在持续投入大量的时间后成为高手。</p>

<p>这两本书和我们说的兴趣结合起来，为我们指明了精进的道路：</p>

<ul>
<li>选择一个你感兴趣的方向</li>
<li>刻意练习</li>
<li>持续投入时间和精力</li>
</ul>

<p>所谓刻意练习，简单说就是“3F”，即：</p>

<ul>
<li>Focus</li>
<li>Feedback</li>
<li>Fix it</li>
</ul>

<p>Focus，指专注地做事，所谓专注，就是方向明确，聚焦当下，心无旁骛，积极努力。</p>

<p>Feedback，指反馈。我们在练习时，需要有高人陪伴，需要找到教练，能够及时给予我们准确的反馈，让我们知道差距。</p>

<p>Fix it，指修正，改善。当我们获得了反馈后，要根据反馈来改善自己的做法，这样才能进步。</p>

<p>如果我们在努力的过程中能够做到“3F”原则，持续一定时间后，就能成为高手。</p>

<blockquote>
  <ul>
  <li><a href=""http://edu.csdn.net/huiyiCourse/detail/274"">2月15日直播：程序员简历优化指南</a></li>
  </ul>
</blockquote>

<hr>

<p>相关阅读：</p>

<ul>
<li><a href=""http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651479&amp;idx=1&amp;sn=ea4f5915258e9b5b3de71db6d1f627f6&amp;chksm=83a80360b4df8a767d95f165b5be3652146b4e68b1a2d35c3b33fa77e48f1de3e338a9ff3efe&amp;scene=21#wechat_redirect"">你的生命有什么可能</a></li>
<li><a href=""http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651439&amp;idx=1&amp;sn=ca2a3f8addba935bd7ff158f7f4427ca&amp;chksm=83a80318b4df8a0e48decd8742a1c105446d23138d16dd1574f13aa5bec6ccc0f75a3e9668dc&amp;scene=21#wechat_redirect"">精进：如何成为一个厉害的人</a></li>
<li><a href=""http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651406&amp;idx=1&amp;sn=8e11dd7b698beb412afda37b365e81fd&amp;chksm=83a80339b4df8a2f121842374f000a5ee159976c64488ecb7fca0b2c8b68fc2ecab1f937e588&amp;scene=21#wechat_redirect"">高效能人士的7个习惯</a></li>
<li><a href=""http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651494&amp;idx=1&amp;sn=01e15f28f03380078ac4e04bef6eb24b&amp;chksm=83a80351b4df8a47c80f6c8425b1907cd338ad37cdfd641068550f92a9e61953865db21795a5&amp;scene=21#wechat_redirect"">小强升职记</a></li>
</ul>

<p><img src=""http://img.blog.csdn.net/20150518172252230"" alt="""" title=""""></p></div>","综合,漫谈程序员",2016-12-07 09:27
2742,"在开发中，经常会遇到实时统计文本框或文本域中输入字符的个数，超过规定位数后禁止再输入。

    
    剩余输入字符个数:140
// 字符输入区域
var content = document....",ligang2585116,http://blog.csdn.net/ligang2585116/article/details/53490869,统计字数oninput？keyup？onchange？,"<div class=""markdown_views""><blockquote>
  <p>在开发中，经常会遇到实时统计文本框或文本域中输入字符的个数，超过规定位数后禁止再输入。</p>
</blockquote>

<p><img src=""http://img.blog.csdn.net/20161206182715814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlnYW5nMjU4NTExNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""输入字符限制"" title=""""></p>

<pre class=""prettyprint""><code class="" hljs xml""><span class=""hljs-tag"">&lt;<span class=""hljs-title"">div</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">textarea</span> <span class=""hljs-attribute"">name</span>=<span class=""hljs-value"">""content""</span> <span class=""hljs-attribute"">id</span>=<span class=""hljs-value"">""content""</span> <span class=""hljs-attribute"">cols</span>=<span class=""hljs-value"">""30""</span> <span class=""hljs-attribute"">rows</span>=<span class=""hljs-value"">""10""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-title"">textarea</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">p</span>&gt;</span>剩余输入字符个数:<span class=""hljs-tag"">&lt;<span class=""hljs-title"">span</span>&gt;</span>140<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">span</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-title"">p</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">div</span>&gt;</span></code></pre>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-comment"">// 字符输入区域</span>
<span class=""hljs-keyword"">var</span> content = document.querySelector(<span class=""hljs-string"">""#content""</span>);
<span class=""hljs-comment"">// 统计剩余字符数</span>
<span class=""hljs-keyword"">var</span> words = document.querySelector(<span class=""hljs-string"">""p span""</span>);</code></pre>

<p>首先我们可能想到onchange事件。</p>



<h3 id=""一onchange事件"">一、onchange事件</h3>

<p>当元素的值发生改变时，会触发change事件。该事件仅适用于<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>和<code>&lt;textarea&gt;</code> 元素。当用于<code>&lt;select&gt;</code>元素时，change 事件会在选择某个选项时发生。当用于<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>时，该事件会在元素失去焦点时发生。</p>



<pre class=""prettyprint""><code class="" hljs javascript"">content.addEventListener(<span class=""hljs-string"">""change""</span>, <span class=""hljs-function""><span class=""hljs-keyword"">function</span><span class=""hljs-params"">(e)</span>{</span>
    <span class=""hljs-keyword"">var</span> numbers = <span class=""hljs-keyword"">this</span>.value.length;
    <span class=""hljs-keyword"">if</span>(numbers &gt;= <span class=""hljs-number"">140</span>){
        e.preventDefault();
    }
    words.innerHTML = <span class=""hljs-number"">140</span> - numbers;
});</code></pre>

<p><strong>结果</strong>：并不是我们想要的，因为只有失去焦点时，才能触发该事件！</p>



<h3 id=""二keypresskeydownkeyup事件"">二、keypress、keydown、keyup事件</h3>

<p>用户按下键盘上的字符键（释放键盘上的键）时触发，任何可以获得焦点的元素都可以触发keypress事件，且按下任何能够影响文本显示的键时就会触发（例如回车键）。</p>



<pre class=""prettyprint""><code class="" hljs javascript"">content.addEventListener(<span class=""hljs-string"">""keypress/keydown/keyup""</span>, <span class=""hljs-function""><span class=""hljs-keyword"">function</span><span class=""hljs-params"">(e)</span>{</span>
    console.log(<span class=""hljs-string"">""被触发了!!!""</span>);
    <span class=""hljs-keyword"">var</span> numbers = <span class=""hljs-keyword"">this</span>.value.length;
    <span class=""hljs-keyword"">if</span>(numbers &gt;= <span class=""hljs-number"">140</span>){
        e.preventDefault();
    }
    words.innerHTML = <span class=""hljs-number"">140</span> - numbers;
});</code></pre>

<p><strong>说明</strong>：在chrome51下测试结果</p>

<ul>
<li>按住某一字符键不放时，“keydown”会被重复触发，而“keypress”并不会触发；</li>
<li>esc、删除键、ctrl、shift等只会触发“keydown”事件，而“keypress”并不会触发；</li>
<li>回车会同时触发“keydown”和“keypress”事件；</li>
</ul>

<table>
<thead>
<tr>
  <th align=""left"">方法</th>
  <th align=""left"">字数统计准确性</th>
  <th align=""left"">是否可以控制个数</th>
  <th>是否限制粘贴情况</th>
</tr>
</thead>
<tbody><tr>
  <td align=""left"">keydown</td>
  <td align=""left"">不准确</td>
  <td align=""left"">可以</td>
  <td>不完全可以</td>
</tr>
<tr>
  <td align=""left"">keypress</td>
  <td align=""left"">不准确</td>
  <td align=""left"">可以</td>
  <td>不可以（不触发）</td>
</tr>
<tr>
  <td align=""left"">keyup</td>
  <td align=""left"">准确</td>
  <td align=""left"">不可以</td>
  <td>不可以</td>
</tr>
</tbody></table>


<p><strong>问题</strong>： <br>
（1）keypress和keydown是在键盘按下时触发，此时<code>var numbers = this.value.length;</code>长度为0，所以会导致统计时差一个字符。 <br>
（2）粘贴情况下，keydown一次性超过指定位数（140）无法控制，keypress不会被触发；而keyup已后知后觉！！</p>

<h3 id=""三oninput事件"">三、oninput事件</h3>

<p>oninput是HTML5的标准事件，对于检测<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>元素通过用户界面发生的内容变化非常有用，在内容修改后立即被触发。</p>

<blockquote>
  <p>The change event is fired for <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements when a change to the element’s value is committed by the user. Unlike the input event, the change event is not necessarily fired for each change to an element’s value.</p>
</blockquote>

<p><strong><em>即oninput实时触发，onchange事件需要失去焦点才触发！！！</em></strong></p>

<pre class=""prettyprint""><code class="" hljs cs"">content.addEventListener(<span class=""hljs-string"">""input""</span>, function(e){
    <span class=""hljs-keyword"">var</span> numbers = <span class=""hljs-keyword"">this</span>.<span class=""hljs-keyword"">value</span>.length;
    <span class=""hljs-keyword"">if</span>(numbers &gt;= <span class=""hljs-number"">140</span>){
        <span class=""hljs-comment"">// e.preventDefault();</span>
        <span class=""hljs-keyword"">this</span>.<span class=""hljs-keyword"">value</span> = <span class=""hljs-keyword"">this</span>.<span class=""hljs-keyword"">value</span>.slice(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">140</span>);
    }
    words.innerHTML = <span class=""hljs-number"">140</span> - numbers &lt; <span class=""hljs-number"">0</span> ? <span class=""hljs-number"">0</span> : <span class=""hljs-number"">140</span> - numbers;
});</code></pre>

<p><code>e.preventDefault()</code>不能取消input的行为，因为其<code>e.cancelable</code>为false，只有true的情况下才可以取消行为。</p>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">bool</span> = <span class=""hljs-keyword"">event</span>.cancelable</code></pre>

<blockquote>
  <p>The result is a Boolean, which is true if the event can be canceled. bool contains true or false, depending on whether the event can have its default action prevented.</p>
</blockquote>

<p><strong>注意</strong>：IE下使用onpropertychange代替onchange。</p>



<pre class=""prettyprint""><code class="" hljs javascript"">$(<span class=""hljs-string"">'textarea'</span>).bind(<span class=""hljs-string"">'input propertychange'</span>, <span class=""hljs-function""><span class=""hljs-keyword"">function</span><span class=""hljs-params"">()</span> {</span>}</code></pre>



<h3 id=""四textinput事件"">四、textInput事件</h3>

<p>只有可编辑区域才有该事件，用户按下能够输入实际字符的键时才会被触发（例如退格键不会触发）。在文本插入文本框之前触发，通常用于过滤敏感词。</p>



<pre class=""prettyprint""><code class="" hljs javascript"">content.addEventListener(<span class=""hljs-string"">""textInput""</span>, <span class=""hljs-function""><span class=""hljs-keyword"">function</span><span class=""hljs-params"">(e)</span>{</span>
    <span class=""hljs-keyword"">var</span> numbers = <span class=""hljs-keyword"">this</span>.value.length;
    <span class=""hljs-keyword"">if</span>(numbers &gt;= <span class=""hljs-number"">140</span>){
        e.preventDefault();
    }
    words.innerHTML = <span class=""hljs-number"">140</span> - numbers &lt; <span class=""hljs-number"">0</span> ? <span class=""hljs-number"">0</span> : <span class=""hljs-number"">140</span> - numbers;
}, <span class=""hljs-literal"">false</span>);</code></pre>

<p>对粘贴控制不是很好！但textInput事件对于过滤敏感词汇很有作用！</p>



<pre class=""prettyprint""><code class="" hljs cs"">content.addEventListener(<span class=""hljs-string"">""textInput""</span>, function(<span class=""hljs-keyword"">event</span>){
    <span class=""hljs-comment"">// event.data的值是用户输入的字符</span>
    console.log(<span class=""hljs-keyword"">event</span>.data);
    <span class=""hljs-keyword"">var</span> sensitiveWordAry = [<span class=""hljs-string"">""李""</span>, <span class=""hljs-string"">""刚""</span>];
    <span class=""hljs-keyword"">if</span>(sensitiveWordAry.indexOf(<span class=""hljs-keyword"">event</span>.data) &gt;= <span class=""hljs-number"">0</span>){
        <span class=""hljs-comment"">// 输入的字符存在于敏感数组中，则禁止输入</span>
        <span class=""hljs-keyword"">event</span>.preventDefault();
    }
});</code></pre>

<p>关于事件，请查看：<a href=""http://blog.csdn.net/ligang2585116/article/details/52028989"">事件</a></p></div>",前端,2016-12-07 09:31
3454,ROS和Android配合使用非常有趣，这里推荐，ROSClinet，使用rosbridge让android和ROS通信：具体参考奥斯卡的个人剧场：http://xxhong.net/turtlebo...,ZhangRelay,http://blog.csdn.net/zhangrelay/article/details/53495641,ROS(indigo) turtlebot2 + android一些有趣应用,,"综合,ROS indigo 学习笔记",2016-12-07 09:59
3230,"同http://blog.csdn.net/chuhang_zhqr/article/details/51179881类似，采用 
 
这两个经典的图片进行测试。关于BM和SGBM以及VAR的参数设置...",chuhang_zhqr,http://blog.csdn.net/chuhang_zhqr/article/details/53495030,基于Opencv的几种立体匹配算法+ELAS,"<div class=""markdown_views""><p>同<a href=""http://blog.csdn.net/chuhang_zhqr/article/details/51179881"">http://blog.csdn.net/chuhang_zhqr/article/details/51179881</a>类似，采用 <br>
<img src=""http://img.blog.csdn.net/20160418150942312"" alt=""这里写图片描述"" title=""""></p>

<p><img src=""http://img.blog.csdn.net/20160418150957200"" alt=""这里写图片描述"" title=""""> <br>
这两个经典的图片进行测试。</p>

<p>关于BM和SGBM以及VAR的参数设置请参考 <br>
<a href=""http://blog.csdn.net/chenyusiyuan/article/details/5967291"">晨宇思远</a></p>

<p>本文代码基于opencv2.4.9 <br>
本文源码地址在我的CSDN代码资源： <br>
<a href=""http://download.csdn.net/detail/chuhang_zhqr/9703763"">http://download.csdn.net/detail/chuhang_zhqr/9703763</a></p>

<p><strong>0：ELAS</strong> <br>
这里要去下载Elas的开源库函数。</p>

<pre class=""prettyprint""><code class="" hljs autohotkey""><span class=""hljs-label"">int StereoMatch::</span>ElasMatch()
{
<span class=""hljs-label"">    cv::</span>Mat disp_l,disp_r,disp8u_l,disp8u_r<span class=""hljs-comment"">;</span>
    double minVal<span class=""hljs-comment"">; double maxVal; //视差图的极值</span>

<span class=""hljs-label"">    cv::Mat leftImage = cv::</span>imread(<span class=""hljs-string"">""../test_images/leftr31.png""</span>,<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::Mat rightImage = cv::</span>imread(<span class=""hljs-string"">""../test_images/rightr31.png""</span>,<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>

    // 计算视差
    // generate disparity image using LIBELAS
    int bd = <span class=""hljs-number"">0</span><span class=""hljs-comment"">;</span>
    const int32_t dims[<span class=""hljs-number"">3</span>] = {leftImage.cols,leftImage.rows,leftImage.cols}<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::Mat leftdpf = cv::Mat::zeros(cv::</span>Size(leftImage.cols,leftImage.rows), CV_32F)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::Mat rightdpf = cv::Mat::zeros(cv::</span>Size(leftImage.cols,leftImage.rows), CV_32F)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    Elas::</span>parameters param<span class=""hljs-comment"">;</span>
    param.postprocess_only_left = <span class=""hljs-literal"">false</span><span class=""hljs-comment"">;</span>
    Elas elas(param)<span class=""hljs-comment"">;</span>
    elas.process(leftImage.data,rightImage.data,leftdpf.ptr&lt;float&gt;(<span class=""hljs-number"">0</span>),rightdpf.ptr&lt;float&gt;(<span class=""hljs-number"">0</span>),dims)<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::Mat(leftdpf(cv::</span>Rect(bd,<span class=""hljs-number"">0</span>,leftImage.cols,leftImage.rows))).copyTo(disp_l)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::Mat(rightdpf(cv::</span>Rect(bd,<span class=""hljs-number"">0</span>,rightImage.cols,rightImage.rows))).copyTo(disp_r)<span class=""hljs-comment"">;</span>

    //-- Check its extreme values
<span class=""hljs-label"">    cv::</span>minMaxLoc( disp_l, &amp;minVal, &amp;maxVal )<span class=""hljs-comment"">;</span>
    cout&lt;&lt;<span class=""hljs-string"">""Min disp: Max value""</span>&lt;&lt; minVal&lt;&lt;maxVal<span class=""hljs-comment"">; //numberOfDisparities.= (maxVal - minVal)</span>

    //-- Display it as <span class=""hljs-literal"">a</span> CV_8UC1 image
    disp_l.convertTo(disp8u_l, CV_8U, <span class=""hljs-number"">255</span>/(maxVal - minVal))<span class=""hljs-comment"">;//(numberOfDisparities*16.)</span>

<span class=""hljs-label"">    cv::</span>minMaxLoc( disp_r, &amp;minVal, &amp;maxVal )<span class=""hljs-comment"">;</span>
    cout&lt;&lt;<span class=""hljs-string"">""Min disp: Max value""</span>&lt;&lt; minVal&lt;&lt;maxVal<span class=""hljs-comment"">; //numberOfDisparities.= (maxVal - minVal)</span>

    //-- Display it as <span class=""hljs-literal"">a</span> CV_8UC1 image
    disp_r.convertTo(disp8u_r, CV_8U, <span class=""hljs-number"">255</span>/(maxVal - minVal))<span class=""hljs-comment"">;//(numberOfDisparities*16.)</span>

<span class=""hljs-label"">    cv::</span>normalize(disp8u_l, disp8u_l, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">255</span>, CV_MINMAX, CV_8UC1)<span class=""hljs-comment"">;    // obtain normalized image</span>
<span class=""hljs-label"">    cv::</span>normalize(disp8u_r, disp8u_r, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">255</span>, CV_MINMAX, CV_8UC1)<span class=""hljs-comment"">;    // obtain normalized image</span>

<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Left""</span>,leftImage)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Right""</span>,rightImage)<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Elas_left""</span>,disp8u_l)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Elas_right""</span>,disp8u_r)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imwrite(<span class=""hljs-string"">""Elas_left.png""</span>,disp8u_l)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imwrite(<span class=""hljs-string"">""Elas_right.png""</span>,disp8u_r)<span class=""hljs-comment"">;</span>

    cout&lt;&lt;endl&lt;&lt;<span class=""hljs-string"">""Over""</span>&lt;&lt;endl<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>waitKey(<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>

    <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">0</span><span class=""hljs-comment"">;</span>
}
</code></pre>

<p><strong>1：BM算法</strong></p>

<pre class=""prettyprint""><code class="" hljs lasso"">int StereoMatch<span class=""hljs-tag"">::BMMatching</span>()
{
    cv<span class=""hljs-tag"">::Mat</span> disp,disp8u;
    double minVal; double maxVal; <span class=""hljs-comment"">//视差图的极值</span>

    cv<span class=""hljs-tag"">::Mat</span> leftImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/leftr.png""</span>,<span class=""hljs-number"">0</span>);
    cv<span class=""hljs-tag"">::Mat</span> rightImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/rightr.png""</span>,<span class=""hljs-number"">0</span>);

    int SADWindowSize <span class=""hljs-subst"">=</span> <span class=""hljs-number"">19</span>;
    int numberOfDisparities <span class=""hljs-subst"">=</span><span class=""hljs-number"">16</span><span class=""hljs-subst"">*</span><span class=""hljs-number"">3</span>; <span class=""hljs-comment"">/**&lt; Range of disparity */</span>
    numberOfDisparities <span class=""hljs-subst"">=</span> numberOfDisparities <span class=""hljs-subst"">&gt;</span> <span class=""hljs-number"">0</span> <span class=""hljs-subst"">?</span> numberOfDisparities : ((leftImage<span class=""hljs-built_in"">.</span>cols/<span class=""hljs-number"">8</span>) <span class=""hljs-subst"">+</span> <span class=""hljs-number"">15</span>) <span class=""hljs-subst"">&amp;</span> <span class=""hljs-subst"">-</span><span class=""hljs-number"">16</span>;

    <span class=""hljs-comment"">//bm.state-&gt;roi1 = remapMat.Calib_Roi_L;//左右视图的有效像素区域，一般由双目校正阶段的 cvStereoRectify 函数传递，也可以自行设定。</span>
    <span class=""hljs-comment"">//bm.state-&gt;roi2 = remapMat.Calib_Roi_R;//一旦在状态参数中设定了 roi1 和 roi2，OpenCV 会通过cvGetValidDisparityROI 函数计算出视差图的有效区域，在有效区域外的视差值将被清零。</span>
    <span class=""hljs-comment"">//bm.State-&gt;preFilterSize=41;//预处理滤波器窗口大小,5-21,odd</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>preFilterCap <span class=""hljs-subst"">=</span> <span class=""hljs-number"">31</span>; <span class=""hljs-comment"">//63,1-31//预处理滤波器的截断值，预处理的输出值仅保留[-preFilterCap, preFilterCap]范围内的值,</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>SADWindowSize <span class=""hljs-subst"">=</span> SADWindowSize <span class=""hljs-subst"">&gt;</span> <span class=""hljs-number"">0</span> <span class=""hljs-subst"">?</span> SADWindowSize : <span class=""hljs-number"">9</span>; <span class=""hljs-comment"">//SAD窗口大小5-21</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>minDisparity <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0</span>; <span class=""hljs-comment"">//64 最小视差，默认值为 0</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>numberOfDisparities <span class=""hljs-subst"">=</span> numberOfDisparities; <span class=""hljs-comment"">//128视差窗口，即最大视差值与最小视差值之差, 窗口大小必须是 16 的整数倍</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>textureThreshold <span class=""hljs-subst"">=</span> <span class=""hljs-number"">10</span>;<span class=""hljs-comment"">//低纹理区域的判断阈值。如果当前SAD窗口内所有邻居像素点的x导数绝对值之和小于指定阈值，则该窗口对应的像素点的视差值为 0</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>uniquenessRatio <span class=""hljs-subst"">=</span> <span class=""hljs-number"">15</span>;<span class=""hljs-comment"">//5-15 视差唯一性百分比， 视差窗口范围内最低代价是次低代价的(1 + uniquenessRatio/100)倍时，最低代价对应的视差值才是该像素点的视差，否则该像素点的视差为 0</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>speckleWindowSize <span class=""hljs-subst"">=</span> <span class=""hljs-number"">100</span>;<span class=""hljs-comment"">//检查视差连通区域变化度的窗口大小, 值为 0 时取消 speckle 检查</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>speckleRange <span class=""hljs-subst"">=</span> <span class=""hljs-number"">32</span>;<span class=""hljs-comment"">//视差变化阈值，当窗口内视差变化大于阈值时，该窗口内的视差清零</span>
    bm<span class=""hljs-built_in"">.</span>state<span class=""hljs-subst"">-&gt;</span>disp12MaxDiff <span class=""hljs-subst"">=</span> <span class=""hljs-number"">1</span>;<span class=""hljs-comment"">//左视差图（直接计算得出）和右视差图（通过cvValidateDisparity计算得出）之间的最大容许差异。超过该阈值的视差值将被清零。该参数默认为 -1，即不执行左右视差检查。</span>
                                                      <span class=""hljs-comment"">//注意在程序调试阶段最好保持该值为 -1，以便查看不同视差窗口生成的视差效果。</span>

    <span class=""hljs-comment"">// 计算视差</span>
    bm(leftImage, rightImage, disp);

    <span class=""hljs-comment"">//-- Check its extreme values</span>
    cv<span class=""hljs-tag"">::minMaxLoc</span>( disp, <span class=""hljs-subst"">&amp;</span>minVal, <span class=""hljs-subst"">&amp;</span>maxVal );
    cout<span class=""hljs-subst"">&lt;&lt;</span><span class=""hljs-string"">""Min disp: Max value""</span><span class=""hljs-subst"">&lt;&lt;</span> minVal<span class=""hljs-subst"">&lt;&lt;</span>maxVal; <span class=""hljs-comment"">//numberOfDisparities.= (maxVal - minVal)</span>

    <span class=""hljs-comment"">//-- 4. Display it as a CV_8UC1 image</span>
    disp<span class=""hljs-built_in"">.</span>convertTo(disp8u, CV_8U, <span class=""hljs-number"">255</span><span class=""hljs-subst"">/</span>(maxVal <span class=""hljs-subst"">-</span> minVal));<span class=""hljs-comment"">//(numberOfDisparities*16.)</span>
    cv<span class=""hljs-tag"">::normalize</span>(disp8u, disp8u, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">255</span>, CV_MINMAX, CV_8UC1);    <span class=""hljs-comment"">// obtain normalized image</span>

    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""left""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""right""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""Disp""</span>,disp8u);
    cv<span class=""hljs-tag"">::imwrite</span>(<span class=""hljs-string"">""bm.png""</span>,disp8u);
    cv<span class=""hljs-tag"">::waitKey</span>(<span class=""hljs-number"">0</span>);

}
</code></pre>

<p><img src=""http://img.blog.csdn.net/20161206221551978?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h1aGFuZ196aHFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""这里写图片描述"" title=""""></p>

<p><strong>2：SGBM</strong></p>

<pre class=""prettyprint""><code class="" hljs lasso"">int StereoMatch<span class=""hljs-tag"">::SGBMMatching</span>()
{
    cv<span class=""hljs-tag"">::Mat</span> disp,disp8u;
    double minVal; double maxVal; <span class=""hljs-comment"">//视差图的极值</span>

    cv<span class=""hljs-tag"">::Mat</span> leftImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/leftr.png""</span>,<span class=""hljs-number"">0</span>);
    cv<span class=""hljs-tag"">::Mat</span> rightImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/rightr.png""</span>,<span class=""hljs-number"">0</span>);

    int numberOfDisparities <span class=""hljs-subst"">=</span><span class=""hljs-number"">16</span><span class=""hljs-subst"">*</span><span class=""hljs-number"">2</span>; <span class=""hljs-comment"">/**&lt; Range of disparity */</span>
    numberOfDisparities <span class=""hljs-subst"">=</span> numberOfDisparities <span class=""hljs-subst"">&gt;</span> <span class=""hljs-number"">0</span> <span class=""hljs-subst"">?</span> numberOfDisparities : ((leftImage<span class=""hljs-built_in"">.</span>cols/<span class=""hljs-number"">8</span>) <span class=""hljs-subst"">+</span> <span class=""hljs-number"">15</span>) <span class=""hljs-subst"">&amp;</span> <span class=""hljs-subst"">-</span><span class=""hljs-number"">16</span>;

    int SADWindowSize <span class=""hljs-subst"">=</span> <span class=""hljs-number"">11</span>;
    sgbm<span class=""hljs-built_in"">.</span>preFilterCap <span class=""hljs-subst"">=</span> <span class=""hljs-number"">63</span>;
    sgbm<span class=""hljs-built_in"">.</span>SADWindowSize <span class=""hljs-subst"">=</span> SADWindowSize <span class=""hljs-subst"">&gt;</span> <span class=""hljs-number"">0</span> <span class=""hljs-subst"">?</span> SADWindowSize : <span class=""hljs-number"">3</span>; <span class=""hljs-comment"">//3-11</span>

    int <span class=""hljs-literal"">cn</span> <span class=""hljs-subst"">=</span> leftImage<span class=""hljs-built_in"">.</span>channels();

    sgbm<span class=""hljs-built_in"">.</span>P1 <span class=""hljs-subst"">=</span> <span class=""hljs-number"">8</span><span class=""hljs-subst"">*</span><span class=""hljs-literal"">cn</span><span class=""hljs-subst"">*</span>sgbm<span class=""hljs-built_in"">.</span>SADWindowSize<span class=""hljs-subst"">*</span>sgbm<span class=""hljs-built_in"">.</span>SADWindowSize;<span class=""hljs-comment"">//P1、P2的值越大，视差越平滑。P2&gt;P1，可取（50，800）或者（40，2500）</span>
    sgbm<span class=""hljs-built_in"">.</span>P2 <span class=""hljs-subst"">=</span> <span class=""hljs-number"">32</span><span class=""hljs-subst"">*</span><span class=""hljs-literal"">cn</span><span class=""hljs-subst"">*</span>sgbm<span class=""hljs-built_in"">.</span>SADWindowSize<span class=""hljs-subst"">*</span>sgbm<span class=""hljs-built_in"">.</span>SADWindowSize;
    sgbm<span class=""hljs-built_in"">.</span>minDisparity <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0</span>;
    sgbm<span class=""hljs-built_in"">.</span>numberOfDisparities <span class=""hljs-subst"">=</span> numberOfDisparities; <span class=""hljs-comment"">//128,256</span>
    sgbm<span class=""hljs-built_in"">.</span>uniquenessRatio <span class=""hljs-subst"">=</span> <span class=""hljs-number"">10</span>;    <span class=""hljs-comment"">//10,0</span>
    sgbm<span class=""hljs-built_in"">.</span>speckleWindowSize <span class=""hljs-subst"">=</span> <span class=""hljs-number"">100</span>; <span class=""hljs-comment"">//200</span>
    sgbm<span class=""hljs-built_in"">.</span>speckleRange <span class=""hljs-subst"">=</span> <span class=""hljs-number"">32</span>;
    sgbm<span class=""hljs-built_in"">.</span>disp12MaxDiff <span class=""hljs-subst"">=</span> <span class=""hljs-number"">1</span>;
    sgbm<span class=""hljs-built_in"">.</span>fullDP <span class=""hljs-subst"">=</span> <span class=""hljs-number"">1</span>;

    <span class=""hljs-comment"">// 计算视差</span>
    sgbm(leftImage, rightImage, disp);

    <span class=""hljs-comment"">//-- Check its extreme values</span>
    cv<span class=""hljs-tag"">::minMaxLoc</span>( disp, <span class=""hljs-subst"">&amp;</span>minVal, <span class=""hljs-subst"">&amp;</span>maxVal );
    cout<span class=""hljs-subst"">&lt;&lt;</span><span class=""hljs-string"">""Min disp: Max value""</span><span class=""hljs-subst"">&lt;&lt;</span> minVal<span class=""hljs-subst"">&lt;&lt;</span>maxVal; <span class=""hljs-comment"">//numberOfDisparities.= (maxVal - minVal)</span>

    <span class=""hljs-comment"">//-- 4. Display it as a CV_8UC1 image</span>
    disp<span class=""hljs-built_in"">.</span>convertTo(disp8u, CV_8U, <span class=""hljs-number"">255</span><span class=""hljs-subst"">/</span>(maxVal <span class=""hljs-subst"">-</span> minVal));<span class=""hljs-comment"">//(numberOfDisparities*16.)</span>
    cv<span class=""hljs-tag"">::normalize</span>(disp8u, disp8u, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">255</span>, CV_MINMAX, CV_8UC1);    <span class=""hljs-comment"">// obtain normalized image</span>

    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""left""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""right""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""Disp""</span>,disp8u);
    cv<span class=""hljs-tag"">::imwrite</span>(<span class=""hljs-string"">""sgbm.png""</span>,disp8u);
    cv<span class=""hljs-tag"">::waitKey</span>(<span class=""hljs-number"">0</span>);

}</code></pre>

<p><img src=""http://img.blog.csdn.net/20161206221958171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h1aGFuZ196aHFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""这里写图片描述"" title=""""></p>

<p><strong>3：VAR</strong></p>

<pre class=""prettyprint""><code class="" hljs lasso"">int StereoMatch<span class=""hljs-tag"">::VARMatching</span>()
{
    cv<span class=""hljs-tag"">::Mat</span> disp,disp8u;
    double minVal; double maxVal; <span class=""hljs-comment"">//视差图的极值</span>

    cv<span class=""hljs-tag"">::Mat</span> leftImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/leftr.png""</span>,<span class=""hljs-number"">0</span>);
    cv<span class=""hljs-tag"">::Mat</span> rightImage <span class=""hljs-subst"">=</span> cv<span class=""hljs-tag"">::imread</span>(<span class=""hljs-string"">""../test_images/rightr.png""</span>,<span class=""hljs-number"">0</span>);

    int numberOfDisparities <span class=""hljs-subst"">=</span><span class=""hljs-number"">16</span><span class=""hljs-subst"">*</span><span class=""hljs-number"">2</span>; <span class=""hljs-comment"">/**&lt; Range of disparity */</span>
    numberOfDisparities <span class=""hljs-subst"">=</span> numberOfDisparities <span class=""hljs-subst"">&gt;</span> <span class=""hljs-number"">0</span> <span class=""hljs-subst"">?</span> numberOfDisparities : ((leftImage<span class=""hljs-built_in"">.</span>cols/<span class=""hljs-number"">8</span>) <span class=""hljs-subst"">+</span> <span class=""hljs-number"">15</span>) <span class=""hljs-subst"">&amp;</span> <span class=""hljs-subst"">-</span><span class=""hljs-number"">16</span>;

    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>levels <span class=""hljs-subst"">=</span> <span class=""hljs-number"">3</span>;                                 <span class=""hljs-comment"">// ignored with USE_AUTO_PARAMS</span>
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>pyrScale <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0.5</span>;                             <span class=""hljs-comment"">// ignored with USE_AUTO_PARAMS</span>
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>nIt <span class=""hljs-subst"">=</span> <span class=""hljs-number"">25</span>;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>minDisp <span class=""hljs-subst"">=</span> <span class=""hljs-attribute"">-numberOfDisparities</span>;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>maxDisp <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0</span>;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>poly_n <span class=""hljs-subst"">=</span> <span class=""hljs-number"">3</span>;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>poly_sigma <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0.0</span>;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>fi <span class=""hljs-subst"">=</span> <span class=""hljs-number"">15.0</span>f;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>lambda <span class=""hljs-subst"">=</span> <span class=""hljs-number"">0.03</span>f;
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>penalization <span class=""hljs-subst"">=</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>PENALIZATION_TICHONOV;   <span class=""hljs-comment"">// ignored with USE_AUTO_PARAMS</span>
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>cycle <span class=""hljs-subst"">=</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>CYCLE_V;                        <span class=""hljs-comment"">// ignored with USE_AUTO_PARAMS</span>
    <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>flags <span class=""hljs-subst"">=</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>USE_SMART_ID <span class=""hljs-subst"">|</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>USE_AUTO_PARAMS <span class=""hljs-subst"">|</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>USE_INITIAL_DISPARITY <span class=""hljs-subst"">|</span> <span class=""hljs-built_in"">var</span><span class=""hljs-built_in"">.</span>USE_MEDIAN_FILTERING ;

    <span class=""hljs-comment"">// 计算视差</span>
    <span class=""hljs-built_in"">var</span>(leftImage, rightImage, disp);

    <span class=""hljs-comment"">//-- Check its extreme values</span>
    cv<span class=""hljs-tag"">::minMaxLoc</span>( disp, <span class=""hljs-subst"">&amp;</span>minVal, <span class=""hljs-subst"">&amp;</span>maxVal );
    cout<span class=""hljs-subst"">&lt;&lt;</span><span class=""hljs-string"">""Min disp: Max value""</span><span class=""hljs-subst"">&lt;&lt;</span> minVal<span class=""hljs-subst"">&lt;&lt;</span>endl<span class=""hljs-subst"">&lt;&lt;</span>maxVal; <span class=""hljs-comment"">//numberOfDisparities.= (maxVal - minVal)</span>

    <span class=""hljs-comment"">//-- 4. Display it as a CV_8UC1 image</span>
    disp<span class=""hljs-built_in"">.</span>convertTo(disp8u, CV_8U, <span class=""hljs-number"">255</span><span class=""hljs-subst"">/</span>(maxVal <span class=""hljs-subst"">-</span> minVal));<span class=""hljs-comment"">//(numberOfDisparities*16.)</span>
    cv<span class=""hljs-tag"">::normalize</span>(disp8u, disp8u, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">255</span>, CV_MINMAX, CV_8UC1);    <span class=""hljs-comment"">// obtain normalized image</span>

    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""left""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""right""</span>,leftImage);
    cv<span class=""hljs-tag"">::imshow</span>(<span class=""hljs-string"">""Disp""</span>,disp8u);
    cv<span class=""hljs-tag"">::imwrite</span>(<span class=""hljs-string"">""var.png""</span>,disp8u);
    cv<span class=""hljs-tag"">::waitKey</span>(<span class=""hljs-number"">0</span>);

}</code></pre>

<p>4：GC <br>
GC好像只有在c版本的，我这里做了两个，一个是C的，一个是改了接口的C++版本的。</p>



<pre class=""prettyprint""><code class="" hljs perl""><span class=""hljs-keyword"">int</span> StereoMatch::GCMatching()
{
    IplImage * leftImage = cvLoadImage(<span class=""hljs-string"">""../test_images/leftr31.png""</span>,<span class=""hljs-number"">0</span>);
    IplImage * rightImage = cvLoadImage(<span class=""hljs-string"">""../test_images/rightr31.png""</span>,<span class=""hljs-number"">0</span>);

    CvStereoGCState* <span class=""hljs-keyword"">state</span> = cvCreateStereoGCState( <span class=""hljs-number"">16</span>, <span class=""hljs-number"">4</span> );
    IplImage * left_disp<span class=""hljs-number"">_</span>  =cvCreateImage(cvGetSize(leftImage),leftImage-&gt;depth,<span class=""hljs-number"">1</span>);
    IplImage * right_disp<span class=""hljs-number"">_</span> =cvCreateImage(cvGetSize(leftImage),leftImage-&gt;depth,<span class=""hljs-number"">1</span>);
    cvFindStereoCorrespondenceGC( leftImage, rightImage, left_disp<span class=""hljs-number"">_</span>, right_disp<span class=""hljs-number"">_</span>, <span class=""hljs-keyword"">state</span>, <span class=""hljs-number"">0</span> );
    cvReleaseStereoGCState( &amp;<span class=""hljs-keyword"">state</span> );

    cvNamedWindow(<span class=""hljs-string"">""Left""</span>,<span class=""hljs-number"">1</span>);
    cvNamedWindow(<span class=""hljs-string"">""Right""</span>,<span class=""hljs-number"">1</span>);
    cvNamedWindow(<span class=""hljs-string"">""GC_left""</span>,<span class=""hljs-number"">1</span>);
    cvNamedWindow(<span class=""hljs-string"">""GC_right""</span>,<span class=""hljs-number"">1</span>);

    cvShowImage(<span class=""hljs-string"">""Left""</span>,leftImage);
    cvShowImage(<span class=""hljs-string"">""Right""</span>,rightImage);

    cvNormalize(left_disp<span class=""hljs-number"">_</span>,left_disp<span class=""hljs-number"">_</span>,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1);
    cvNormalize(right_disp<span class=""hljs-number"">_</span>,right_disp<span class=""hljs-number"">_</span>,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1);

    cvShowImage(<span class=""hljs-string"">""GC_left""</span>,left_disp<span class=""hljs-number"">_</span>);
    cvShowImage(<span class=""hljs-string"">""GC_right""</span>,right_disp<span class=""hljs-number"">_</span>);
    cvSaveImage(<span class=""hljs-string"">""GC_left.png""</span>,left_disp<span class=""hljs-number"">_</span>);
    cvSaveImage(<span class=""hljs-string"">""GC_right.png""</span>,right_disp<span class=""hljs-number"">_</span>);


    cout&lt;&lt;endl&lt;&lt;<span class=""hljs-string"">""Over""</span>&lt;&lt;endl;
    cvWaitKey(<span class=""hljs-number"">0</span>);
    cvDestroyAllWindows();
    cvReleaseImage(&amp;leftImage);
    cvReleaseImage(&amp;rightImage);
    <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">0</span>;
}</code></pre>



<pre class=""prettyprint""><code class="" hljs autohotkey""><span class=""hljs-label"">int StereoMatch::</span>GCMatching_Mat()
{
    double minVal<span class=""hljs-comment"">; double maxVal; //视差图的极值</span>
<span class=""hljs-label"">    cv::</span>Mat disp8u_l,disp8u_r<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::Mat leftImage = cv::</span>imread(<span class=""hljs-string"">""../test_images/leftr31.png""</span>,<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::Mat rightImage = cv::</span>imread(<span class=""hljs-string"">""../test_images/rightr31.png""</span>,<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>

    CvStereoGCState* state = cvCreateStereoGCState( <span class=""hljs-number"">16</span>, <span class=""hljs-number"">5</span> )<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>Mat left_disp_  =leftImage.clone()<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>Mat right_disp_ =rightImage.clone()<span class=""hljs-comment"">;</span>

    IplImage temp = (IplImage)leftImage<span class=""hljs-comment"">;</span>
    IplImage* leftimg = &amp;temp<span class=""hljs-comment"">;</span>
    IplImage temp1 = (IplImage)rightImage<span class=""hljs-comment"">;</span>
    IplImage* rightimg = &amp;temp1<span class=""hljs-comment"">;</span>
    IplImage temp2 = (IplImage)left_disp_<span class=""hljs-comment"">;</span>
    IplImage* leftdisp = &amp;temp2<span class=""hljs-comment"">;</span>
    IplImage temp3 = (IplImage)right_disp_<span class=""hljs-comment"">;</span>
    IplImage* rightdisp = &amp;temp3<span class=""hljs-comment"">;</span>

    cvFindStereoCorrespondenceGC( leftimg, rightimg, leftdisp, rightdisp, state, <span class=""hljs-number"">0</span> )<span class=""hljs-comment"">;</span>
    cvReleaseStereoGCState( &amp;state )<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::</span>namedWindow(<span class=""hljs-string"">""Left""</span>,<span class=""hljs-number"">1</span>)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>namedWindow(<span class=""hljs-string"">""Right""</span>,<span class=""hljs-number"">1</span>)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>namedWindow(<span class=""hljs-string"">""GC_left""</span>,<span class=""hljs-number"">1</span>)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>namedWindow(<span class=""hljs-string"">""GC_right""</span>,<span class=""hljs-number"">1</span>)<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Left""</span>,leftImage)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""Right""</span>,rightImage)<span class=""hljs-comment"">;</span>

/*    //-- Check its extreme values
<span class=""hljs-label"">    cv::</span>minMaxLoc(right_disp_, &amp;minVal, &amp;maxVal )<span class=""hljs-comment"">;</span>
    cout&lt;&lt;<span class=""hljs-string"">""Min disp: Max value""</span>&lt;&lt; minVal&lt;&lt;maxVal<span class=""hljs-comment"">; //numberOfDisparities.= (maxVal - minVal)</span>

    //-- Display it as <span class=""hljs-literal"">a</span> CV_8UC1 image
    right_disp_.convertTo(disp8u_r, CV_8U, <span class=""hljs-number"">255</span>/(maxVal - minVal))<span class=""hljs-comment"">;//(numberOfDisparities*16.)</span>

<span class=""hljs-label"">    cv::</span>normalize(left_disp_,left_disp_,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>normalize(disp8u_r,disp8u_r,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1)<span class=""hljs-comment"">;</span>
*/
<span class=""hljs-label"">    cv::</span>normalize(left_disp_,left_disp_,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>normalize(right_disp_,right_disp_,<span class=""hljs-number"">0</span>,<span class=""hljs-number"">255</span>,CV_MINMAX,CV_8UC1)<span class=""hljs-comment"">;</span>

<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""GC_left""</span>,left_disp_)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imshow(<span class=""hljs-string"">""GC_right""</span>,right_disp_)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imwrite(<span class=""hljs-string"">""GC_left.png""</span>,left_disp_)<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>imwrite(<span class=""hljs-string"">""GC_right.png""</span>,right_disp_)<span class=""hljs-comment"">;</span>

    cout&lt;&lt;endl&lt;&lt;<span class=""hljs-string"">""Over""</span>&lt;&lt;endl<span class=""hljs-comment"">;</span>
<span class=""hljs-label"">    cv::</span>waitKey(<span class=""hljs-number"">0</span>)<span class=""hljs-comment"">;</span>

    <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">0</span><span class=""hljs-comment"">;</span>
}
</code></pre>

<p><img src=""http://img.blog.csdn.net/20161206222251190?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h1aGFuZ196aHFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""这里写图片描述"" title=""""></p></div>",研发管理,2016-12-07 11:29
5912,"这是前段时间做的一个课程设计，做的比较简单，没有考虑到太细，只是初步地达到了想要的效果。这次设计主要是对心电信号进行预处理，将其信号中包含的一些干扰滤除或者抑制掉。
一、心电信号
（1）心电信号的特性...",i_weimoli,http://blog.csdn.net/i_weimoli/article/details/53497384,基于matlab的心电信号预处理,,综合,2016-12-07 11:58
1959,Spark性能优化 - 开发调优优化一  避免创建重复的RDD通常来说，我们在开发一个Spark作业时，首先是基于某个数据源（比如Hive表或HDFS文件）创建一个初始的RDD；接着对这个RDD执行某...,qq_16103331,http://blog.csdn.net/qq_16103331/article/details/53502584,Spark 开发调优（一）,"<div class=""markdown_views""><h1 id=""spark性能优化-开发调优"">Spark性能优化 - 开发调优</h1>



<h2 id=""优化一-避免创建重复的rdd"">优化一  避免创建重复的RDD</h2>

<p>通常来说，我们在开发一个Spark作业时，首先是基于某个数据源（比如Hive表或HDFS文件）创建一个初始的RDD；接着对这个RDD执行某个算子操作，然后得到下一个RDD；以此类推，循环往复，直到计算出最终我们需要的结果。在这个过程中，多个RDD会通过不同的算子操作（比如map、reduce等）串起来，这个“RDD串”，就是RDD lineage，也就是“RDD的血缘关系链”。</p>

<p>我们在开发过程中要注意：对于同一份数据，只应该创建一个RDD，不能创建多个RDD来代表同一份数据。</p>

<p>一些Spark初学者在刚开始开发Spark作业时，或者是有经验的工程师在开发RDD lineage极其冗长的Spark作业时，可能会忘了自己之前对于某一份数据已经创建过一个RDD了，从而导致对于同一份数据，创建了多个RDD。这就意味着，我们的Spark作业会进行多次重复计算来创建多个代表相同数据的RDD，进而增加了作业的性能开销。</p>



<h2 id=""优化二尽可能复用同一个rdd"">优化二：尽可能复用同一个RDD</h2>

<p>1、我们除了要避免在开发过程中对一份完全相同的数据创建多个RDD之外，在对不同的数据执行算子操作时还要尽可能地复用一个RDD。</p>

<p>2、比如说，有一个RDD的数据格式是key-value类型的，另一个是单value类型的，这两个RDD的value数据是完全一样的。那么此时我们可以只使用key-value类型的那个RDD，因为其中已经包含了另一个的数据。对于类似这种多个RDD的数据有重叠或者包含的情况，我们应该尽量复用一个RDD，这样可以尽可能地减少RDD的数量，从而尽可能减少算子执行的次数。</p>



<h2 id=""优化三对多次使用的rdd进行持久化"">优化三：对多次使用的RDD进行持久化</h2>

<p>1、当我们在Spark代码中多次对一个RDD做了算子操作后，恭喜，你已经实现Spark作业第一步的优化了，也就是尽可能复用RDD。此时就该在这个基础之上，进行第二步优化了，也就是要保证对一个RDD执行多次算子操作时，这个RDD本身仅仅被计算一次。</p>

<p>2、Spark中对于一个RDD执行多次算子的默认原理是这样的：每次你对一个RDD执行一个算子操作时，都会重新从源头处计算一遍，计算出那个RDD来，然后再对这个RDD执行你的算子操作。这种方式的性能是很差的。</p>

<p>3、因此对于这种情况，我们的建议是：对多次使用的RDD进行持久化。此时Spark就会根据你的持久化策略，将RDD中的数据保存到内存或者磁盘中。以后每次对这个RDD进行算子操作时，都会直接从内存或磁盘中提取持久化的RDD数据，然后执行算子，而不会从源头处重新计算一遍这个RDD，再执行算子操作。</p>



<h2 id=""代码案例和使用场景分析"">代码案例和使用场景分析</h2>

<p><img src=""http://i.imgur.com/m3deGVy.png"" alt="""" title=""""></p>



<h3 id=""如何选择一种最合适的持久化策略"">如何选择一种最合适的持久化策略</h3>

<p>1、默认情况下，性能最高的当然是MEMORY_ONLY，但前提是你的内存必须足够足够大，可以绰绰有余地存放下整个RDD的所有数据。因为不进行序列化与反序列化操作，就避免了这部分的性能开销；对这个RDD的后续算子操作，都是基于纯内存中的数据的操作，不需要从磁盘文件中读取数据，性能也很高；而且不需要复制一份数据副本，并远程传送到其他节点上。但是这里必须要注意的是，在实际的生产环境中，恐怕能够直接用这种策略的场景还是有限的，如果RDD中数据比较多时（比如几十亿），直接用这种持久化级别，会导致JVM的OOM内存溢出异常。</p>

<p>2、如果使用MEMORY_ONLY级别时发生了内存溢出，那么建议尝试使用MEMORY_ONLY_SER级别。该级别会将RDD数据序列化后再保存在内存中，此时每个partition仅仅是一个字节数组而已，大大减少了对象数量，并降低了内存占用。这种级别比MEMORY_ONLY多出来的性能开销，主要就是序列化与反序列化的开销。但是后续算子可以基于纯内存进行操作，因此性能总体还是比较高的。此外，可能发生的问题同上，如果RDD中的数据量过多的话，还是可能会导致OOM内存溢出的异常。</p>

<p>3、如果纯内存的级别都无法使用，那么建议使用MEMORY_AND_DISK_SER策略，而不是MEMORY_AND_DISK策略。因为既然到了这一步，就说明RDD的数据量很大，内存无法完全放下。序列化后的数据比较少，可以节省内存和磁盘的空间开销。同时该策略会优先尽量尝试将数据缓存在内存中，内存缓存不下才会写入磁盘。</p>

<p>4、通常不建议使用DISK_ONLY和后缀为_2的级别：因为完全基于磁盘文件进行数据的读写，会导致性能急剧降低，有时还不如重新计算一次所有RDD。后缀为_2的级别，必须将所有数据都复制一份副本，并发送到其他节点上，数据复制以及网络传输会导致较大的性能开销，除非是要求作业的高可用性，否则不建议使用。</p>



<h2 id=""优化四尽量避免使用shuffle类算子"">优化四：尽量避免使用shuffle类算子</h2>

<p>1、如果有可能的话，要尽量避免使用shuffle类算子。因为Spark作业运行过程中，最消耗性能的地方就是shuffle过程。shuffle过程，简单来说，就是将分布在集群中多个节点上的同一个key，拉取到同一个节点上，进行聚合或join等操作。比如reduceByKey、join等算子，都会触发shuffle操作。</p>

<p>2、shuffle过程中，各个节点上的相同key都会先写入本地磁盘文件中，然后其他节点需要通过网络传输拉取各个节点上的磁盘文件中的相同key。而且相同key都拉取到同一个节点进行聚合操作时，还有可能会因为一个节点上处理的key过多，导致内存不够存放，进而溢写到磁盘文件中。因此在shuffle过程中，可能会发生大量的磁盘文件读写的IO操作，以及数据的网络传输操作。磁盘IO和网络数据传输也是shuffle性能较差的主要原因。</p>

<p>3、因此在我们的开发过程中，能避免则尽可能避免使用reduceByKey、join、distinct、repartition等会进行shuffle的算子，尽量使用map类的非shuffle算子。这样的话，没有shuffle操作或者仅有较少shuffle操作的Spark作业，可以大大减少性能开销。</p>



<h2 id=""优化五使用map-side预聚合的shuffle操作"">优化五：使用map-side预聚合的shuffle操作</h2>

<p>如果因为业务需要，一定要使用shuffle操作，无法用map类的算子来替代，那么尽量使用可以map-side预聚合的算子。</p>

<p>1、所谓的map-side预聚合，说的是在每个节点本地对相同的key进行一次聚合操作，类似于MapReduce中的本地combiner。map-side预聚合之后，每个节点本地就只会有一条相同的key，因为多条相同的key都被聚合起来了。其他节点在拉取所有节点上的相同key时，就会大大减少需要拉取的数据数量，从而也就减少了磁盘IO以及网络传输开销。通常来说，在可能的情况下，建议使用reduceByKey或者aggregateByKey算子来替代掉groupByKey算子。因为reduceByKey和aggregateByKey算子都会使用用户自定义的函数对每个节点本地的相同key进行预聚合。而groupByKey算子是不会进行预聚合的，全量的数据会在集群的各个节点之间分发和传输，性能相对来说比较差。</p>

<p>2、比如如下两幅图，就是典型的例子，分别基于reduceByKey和groupByKey进行单词计数。其中第一张图是groupByKey的原理图，可以看到，没有进行任何本地聚合时，所有数据都会在集群节点之间传输；第二张图是reduceByKey的原理图，可以看到，每个节点本地的相同key数据，都进行了预聚合，然后才传输到其他节点上进行全局聚合。</p>

<p>Java版本</p>

<pre><code>public class AggregateOps {
public static void main(String[] args) {
    SparkConf conf = new SparkConf().setAppName(AggregateOps.class.getSimpleName()).setMaster(""local[10]"");
    JavaSparkContext sc = new JavaSparkContext(conf);
    List&lt;String&gt; list = Arrays.asList(""hello you"", ""hello me"", ""you love me"", ""me love"",""hello you"");
    JavaRDD&lt;String&gt; linesRDD = sc.parallelize(list,10);
    JavaRDD&lt;String&gt; wordsRDD = linesRDD.flatMap(new FlatMapFunction&lt;String, String&gt;() {
        @Override
        public Iterable&lt;String&gt; call(String s) throws Exception {
            return Arrays.asList(s.split("" ""));
        }
    });
    JavaPairRDD&lt;String, Integer&gt; wordRDD = wordsRDD.mapToPair(new PairFunction&lt;String, String, Integer&gt;() {
        @Override
        public Tuple2&lt;String, Integer&gt; call(String s) throws Exception {
            return new Tuple2&lt;String, Integer&gt;(s, 1);
        }
    });
    JavaPairRDD&lt;String, Integer&gt; aggregateByKeyRDD = wordRDD.aggregateByKey(0, new Function2&lt;Integer, Integer, Integer&gt;() {
        @Override
        public Integer call(Integer integer, Integer integer2) throws Exception {
            System.out.println(""seq : "" + integer + ""---"" + integer2);
            return Math.max(integer, integer2);
        }
    }, new Function2&lt;Integer, Integer, Integer&gt;() {
        @Override
        public Integer call(Integer integer, Integer integer2) throws Exception {
            System.out.println(""comb : "" + integer + ""---"" + integer2);
            return integer + integer2;
        }
    });
    aggregateByKeyRDD.foreach(new VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() {
        @Override
        public void call(Tuple2&lt;String, Integer&gt; tuple2) throws Exception {
            System.out.println(tuple2._1()+"" ---- ""+tuple2._2());
        }
    });
    sc.close();

}
}
</code></pre>

<p>Scala版本</p>

<pre><code>    object MapSideShuffle {
    def main(args: Array[String]): Unit = {
      sideMap()
    }
    def nosideMap(): Unit ={
    val conf = new SparkConf().setAppName(""MapSideShuffle"").setMaster(""local[2]"")
    val sc = new SparkContext(conf)
     val linesRDD: RDD[String] = sc.textFile(""E:/test/word.txt"")
    val wordsRDD: RDD[String] = linesRDD.flatMap(_.split("" ""))
    val wordRDD: RDD[(String, Int)] = wordsRDD.map((_,1))
    val noSideMap: RDD[(String, Int)] = wordRDD.reduceByKey(_+_)
    noSideMap.foreach(println(_))
    }
    def sideMap(): Unit ={
    val conf = new SparkConf().setAppName(""MapSideShuffle"").setMaster(""local[4]"")
    val sc = new SparkContext(conf)
    val linesRDD: RDD[String] = sc.textFile(""E:/test/word.txt"",4)
    val wordsRDD: RDD[String] = linesRDD.flatMap(_.split("" ""))
    val wordRDD: RDD[(String, Int)] = wordsRDD.map((_,1))
    val ll=wordRDD.aggregateByKey(0)(seq,comd).collect()
    ll.foreach(println(_))
    }
    //a 是zerovalue aggregateByKey 的初始化传入值，seq函数返回最大值，这个可以自己按需求设计
    //因为这个返回的是这个K的默认值了，comd阶段，进行的操作是 根据key值相同的，进行相应的逻辑运算
    def seq (a : Int,b :Int): Int ={
    println(""seq :"" + a +""   ""+b)
    Math.max(a,b)
     }
     def comd(a :Int,b :Int): Int ={
    println(""comie :"" + a +""   ""+b)
    a + b
      }
    }
</code></pre>



<h2 id=""优化六使用高性能的算子操作"">优化六：使用高性能的算子操作</h2>

<p>除了shuffle相关的算子有优化原则之外，其他的算子也都有着相应的优化原则。 <br>
1、使用reduceByKey/aggregateByKey替代groupByKey <br>
2、使用mapPartitions替代普通map <br>
   mapPartitions类的算子，一次函数调用会处理一个partition所有的数据，而不是一次函数调用处理一条，性能相对来说会高一些。但是有的时候，使用mapPartitions会出现OOM（内存溢出）的问题。因为单次函数调用就要处理掉一个partition所有的数据，如果内存不够，垃圾回收时是无法回收掉太多对象的，很可能出现OOM异常。所以使用这类操作时要慎重！ <br>
3、使用foreachPartitions替代foreach <br>
   原理类似于“使用mapPartitions替代map”，也是一次函数调用处理一个partition的所有数据，而不是一次函数调用处理一条数据。在实践中发现，foreachPartitions类的算子，对性能的提升还是很有帮助的。比如在foreach函数中，将RDD中所有数据写MySQL，那么如果是普通的foreach算子，就会一条数据一条数据地写，每次函数调用可能就会创建一个数据库连接，此时就势必会频繁地创建和销毁数据库连接，性能是非常低下；但是如果用foreachPartitions算子一次性处理一个partition的数据，那么对于每个partition，只要创建一个数据库连接即可，然后执行批量插入操作，此时性能是比较高的。实践中发现，对于1万条左右的数据量写MySQL，性能可以提升30%以上。</p>

<p>Scala </p>

<pre><code>    object MapPartitionsToPair {
    def main(args: Array[String]): Unit = {
    val conf = new SparkConf().setAppName(""MapPartitionsToPair"").setMaster(""local"")
    val sc = new SparkContext(conf)
    val file: RDD[String] = sc.textFile(""E:/test/word.txt"",3)
    val linesRDD = file.flatMap(_.split("" ""))
    linesRDD.mapPartitions(x =&gt; {
      var list: List[Tuple2[String, Int]] =  List[Tuple2[String, Int]]()
      for(word &lt;- x){
        list.+:=((word,1))
      }
      var tuples: Iterator[Tuple2[String, Int]] = list.toIterator
      tuples
    }).reduceByKey(_+_).foreachPartition(line =&gt;{
      while (line.hasNext){
        var next: (String, Int) = line.next()
        println(next._1+""-----""+next._2)
      }
    })
 }
}
</code></pre>

<p>Java </p>

<pre><code>public class MapPartitionsToPair {
public static void main(String[] args) {
    SparkConf conf = new SparkConf().setAppName(MapPartitionsToPair.class.getSimpleName()).setMaster(""local[2]"");
    JavaSparkContext sc = new JavaSparkContext(conf);
    JavaRDD&lt;String&gt; linesRDD = sc.textFile(""E:/test/word.txt"", 4);
    JavaRDD&lt;String&gt; wordRDD = linesRDD.flatMap(line -&gt; Arrays.asList(line.split("" "")));
    wordRDD.mapPartitionsToPair(word -&gt; {
        Set&lt;Tuple2&lt;String,Integer&gt;&gt; set = new HashSet&lt;&gt;();
        while (word.hasNext()){
            String next = word.next();
            set.add(new Tuple2&lt;String,Integer&gt;(next,1));
        }
        return set;
    }).reduceByKey((v1,v2)-&gt; (v1+v2))
            .foreachPartition(x -&gt; {
                System.out.println(""---------------------------------"");
                while (x.hasNext()){
                    Tuple2&lt;String, Integer&gt; tuple2 = x.next();
                    System.out.println(tuple2._1()+""    ""+tuple2._2());
                }
            });
    }
}
</code></pre>

<p>4、使用filter之后进行coalesce操作</p>

<p>通常对一个RDD执行filter算子过滤掉RDD中较多数据后（比如30%以上的数据），建议使用coalesce算子，手动减少RDD的partition数量，将RDD中的数据压缩到更少的partition中去。因为filter之后，RDD的每个partition中都会有很多数据被过滤掉，此时如果照常进行后续的计算，其实每个task处理的partition中的数据量并不是很多，有一点资源浪费，而且此时处理的task越多，可能速度反而越慢。因此用coalesce减少partition数量，将RDD中的数据压缩到更少的partition之后，只要使用更少的task即可处理完所有的partition。在某些场景下，对于性能的提升会有一定的帮助。</p>

<p>Java</p>

<pre><code>public class PartitionsOps {
public static void main(String[] args) {
    SparkConf conf = new SparkConf().setAppName(PartitionsOps.class.getSimpleName()).setMaster(""local[2]"");
    JavaSparkContext sc = new JavaSparkContext(conf);
    JavaRDD&lt;String&gt; linesRDD = sc.textFile(""E:/test/word.txt"",2);
    JavaRDD&lt;String&gt; wordsRDD = linesRDD.flatMap(x -&gt; Arrays.asList(x.split("" "")));
    JavaPairRDD&lt;String, Integer&gt; wordRDD = wordsRDD.mapPartitionsToPair(line -&gt; {
        Set&lt;Tuple2&lt;String, Integer&gt;&gt; set = new HashSet&lt;Tuple2&lt;String, Integer&gt;&gt;();
        while (line.hasNext()) {
            String s = line.next();
            set.add(new Tuple2&lt;String, Integer&gt;(s.trim(), 1));
        }
        return set;
    });
    JavaPairRDD&lt;String, Integer&gt; hadoopRDD = wordRDD.filter(new Function&lt;Tuple2&lt;String, Integer&gt;, Boolean&gt;() {
        @Override
        public Boolean call(Tuple2&lt;String, Integer&gt; tuple2) throws Exception {
            return tuple2._1().equalsIgnoreCase(""shi"");
        }
    });
    System.out.println(hadoopRDD.getNumPartitions());
    hadoopRDD = hadoopRDD.coalesce(1);
    System.out.println(hadoopRDD.getNumPartitions());
    hadoopRDD.reduceByKey((v1,v2) -&gt; v1+v2).foreach(t -&gt; System.out.println(t._1() +""  ""+t._2()));
    sc.close();

}
}
</code></pre>

<p>Scala</p>

<pre><code>object PartitionsOps {
def main(args: Array[String]): Unit = {
val conf = new SparkConf().setAppName(""PartitionsOps"").setMaster(""local[2]"")
val sc = new SparkContext(conf)
var linesRDD: RDD[String] = sc.textFile(""E:/test/word.txt"",2)
var hadoop = linesRDD.flatMap(_.split("" "")).mapPartitions(word =&gt;{
  var list:List[Tuple2[String,Int]] = List[Tuple2[String,Int]]()
  for (x &lt;- word){
    list.+:=(new Tuple2[String,Int](x,1))
  }
  var tuples: Iterator[(String, Int)] = list.toIterator
  tuples
}).filter(_._1.equalsIgnoreCase(""shi""))
println(hadoop.getNumPartitions)
hadoop = hadoop.coalesce(1)
println(hadoop.getNumPartitions)
hadoop.reduceByKey(_+_).foreach(x =&gt;println(x._1+""  ""+x._2))
 }
}
</code></pre>

<p>5、使用repartitionAndSortWithinPartitions替代repartition与sort类操作</p>

<p>repartitionAndSortWithinPartitions是Spark官网推荐的一个算子，官方建议，如果需要在repartition重分区之后，还要进行排序，建议直接使用repartitionAndSortWithinPartitions算子。因为该算子可以一边进行重分区的shuffle操作，一边进行排序。shuffle与sort两个操作同时进行，比先shuffle再sort来说，性能可能是要高的。</p></div>",研发管理,2016-12-07 11:59
4423,Circuit Breaker模式会处理一些需要一定时间来重连远程服务和远端资源的错误。该模式可以提高一个应用的稳定性和弹性。问题在类似于云的分布式环境中，当一个应用需要执行一些访问远程资源或者是远端...,EthanWhite,http://blog.csdn.net/ethanwhite/article/details/53502315,Circuit Breaker模式,"<div class=""markdown_views""><p>Circuit Breaker模式会处理一些需要一定时间来重连远程服务和远端资源的错误。该模式可以提高一个应用的稳定性和弹性。</p>



<h2 id=""问题"">问题</h2>

<p>在类似于云的分布式环境中，当一个应用需要执行一些访问远程资源或者是远端服务的时候，是很容易碰到一些偶然的错误的，比如说，网络连接速度很慢，超时，或者是资源的过量使用，或者临时资源不再可用等等。这一类的错误通常来说会在短暂的时间内，自动恢复过来。一个健壮的云应用也该能够通过一些策略能够处理这类错误，比如使用<strong>重试</strong>模式。</p>

<p>然而，也有一些情况，错误是出于一些意想不到的事件，这类事件很难预期，而且需要消耗很多时间来自动恢复。这些错误在严重性上也从丢失部分连接到整个服务的失败。在这些情况下，让应用继续重试或者执行操作就已经没有意义了。相对的，应用应该迅速令服务失败，而根据错误类型来尝试采取对应的措施。</p>

<p>另外，如果一个服务非常繁忙，系统的部分错误有可能会导致雪崩效应。举例来说，一个操作其他服务的操作可以配置超时时间的，如果服务再一段时间无法应答，调用方可以返回错误信息的。然而这个策略可能导致大量针对这个服务的请求阻塞直至Timeout时间到了。这些阻塞的请求可能会持有系统关键的资源，比如内存，线程，数据库连接等等信息。因此，引用的资源也可能会被耗尽，造成系统内其他不相关部分得失败。在这些情况下，最好的方法是令这些配置超时的操作立刻失败，并且只有当服务可能成功的时候才去调用。当然，配置较短的超时时间也能改善这一问题，但是超时时间如果配置的太短，服务的调用反而会因为大量的超时而失败。</p>

<h2 id=""解决方案"">解决方案</h2>

<p>Circuit-Breaker模式可以防止应用重复的尝试调用容易失败的操作，当Circuit-Breaker模式判断错误会持续的时候，它会令操作不再持续等待，以免继续浪费CPU资源。当然，Circuit-Breaker模式也令应用本身可以发现错误有没有被修复。如果发生的问题已经被修复了，应用可以重新尝试去调用服务。</p>

<blockquote>
  <p>Circuit-Breaker模式的目的和Retry模式的目的是不同的。Retry模式令应用不断的重试调用，直到最后成功。而Circuit-Breaker模式是阻止应用继续尝试无意义的请求。应用可以同时使用两种模式。然而，重试逻辑应用对于所有的Circuit-Breaker返回的异常十分敏感，这样可以在Circuit-Breaker发现错误短时间无法修复的情况下直接不再继续重试。</p>
</blockquote>

<p>Circuit-Breaker的作用就好似可能失败操作的代理。代理会监控最近发生的错误，然后依据这一信息来决定是否允许操作的继续执行，或者直接立刻返回异常信息。</p>

<p>Circuit-Breaker可以按照如下的状态来模仿一个断路器来实现：</p>

<ul>
<li><strong>关闭</strong>：应用的请求已经路由到了这个操作。代理应该维护最近一段时间的错误信息，如果调用操作失败，那么大力增加这个错误信息的数量。如果这个错误数量超过给定时间的阈值，代理进入到<strong>打开</strong>状态。这个时候，代理启动一个超时的Timer，当Timer过期了，代理则进入<strong>半开</strong>状态。</li>
</ul>

<blockquote>
  <p>超时Timer的目的是为了给系统一段时间来自我修复之前碰到的问题。</p>
</blockquote>

<p></p><ul> <br>
<li><strong>打开</strong>：令可能失败的外部调用操作立刻失败，所有的外部调用直接抛异常给应用。</li>
<li><strong>半开</strong>：只有一定数量的应用请求可以进行操作的调用。如果这些请求成功了，那么就假定之前发成的错误已经被系统自动修复了，而Circuit-Breaker转换成<strong>关闭</strong>状态（同时重置错误计数器）。如果任何请求失败了，那么Circuit-Breaker会假定错误仍然在存在，Circuit-Breaker会重新转换成<strong>打开</strong>状态，并重启超时Timer给系统更多的时间来自我修复错误。 <br></li></ul><p></p>

<blockquote>
  <p><strong>半开</strong>状态可以很有效的阻止一个可以恢复的服务被大量的请求所淹没。而处于恢复中的服务，可能也能够承载一定数量的请求，直到完全恢复才能恢复全部的吞吐量。但是，突然大量的错误也可能会令恢复中的服务重新crash掉。
   <br>
  参考如下状态变换图：</p>
</blockquote>

<p><img src=""http://img.blog.csdn.net/20161207100901446?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRXRoYW5XaGl0ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""这里写图片描述"" title=""""></p>

<p>需要注意的是，上图中，关闭状态所用的错误计数器是基于时间的。它会以一定的时间间隔来重置。这也能够在常见错误的情况下不让Circuit-Breaker模式进入打开状态。而错误计数阈值才会令Circuit-Breaker进入到打开状态，只有当指定时间间隔内，错误计数达到阈值才能令Circuit-Breaker进入到打开状态。半开状态所使用的成功计数器则会记录成功的调用次数。Circuit-Breaker如果在之后出现了连续的成功的调用，那么Circuit-Breaker就会进入关闭状态。如果任何调用的失败了，那么Circuit-Breaker也会重新进入到打开状态，成功计数器也会重置，直到下次重新进入到半开状态。</p>

<blockquote>
  <p>通常系统的外部恢复，很多时候都是通过重启失败的组件或者修复网络连接来完成的。</p>
</blockquote>

<p>实现Circuit-Breaker模式可以增加系统的稳定性和弹性，当系统从错误恢复的时候，可以尽可能所有失败对系统性能的影响。Circuit-Breaker模式可以通过拒绝外部调用来保证服务的响应时间，而不是等待操作的超时（或者持续阻塞）。如果Circuit-Breaker在每一次状态改变的时候触发一些事件的话，这个状态的改变也可以用来监视Circuit-Breaker保护模块的健康状态，或者是对监控Circuit-Breaker的管理员发出警告，Circuit-Breaker已经进入了打开状态。</p>

<p>Circuit-Breaker模式可以很好的定制并适配很多可能的错误。举例来说，开发者可以应用一个增长的超时Timer，也可以直接令Circuit-Breaker在处于打开状态几秒，如果错误在之后还没有解决，就超时几分钟等等。在有些场景下，打开状态的Circuit-Breaker也可以不抛出异常而是返回默认值来改善应用的响应。</p>

<h2 id=""需要考虑的问题"">需要考虑的问题</h2>

<p>开发者在实现Circuit-Breaker模式的时候，有如下的一些地方需要注意：</p>

<ul>
<li><strong>异常的处理</strong>。应用如果通过Circuit-Breaker来调用操作的话，就必须能够处理操作失效所引起的异常。而处理这些异常的代码将会和应用是高度相关的。举例来说，应用可以选择暂时降低其服务，调用其他的操作来达到完成相同的任务，或者获取相同的数据，或者抛出异常给用户令其稍后重试。</li>
<li><strong>异常的类型</strong>。请求失败可能有有多个原因，有些错误可能会比其他的错误更严重。举个例子，请求失败可能是因为远端的服务crash掉了，需要几分钟时间来恢复，或者只是因为服务过载而造成的暂时性服务超时。Circuit-Breaker也能够判断错误的类型，来调整不同的策略。举例来说，针对超时配置的错误计数阈值可以配置的比服务失效的阈值更高。</li>
<li><strong>日志</strong>。Circuit-Breaker应该把所有的失败请求都记录日志（和可能成功的请求），这样可以让管理员监控到外部调用的健康状态。</li>
<li><strong>恢复性</strong>。开发者应该为其保护的远端调用进行合理的配置来匹配远端调用的恢复模式。举例来说，如果Circuit-Breaker配置的停留在打开状态很久的话，就算远端服务已经可用了，因为Circuit-Breaker的打开状态，会令服务的状态仍然处于不可用状态。类似的，如果配置Circuit-Breaker的恢复时间太快，也会让应用在打开状态和半开状态之间不断震荡。</li>
<li><strong>测试失效操作</strong>。在打开状态，相对于使用Timer来判断什么时间转换为半开状态，Circuit-Breaker也可以选择间隔性的ping远端的服务（资源）来决定其是否可用。ping操作也可以作为一种尝试远端调用的方式，当然，也可以用远端服务提供的其他接口来测试服务是否正常。这在Health-Endpoint监控模式中有所描述。</li>
<li><strong>手动覆盖</strong>。在某个系统中，如果其失效的时间是可见的，Circuit-Breaker也可以提供一些手动恢复的选项，来令管理员强制的关闭Circuit-Breaker。类似的，管理员也可以在远端服务暂时失效的情况下强制性配置Circuit-Breaker进入打开状态（重启超时Timer）</li>
<li><strong>并发</strong>。同一个Circuit-Breaker很可能被应用的实例大量并发访问。所以其实现应该是非阻塞的或者对于每个请求都增加更多的消费。</li>
<li><strong>资源的不同</strong>。需要注意的是，当为一种类型的资源配置一个Circuit-Breaker但是可能有多个独立的提供资源的服务时要尤其小心。举例来说，在一个包含多个Shard的数据仓库中，其中的一个Shard没问题而另一个可能短时间内访问有问题。如果错误的返回在上面的场景中混合在了一起，即使错误很类似，应用也会尝试访问，从而阻塞的。</li>
<li><p><strong>加速断路</strong>。有的时候，错误的应答信息足够判断当前的状态而让Circuit-Breaker立刻触发。举个例子：如果一个Shard的返回信息表示，不建议立刻重试，希望在几分钟后重试的时候，那么Circuit-Breaker就不需要计数器到达阈值在进入Open状态了。</p>

<blockquote>
  <p>HTTP协议定义：503表示服务不可用，如果请求的服务当前在web服务器上面不可用，就可以返回503。这个应答信息就可以包含额外的信息，比如期望的延迟重试时间。</p>
</blockquote></li>
<li><p><strong>重演失败请求</strong>。在<strong>打开</strong>状态，相对于让服务快速的失败，Circuit-Breaker也可以记录具体的请求，然后在稍后的时间，重新令这些失败的请求再来请求。</p></li>
<li><strong>外部请求上的不恰当超时时间</strong>。如果对于外部请求的超时时间配置的过长的话，Circuit-Breaker可能很难保护应用。如果超时时间过长，运行Circuit-Breaker的线程可能在认为服务失败之前，就被完全阻塞了。这种情况下，应用的实例就算是Circuit-Breaker触发了，进入了Open状态，也会有相当数量的线程处于阻塞状态的。</li>
</ul>

<h2 id=""何时使用该模式"">何时使用该模式</h2>

<p>使用该模式：</p>

<ul>
<li>当需要阻止应用不断尝试调用远端服务或者访问共享资源，并且这些请求很容易失败的时候使用Circuit-Breaker模式很合适。</li>
</ul>

<p>什么场景不适合使用该模式：</p>

<ul>
<li>当用来处理访问本地资源，比如内存中的数据结构的时候，不适合使用。在这种场景下，Circuit-Breaker只会给应用带来额外的负担。</li>
<li>将Circuit-Breaker作为处理应用中的业务逻辑中的异常处理的一部分也是不合适的。</li>
</ul>



<h2 id=""circuit-breaker使用举例"">Circuit-Breaker使用举例</h2>

<p>在web应用中，有些页面是需要从外部的服务来获取数据的。如果系统实现了最小额度的缓存，那么页面的大量访问可能就会引起大量的调用。如果web应用和外部服务之间配置了超时（比如60s）的话，如果外部服务没有响应，页面会认为服务失效并抛出异常。 <br>
然而，如果服务失败了，而系统仍然非常的频繁访问，用户可能会被迫等待60秒，然后看到无结果。最后，像是内存，连接数，以及线程等资源都不足了，就算用户不再访问外部资源，可能服务也会被拒绝的。 <br>
当然，增加web服务器和使用负载均衡等方式都能一定程度上防止资源的耗尽，但是，这样仍然无法解决用户长时间等待没有响应页面的问题。 <br>
通过使用Circuit-Breaker来包裹链接外部服务的逻辑可以有效削弱上面提到的问题。用户请求将会失败，但是请求会立刻失败，但是不会导致请求资源的阻塞。 <br>
<code>CircuitBreaker</code>类通过内部一个<code>ICircuitBreakerStateStore</code>对象来维护Circuit-Breaker的状态信息。参考如下代码：</p>



<pre class=""prettyprint""><code class="" hljs vala""><span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">ICircuitBreakerStateStore</span>
{</span>
    CircuitBreakerStateEnum State { <span class=""hljs-keyword"">get</span>; }
    Exception LastException { <span class=""hljs-keyword"">get</span>; }
    DateTime LastStateChangedDateUtc { <span class=""hljs-keyword"">get</span>; }
    <span class=""hljs-keyword"">void</span> Trip(Exception ex);
    <span class=""hljs-keyword"">void</span> Reset();
    <span class=""hljs-keyword"">void</span> HalfOpen();
    <span class=""hljs-keyword"">bool</span> IsClosed { <span class=""hljs-keyword"">get</span>; }
}</code></pre>

<p>其中的<code>State</code>属性表示Circuit-Breaker当前的状态，其中包含前面所提到的三个状态<code>Open</code>,<code>HalfOpen</code>,<code>Closed</code>。<code>IsClose</code>属性在状态为<code>Closed</code>的时候就会返回<code>true</code>。<code>Trip(Exception ex)</code>方法会将Circuit-Breaker的状态，转换到<code>Open</code>的状态，并且记录引起状态变化的异常信息，以及发生异常的时间等信息。<code>LastException</code>属性以及<code>LastStateChangeDateUtc</code>属性就是用来获取状态转换的异常以及时间信息的。<code>Reset()</code>方法则会关闭Circuit-Breaker，<code>HalfOpen()</code>方法则是将Circuit-Breaker的状态置为<code>HalfOpen</code>。</p>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">class</span> CircuitBreaker
{
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">readonly</span> ICircuitBreakerStateStore stateStore =
        CircuitBreakerStateStoreFactory.GetCircuitBreakerStateStore();
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">readonly</span> <span class=""hljs-keyword"">object</span> halfOpenSyncObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">object</span> ();
    ...

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">bool</span> IsClosed { <span class=""hljs-keyword"">get</span> { <span class=""hljs-keyword"">return</span> stateStore.IsClosed; } }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">bool</span> IsOpen { <span class=""hljs-keyword"">get</span> { <span class=""hljs-keyword"">return</span> !IsClosed; } }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">ExecuteAction</span>(Action action)
    {
        ...
        <span class=""hljs-keyword"">if</span> (IsOpen)
        {
            <span class=""hljs-comment"">// The circuit breaker is Open.</span>
            ... (see code sample below <span class=""hljs-keyword"">for</span> details)
        }
        <span class=""hljs-comment"">// The circuit breaker is Closed, execute the action.</span>
        <span class=""hljs-keyword"">try</span>
        {
            action();
        }
        <span class=""hljs-keyword"">catch</span> (Exception ex)
        {
            <span class=""hljs-comment"">// If an exception still occurs here, simply</span>
            <span class=""hljs-comment"">// re-trip the breaker immediately.</span>
            <span class=""hljs-keyword"">this</span>.TrackException(ex);
            <span class=""hljs-comment"">// Throw the exception so that the caller can tell</span>
            <span class=""hljs-comment"">// the type of exception that was thrown.</span>
            <span class=""hljs-keyword"">throw</span>;
        }
    }
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">TrackException</span>(Exception ex)
    {
        <span class=""hljs-comment"">// For simplicity in this example, open the circuit breaker on the first exception.</span>
        <span class=""hljs-comment"">// In reality this would be more complex. A certain type of exception, such as one</span>
        <span class=""hljs-comment"">// that indicates a service is offline, might trip the circuit breaker immediately.</span>
        <span class=""hljs-comment"">// Alternatively it may count exceptions locally or across multiple instances and</span>
        <span class=""hljs-comment"">// use this value over time, or the exception/success ratio based on the exception</span>
        <span class=""hljs-comment"">// types, to open the circuit breaker.</span>
        <span class=""hljs-keyword"">this</span>.stateStore.Trip(ex);
    }
}</code></pre>

<p><code>CircuitBreaker</code>会创建一个实现<code>ICircuitBreakerStateStore</code>的实例来维护CircuitBreaker的状态。其中的<code>ExecuteAction(Action action)</code>方法会包含一个可能出错的方法。当这个方法运行的时候，会首先检查Circuit-Breaker的状态，如果是关闭状态，则会正常的执行远端服务的调用。如果这个操作失败掉了，则会通过<code>TrackException(Exception ex)</code>方法将<code>Circuit-Breaker</code>的状态置为打开状态。下面参考IsOpen中的代码：</p>



<pre class=""prettyprint""><code class="" hljs sql"">if (IsOpen)
{
    // The circuit breaker is Open. Check if the Open timeout has expired.
    // If it has, <span class=""hljs-operator""><span class=""hljs-keyword"">set</span> the state <span class=""hljs-keyword"">to</span> HalfOpen. Another approach may be <span class=""hljs-keyword"">to</span> simply
    // <span class=""hljs-keyword"">check</span> <span class=""hljs-keyword"">for</span> the HalfOpen state that had be <span class=""hljs-keyword"">set</span> <span class=""hljs-keyword"">by</span> <span class=""hljs-keyword"">some</span> other operation.
    <span class=""hljs-keyword"">if</span> (stateStore.LastStateChangedDateUtc + OpenToHalfOpenWaitTime &lt; DateTime.UtcNow)
    {
        // The <span class=""hljs-keyword"">Open</span> timeout has expired. Allow one operation <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">execute</span>. Note that, <span class=""hljs-keyword"">in</span>
        // this example, the circuit breaker <span class=""hljs-keyword"">is</span> simply <span class=""hljs-keyword"">set</span> <span class=""hljs-keyword"">to</span> HalfOpen <span class=""hljs-keyword"">after</span> being
        // <span class=""hljs-keyword"">in</span> the <span class=""hljs-keyword"">Open</span> state <span class=""hljs-keyword"">for</span> <span class=""hljs-keyword"">some</span> period <span class=""hljs-keyword"">of</span> <span class=""hljs-keyword"">time</span>. An alternative would be <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">set</span>
        // this <span class=""hljs-keyword"">using</span> <span class=""hljs-keyword"">some</span> other approach such <span class=""hljs-keyword"">as</span> a timer, test method, manually, <span class=""hljs-keyword"">and</span>
        // so <span class=""hljs-keyword"">on</span>, <span class=""hljs-keyword"">and</span> simply <span class=""hljs-keyword"">check</span> the state here <span class=""hljs-keyword"">to</span> determine how <span class=""hljs-keyword"">to</span> handle execution
        // <span class=""hljs-keyword"">of</span> the <span class=""hljs-keyword"">action</span>.
        // Limit the <span class=""hljs-keyword"">number</span> <span class=""hljs-keyword"">of</span> threads <span class=""hljs-keyword"">to</span> be executed <span class=""hljs-keyword"">when</span> the breaker <span class=""hljs-keyword"">is</span> HalfOpen.
        // An alternative would be <span class=""hljs-keyword"">to</span> use a more complex approach <span class=""hljs-keyword"">to</span> determine which
        // threads <span class=""hljs-keyword"">or</span> how many <span class=""hljs-keyword"">are</span> allowed <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">execute</span>, <span class=""hljs-keyword"">or</span> <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">execute</span> a simple test
        // method instead.
        bool lockTaken = <span class=""hljs-keyword"">false</span>;</span>
        try
        {
            Monitor.TryEnter(halfOpenSyncObject, ref lockTaken)
            if (lockTaken)
            {
                // <span class=""hljs-operator""><span class=""hljs-keyword"">Set</span> the circuit breaker state <span class=""hljs-keyword"">to</span> HalfOpen.
                stateStore.HalfOpen();</span>
                // Attempt the operation.
                action();
                // If this action succeeds, reset the state and allow other operations.
                // In reality, instead of immediately returning to the Open state, a counter
                // here would record the number of successful operations and return the
                // circuit breaker to the Open state only after a specified number succeed.
                this.stateStore.Reset();
                return;
            }
        }
        catch (Exception ex)
        {
            // If there is still an exception, trip the breaker again immediately.
            this.stateStore.Trip(ex);
            // Throw the exception so that the caller knows which exception occurred.
            throw;
        } 
        finally
        {
            if (lockTaken)
            {
                Monitor.Exit(halfOpenSyncObject);
            }
        }
    }
}</code></pre>

<p>上面的Circuit-Breaker的策略很简单，就是等待一定的时间，然后才进入<code>HalfOpen</code>状态，如果<code>action()</code>成功了，则重新恢复到<code>Close</code>状态。如果<code>action()</code>失败了则Circuit-Breaker重新进入到<code>Open</code>状态。</p>



<h2 id=""相关的其他模式"">相关的其他模式</h2>

<p>下面的模式跟Circuit-Breaker模式也是相关的：</p>

<ul>
<li><strong>Retry模式</strong>：重试模式属于Circuit-Breaker模式的一个附属。主要处理的问题是当访问远程服务不可用的时候，令应用如何来处理可以预期的短时间的错误。</li>
<li><strong>Health Endpoint Monitoring模式</strong>：Circuit-Breaker可以通过发送请求到远端的服务提供的特殊的服务来监控对面服务的的健康状态。该服务需要返回一些信息来展示其健康的状态。</li>
</ul></div>","架构,云设计模式",2016-12-07 11:59
7094,"背景
前一段时间，是通过百度云的BAE部署自己的Node应用的，不过随着应用的不断开发，BAE的限制不断制约了应用的使用。于是着手将应用迁移到阿里云的ECS上去。本文即是介绍了如何在ECS上搭建No...",fjnjxr,http://blog.csdn.net/fjnjxr/article/details/53502275,通过Github与PM2部署Node应用,,编程语言,2016-12-07 12:20
4823,"一直觉得自己的博客太简单了，今天想加点功能上去，说干就干，准备加个最常用的，天气预报功能。
看了几个例子，觉得也不是很难，网上找个接口就是了，不过，这百度的apistore里面。。。死活不让我获取手...",bestallen,http://blog.csdn.net/bestallen/article/details/53493851,Python Flask 天气查询,,编程语言,2016-12-07 12:22
7840,图片加载是Android开发中最最基础的功能，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库,s003603u,http://blog.csdn.net/s003603u/article/details/53436089,Android图片加载库的封装实战之路,"<div class=""markdown_views""><p></p><div class=""toc""><div class=""toc"">
<ul>
<li><a href=""#%E9%87%8D%E7%A3%85%E6%9B%B4%E6%96%B0-2017-02-16"">重磅更新  2017-02-16</a></li>
<li><a href=""#2017-05-09-%E4%BC%98%E5%8C%96%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD-%E6%9B%B4%E6%96%B0demo"">2017-05-09  优化圆形图片加载 更新demo</a><ul>
<li><a href=""#%E5%89%8D%E8%A8%80"">前言</a></li>
<li><a href=""#%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94"">主流图片加载库的对比</a><ul>
<li><a href=""#android-universal-image-loader"">Android-Universal-Image-Loader</a></li>
<li><a href=""#picasso"">Picasso</a></li>
<li><a href=""#glide"">Glide</a></li>
<li><a href=""#fresco"">Fresco</a></li>
</ul>
</li>
<li><a href=""#%E6%8C%89%E9%9C%80%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93"">按需选择图片加载库</a></li>
<li><a href=""#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%B0%81%E8%A3%85%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93"">如何更好地封装图片加载库</a><ul>
<li><a href=""#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%B0%81%E8%A3%85"">为什么要封装</a></li>
<li><a href=""#%E4%BD%BF%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%B0%81%E8%A3%85%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5"">使用策略模式封装图片加载策略</a></li>
</ul>
</li>
<li><a href=""#%E6%BA%90%E7%A0%81%E5%9C%B0%E5%9D%80"">源码地址</a></li>
<li><a href=""#%E9%83%A8%E5%88%86%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"">部分参考链接</a></li>
<li><a href=""#%E6%9B%B4%E6%96%B0"">更新</a><ul>
<li><a href=""#2016-12-09-ll-you-must-not-call-settag-on-a-view-glide-is-targeting"">2016-12-09 ll You must not call setTag on a view Glide is targeting</a></li>
<li><a href=""#2016-12-13-ll-%E6%B7%BB%E5%8A%A0loadgifwithpreparecall%E6%96%B9%E6%B3%95"">2016-12-13 ll  添加loadGifWithPrepareCall方法</a></li>
<li><a href=""#2016-12-26-ll-%E6%9B%B4%E6%96%B0loadgifwithprogress%E6%96%B9%E6%B3%95"">2016-12-26 ll  更新loadGifWithProgress方法  </a><ul>
<li><a href=""#2017-1-10-ll-%E7%BB%9F%E4%B8%80%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%BF%9B%E5%BA%A6%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%E4%B8%BAloadimagewithprogress%E5%BC%83%E7%94%A8%E5%B9%B6%E5%88%A0%E9%99%A4loadgifwithprogress%E6%96%B9%E6%B3%95"">2017-1-10 ll  统一加载图片进度回调方法为loadImageWithProgress弃用并删除loadGifWithProgress方法 </a></li>
</ul>
</li>
<li><a href=""#2016-12-26-ll-%E8%87%AA%E5%AE%9A%E4%B9%89glidemodule-%E5%B9%B6%E5%B0%86-glide%E4%B8%8Eokhttp3%E9%9B%86%E6%88%90"">2016-12-26 ll  自定义GlideModule 并将 Glide与okhttp3集成 </a></li>
<li><a href=""#2017-1-6-ll-gif%E5%B8%A7%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E5%85%A8-2017-1-10%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8Eps"">2017-1-6 ll  GIF帧显示不完全 2017-1-10补充说明PS</a><ul>
<li><a href=""#2017-1-10%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8Eps"">2017-1-10补充说明PS</a></li>
</ul>
</li>
<li><a href=""#2017-1-6-ll-you-cannot-start-a-load-for-a-destroyed-activity"">2017-1-6 ll  You cannot start a load for a destroyed activity</a></li>
<li><a href=""#2017-1-10-ll-%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E5%9B%BE%E7%89%87%E9%80%82%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98"">2017-1-10 ll  简单说说图片适配的问题</a></li>
<li><a href=""#2017-1-10-ll-%E6%B7%BB%E5%8A%A0saveimage%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD"">2017-1-10 ll  添加saveImage方法实现图片的本地自定义保存功能</a></li>
<li><a href=""#2017-03-08-ll-glide%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B0%81%E8%A3%85"">2017-03-08 ll   Glide圆形图片加载封装</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<h1 id=""重磅更新-2017-02-16""><font color=""#D91717"" size=""4"" face=""黑体"">重磅更新 || 2017-02-16</font></h1>

<p>使用ImageLoaderUtil实现一个真正意义的图集功能，持续完善和更新中</p>

<p><a href=""https://github.com/soulrelay/Gallery"">Gallery</a></p>

<p><a href=""https://github.com/soulrelay/Gallery"">Gallery</a></p>

<p><a href=""https://github.com/soulrelay/Gallery"">Gallery</a></p>

<p>重要的东西贴三遍！</p>

<h1 id=""2017-05-09-优化圆形图片加载-更新demo""><font color=""#D91717"" size=""4"" face=""黑体"">2017-05-09 || 优化圆形图片加载 更新demo</font></h1>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20170509120606770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvczAwMzYwM3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"" alt=""这里写图片描述"" title=""""></center><p></p>

<h2 id=""前言""><font color=""#C4573C"" size=""5"" face=""黑体"">前言</font></h2>

<blockquote>
  <ul>
  <li>图片加载是Android开发中最最基础的功能，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库</li>
  <li><a href=""http://blog.csdn.net/s003603u/article/details/53257859"">选取第三方SDK需要谨慎</a></li>
  <li><a href=""http://blog.csdn.net/s003603u/article/details/53257965"">二次封装</a></li>
  </ul>
</blockquote>

<p><font color=""#ff9866"" size=""4"" face=""黑体"">注意：所有改动更新会同步到</font><a href=""https://github.com/soulrelay/ImageLoaderUtil"">GitHub</a></p>



<h2 id=""主流图片加载库的对比""><font color=""#C4573C"" size=""5"" face=""黑体"">主流图片加载库的对比</font></h2>

<blockquote>
  <ul>
  <li>共同点 <br>
  <ul><li>使用简单：一句话实现图片的获取和显示</li>
  <li>可配置性高：可配置各种解码、缓存、下载机制</li>
  <li>自适应程度高：根据系统性能调整配置策略（如CPU核数决定最大并发数、内存决定内存缓存大小、网络状态变化调整最大并发数）</li>
  <li>多级缓存</li>
  <li>支持多种数据源</li>
  <li>支持多种Displayer</li>
  <li>兼容性好（可以配合okhttp等库进行使用）</li></ul></li>
  </ul>
</blockquote>



<h3 id=""android-universal-image-loader""><font color=""#ff9866"" size=""4"" face=""黑体"">Android-Universal-Image-Loader</font></h3>

<blockquote>
  <ul>
  <li>简介 <br>
  <ul><li>作者：nostra13</li>
  <li>面世时间：2011</li>
  <li>star数（截止到发稿）：14509</li>
  <li><a href=""https://github.com/nostra13/Android-Universal-Image-Loader"">https://github.com/nostra13/Android-Universal-Image-Loader</a></li></ul></li>
  <li>优点 <br>
  <ul><li>支持下载进度监听（ImageLoadingListener）</li>
  <li>可在View滚动中暂停图片加载（PauseOnScrollListener）</li>
  <li>默认实现多种内存缓存算法（最大最先删除，使用最少最先删除，最近最少使用，先进先删除，当然自己也可以配置缓存算法）</li></ul></li>
  <li>缺点 <br>
  <ul><li>从2015.11.27之后不再维护，项目中不建议使用</li></ul></li>
  </ul>
</blockquote>



<h3 id=""picasso""><font color=""#ff9866"" size=""4"" face=""黑体"">Picasso</font></h3>

<blockquote>
  <ul>
  <li>简介 <br>
  <ul><li>作者：JakeWharton（Square）</li>
  <li>面世时间：2012</li>
  <li>star数（截止到发稿）：12076</li>
  <li><a href=""https://github.com/square/picasso"">https://github.com/square/picasso</a></li></ul></li>
  <li>优点 <br>
  <ul><li>包较小（100k）</li>
  <li>取消不在视野范围内图片资源的加载</li>
  <li>使用最少的内存完成复杂的图片转换</li>
  <li>自动添加二级缓存</li>
  <li>任务调度优先级处理</li>
  <li>并发线程数根据网络类型调整</li>
  <li>图片的本地缓存交给同为Square出品的okhttp处理，控制图片的过期时间</li></ul></li>
  <li>缺点 <br>
  <ul><li>功能较为简单</li>
  <li>自身无实现“本地缓存”</li></ul></li>
  </ul>
</blockquote>



<h3 id=""glide""><font color=""#ff9866"" size=""4"" face=""黑体"">Glide</font></h3>

<blockquote>
  <ul>
  <li>简介 <br>
  <ul><li>作者：Sam sjudd (Google)</li>
  <li>面世时间：2013</li>
  <li>star数（截止到发稿）：12067</li>
  <li><a href=""https://github.com/bumptech/glide"">https://github.com/bumptech/glide</a></li></ul></li>
  <li>优点 <br>
  <ul><li>多种图片格式的缓存，适用于更多的内容表现形式（如Gif、WebP、缩略图、Video）</li>
  <li>生命周期集成（根据Activity或者Fragment的生命周期管理图片加载请求）</li>
  <li>高效处理Bitmap（bitmap的复用和主动回收，减少系统回收压力）</li>
  <li>高效的缓存策略，灵活（Picasso只会缓存原始尺寸的图片，Glide缓存的是多种规格），加载速度快且内存开销小（默认Bitmap格式的不同，使得内存开销是Picasso的一半）</li></ul></li>
  <li>缺点 <br>
  <ul><li>方法较多较复杂，因为相当于在Picasso上的改进，包较大（500k），影响不是很大</li></ul></li>
  </ul>
</blockquote>



<h3 id=""fresco""><font color=""#ff9866"" size=""4"" face=""黑体"">Fresco</font></h3>

<blockquote>
  <ul>
  <li>简介 <br>
  <ul><li>作者：Facebook</li>
  <li>面世时间：2015</li>
  <li>star数（截止到发稿）：11235</li>
  <li><a href=""https://github.com/facebook/fresco"">https://github.com/facebook/fresco</a></li></ul></li>
  <li>优点 <br>
  <ul><li>最大的优势在于5.0以下(最低2.3)的bitmap加载。在5.0以下系统，Fresco将图片放到一个特别的内存区域(Ashmem区)</li>
  <li>大大减少OOM（在更底层的Native层对OOM进行处理，图片将不再占用App的内存）</li>
  <li>适用于需要高性能加载大量图片的场景</li></ul></li>
  <li>缺点 <br>
  <ul><li>包较大（2~3M）</li>
  <li>用法复杂</li>
  <li>底层涉及c++领域，阅读源码深入学习难度大</li></ul></li>
  </ul>
</blockquote>



<h2 id=""按需选择图片加载库""><font color=""#C4573C"" size=""5"" face=""黑体"">按需选择图片加载库</font></h2>

<blockquote>
  <ul>
  <li>图片加载需要支持Gif，之前项目中使用的Android-Universal-Image-Loader不支持Gif且Android-Universal-Image-Loader已经停止维护，遂决定替换图片加载库</li>
  <li><p>分析完优缺点最终选择Glide的其它理由：</p>
  
  <ul><li>Glide是在Picasso的基础上进行改进的（支持Gif，内存开销小），虽然500k左右的包大小相对于Picasso较大，但是这个数量级的影响可以接受</li>
  <li>初衷是想一直维持图片的原始ImageView，而 Fresco需要在布局文件中将图片控件声明为库中自定义的SimpleDraweeView，如果切库还需要更改组件，代价会很高</li>
  <li>Google推荐（亲儿子），在Google很多开源项目中广泛使用</li></ul></li>
  <li><p>但不可避免的是，Glide在使用的过程中依然存在着许多坑需要我们去填！</p></li>
  </ul>
</blockquote>



<h2 id=""如何更好地封装图片加载库""><font color=""#C4573C"" size=""5"" face=""黑体"">如何更好地封装图片加载库</font></h2>



<h3 id=""为什么要封装""><font color=""#ff9866"" size=""4"" face=""黑体"">为什么要封装？</font></h3>

<p>先从现在面对的情形来看，项目中使用图片加载的地方都是使用的类似下面的语句</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">ImageLoader<span class=""hljs-preprocessor"">.getInstance</span>()<span class=""hljs-preprocessor"">.displayImage</span>(imageUrl, imageView，options)<span class=""hljs-comment"">;</span></code></pre>

<p>然而现在ImageLoader已经停止维护且已经无法满足项目需求，我们需要替换，这时你会发现如果换库的话，所有涉及到的地方都要修改（Android-Universal-Image-Loader已经和图片加载的业务逻辑严重地耦合在一起了），工作量可见一斑，这就是不封装在切库时面临的窘境！ <br>
那怎么解决那？ <br>
计算机史上有个万能的解决方案就是，如果原有层面解决不了问题，那么就请再加一层！</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/**
 * Created by soulrelay on 2016/10/11 13:42.
 * Class Note:
 * use this class to load image,single instance
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">ImageLoaderUtil</span> {</span>

    <span class=""hljs-comment"">//图片默认加载类型 以后有可能有多种类型</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> PIC_DEFAULT_TYPE = <span class=""hljs-number"">0</span>;

    <span class=""hljs-comment"">//图片默认加载策略 以后有可能有多种图片加载策略</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> LOAD_STRATEGY_DEFAULT = <span class=""hljs-number"">0</span>;

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">static</span> ImageLoaderUtil mInstance;

    <span class=""hljs-keyword"">private</span> BaseImageLoaderStrategy mStrategy;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">ImageLoaderUtil</span>() {
        mStrategy = <span class=""hljs-keyword"">new</span> GlideImageLoaderStrategy();
    }

    <span class=""hljs-comment"">//单例模式，节省资源</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> ImageLoaderUtil <span class=""hljs-title"">getInstance</span>() {
        <span class=""hljs-keyword"">if</span> (mInstance == <span class=""hljs-keyword"">null</span>) {
            <span class=""hljs-keyword"">synchronized</span> (ImageLoaderUtil.class) {
                <span class=""hljs-keyword"">if</span> (mInstance == <span class=""hljs-keyword"">null</span>) {
                    mInstance = <span class=""hljs-keyword"">new</span> ImageLoaderUtil();
                    <span class=""hljs-keyword"">return</span> mInstance;
                }
            }
        }
        <span class=""hljs-keyword"">return</span> mInstance;
    }

    <span class=""hljs-javadoc"">/**
     * 统一使用App context
     * 可能带来的问题：http://stackoverflow.com/questions/31964737/glide-image-loading-with-application-context
     *
     *<span class=""hljs-javadoctag""> @param</span> url
     *<span class=""hljs-javadoctag""> @param</span> placeholder
     *<span class=""hljs-javadoctag""> @param</span> imageView
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImage</span>(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        mStrategy.loadImage(imageView.getContext(), url, placeholder, imageView);
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifImage</span>(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        mStrategy.loadGifImage(url, placeholder, imageView);
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImage</span>(String url, ImageView imageView) {
        mStrategy.loadImage(url, imageView);
    }

  <span class=""hljs-javadoc"">/**
     * 展示图片加载进度
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImageWithProgress</span>(String url, ImageView imageView, ProgressLoadListener listener) {
        mStrategy.loadImageWithProgress(url,imageView,listener);
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifWithProgress</span>(String url, ImageView imageView, ProgressLoadListener listener) {
        mStrategy.loadGifWithProgress(url,imageView,listener);
    }

    <span class=""hljs-javadoc"">/**
     * 策略模式的注入操作
     *
     *<span class=""hljs-javadoctag""> @param</span> strategy
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setLoadImgStrategy</span>(BaseImageLoaderStrategy strategy) {
        mStrategy = strategy;
    }

    <span class=""hljs-javadoc"">/**
     * 清除图片磁盘缓存
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">clearImageDiskCache</span>(<span class=""hljs-keyword"">final</span> Context context) {
        mStrategy.clearImageDiskCache(context);
    }

    <span class=""hljs-javadoc"">/**
     * 清除图片内存缓存
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">clearImageMemoryCache</span>(Context context) {
        mStrategy.clearImageMemoryCache(context);
    }

    <span class=""hljs-javadoc"">/**
     * 根据不同的内存状态，来响应不同的内存释放策略
     *
     *<span class=""hljs-javadoctag""> @param</span> context
     *<span class=""hljs-javadoctag""> @param</span> level
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">trimMemory</span>(Context context, <span class=""hljs-keyword"">int</span> level) {
        mStrategy.trimMemory(context, level);
    }

    <span class=""hljs-javadoc"">/**
     * 清除图片所有缓存
     */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">clearImageAllCache</span>(Context context) {
        clearImageDiskCache(context.getApplicationContext());
        clearImageMemoryCache(context.getApplicationContext());
    }

    <span class=""hljs-javadoc"">/**
     * 获取缓存大小
     *
     *<span class=""hljs-javadoctag""> @return</span> CacheSize
     */</span>
    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getCacheSize</span>(Context context) {
        <span class=""hljs-keyword"">return</span> mStrategy.getCacheSize(context);
    }


}</code></pre>

<p>所有需要图片显示的地方使用如下方法进行调用：</p>

<blockquote>
  <ul>
  <li>入口唯一，所有图片加载都在ImageLoaderUtil这一个地方统一管理，使用了<a href=""http://blog.csdn.net/s003603u/article/details/51982140"">单例模式</a>(据说单元素的枚举类型已经成为实现Singleton的最佳方法，你可以试试 )，</li>
  <li>高效地封装减少了切库(只需要切换图片加载策略)带来的代价，默认采用GlideImageLoaderStrategy</li>
  </ul>
</blockquote>

<p>总结：外部表现一致，内部灵活处理原则。</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/**
 * 图片加载库的封装演示案例
 * Created by soulrelay on 2016/12/11 19:18
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">MainActivity</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">AppCompatActivity</span> {</span>

    <span class=""hljs-annotation"">@BindView</span>(R.id.iv_normal)
    ImageView ivNormal;
    <span class=""hljs-annotation"">@BindView</span>(R.id.iv_gif)
    ImageView ivGif;
    <span class=""hljs-annotation"">@BindView</span>(R.id.iv_gif1)
    ImageView ivGif1;

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onCreate</span>(Bundle savedInstanceState) {
        <span class=""hljs-keyword"">super</span>.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(<span class=""hljs-keyword"">this</span>);
        initView();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">initView</span>() {
        ImageLoaderUtil.getInstance().loadImage(<span class=""hljs-string"">""http://image.sports.baofeng.com/25a3dbb0c99c5e48e52e60941ed230be""</span>, R.drawable.bg_default_video_common_small, ivNormal);
        ImageLoaderUtil.getInstance().loadImage(<span class=""hljs-string"">""http://image.sports.baofeng.com/19ce5d6ac3b4fff255196f200b1d3079""</span>, R.drawable.bg_default_video_common_small, ivGif);
        ImageLoaderUtil.getInstance().loadGifImage(<span class=""hljs-string"">""http://image.sports.baofeng.com/19ce5d6ac3b4fff255196f200b1d3079""</span>, R.drawable.bg_default_video_common_small, ivGif1);

    }

}</code></pre>

<p>效果图如下所示： <br>
<img src=""http://img.blog.csdn.net/20161202172529289"" alt=""这里写图片描述"" title=""""></p>



<h3 id=""使用策略模式封装图片加载策略""><font color=""#ff9866"" size=""4"" face=""黑体"">使用策略模式封装图片加载策略</font></h3>

<p>如果你对策略模式不是很熟，请先参考<a href=""http://blog.csdn.net/s003603u/article/details/52033391"">策略模式和状态模式</a> <br>
首先我们需要抽象出一个图片加载的基础接口BaseImageLoaderStrategy  <br>
基本功能主要包括</p>

<blockquote>
  <ul>
  <li>正常加载图片</li>
  <li>针对于GIF图片的特殊加载</li>
  <li>加载图片的进度回调</li>
  <li>清除缓存</li>
  <li>获取缓存大小等</li>
  <li>其它特殊需求自己封装，最好不要破坏策略模式的整体结构</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/**
 * Created by soulrelay on 2016/10/11.
 * Class Note:
 * abstract class/interface defined to load image
 * (Strategy Pattern used here)
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">BaseImageLoaderStrategy</span> {</span>
    <span class=""hljs-comment"">//无占位图</span>
    <span class=""hljs-keyword"">void</span> loadImage(String url, ImageView imageView);

    <span class=""hljs-keyword"">void</span> loadImage(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView);

    <span class=""hljs-keyword"">void</span> loadImage(Context context, String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView);

    <span class=""hljs-keyword"">void</span> loadGifImage(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView);

    <span class=""hljs-keyword"">void</span> loadImageWithProgress(String url, ImageView imageView, ProgressLoadListener listener);

    <span class=""hljs-keyword"">void</span> loadGifWithProgress(String url, ImageView imageView, ProgressLoadListener listener);

    <span class=""hljs-comment"">//清除硬盘缓存</span>
    <span class=""hljs-keyword"">void</span> clearImageDiskCache(<span class=""hljs-keyword"">final</span> Context context);
    <span class=""hljs-comment"">//清除内存缓存</span>
    <span class=""hljs-keyword"">void</span> clearImageMemoryCache(Context context);
    <span class=""hljs-comment"">//根据不同的内存状态，来响应不同的内存释放策略</span>
    <span class=""hljs-keyword"">void</span> trimMemory(Context context, <span class=""hljs-keyword"">int</span> level);
    <span class=""hljs-comment"">//获取缓存大小</span>
    String getCacheSize(Context context);

}</code></pre>

<p>需要说明的一点是：</p>

<blockquote>
  <ul>
  <li>当封装的方法参数比较少时可以按照上述方式进行抽象，如果需要传递的参数较多，可以考虑使用建造者模式<a href=""http://blog.csdn.net/s003603u/article/details/51967809"">建造者模式</a></li>
  <li>例如封装一个ImageLoaderConfiguration，包含如下参数等等，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示 <br>
  <ul><li>type 图片加载的类型（大图、小图、中图）</li>
  <li>url 需要解析的url</li>
  <li>placeHolder 当没有成功加载的时候显示的图片</li>
  <li>imgView ImageView的实例</li>
  <li>loadStrategy 加载策略</li></ul></li>
  <li>当然这里我没有使用建造模式，考虑到目前使用的对象还不算复杂（传参比较简单），而且如果使用建造者模式有可能每次都要new一个新的对象实例，虽然开销可以接受</li>
  <li>使用ImageLoaderUtil的过程中，注意内存泄露的问题（静态单例的生命周期与App一样，当一个单例的对象长久不用时，不会被垃圾收集机制回收）</li>
  </ul>
</blockquote>

<p>然后基于每个图片库的各自方式来进行相应策略的封装，需要使用哪种策略，只需要通过ImageLoaderUtil的setLoadImgStrategy(BaseImageLoaderStrategy strategy)方法将相应的策略注入，相关类图关系如下所示：</p>

<p><img src=""http://img.blog.csdn.net/20161204205952522"" alt=""这里写图片描述"" title=""""></p>

<p>不同的图片加载库实现不同的图片加载策略 <br>
这里只是给出Glide的图片加载策略类GlideImageLoaderStrategy作为参考</p>

<blockquote>
  <ul>
  <li>Glide依赖v4包，且需要配置android.permission.INTERNET和android.permission.WRITE_EXTERNAL_STORAGE（忘记配置权限，图片加载不出来，还看不出什么异常）</li>
  <li>其中部分方法使用到了RequestListener的回调（这里是因为项目中的一些特殊需求而添加，如统计图片首次加载时长来测试一下图片cdn服务器的速度等）</li>
  <li>在使用Glide的过程中遇到了一些问题，部分已经在注释中说明</li>
  <li>之所以针对gif单独封装，是因为在使用的过程中发现，当在列表中加载大量gif会有OOM的问题，所以通过asGif进行特殊标明，即使这样也会出现类似问题，同时暂时通过skipMemoryCache(true)跳过内存缓存，之后有更好的办法会继续补充，各位看官如有良策，希望可以不吝赐教</li>
  <li>Glide本身不提供图片的progress回调，所以关于进度回调的解决方案参照的是 <br>
  <a href=""https://github.com/shangmingchao/ProgressGlide"">ProgressGlide</a>，并做了些许改动集成到项目中</li>
  <li>期间发现了一个很好的问题<a href=""https://www.zhihu.com/question/37804956"">Android的App中线程池的使用，具体使用多少个线程池？</a>，其中一个答主的关于图片加载库线程池策略的分析很好，值得体会，简单摘录如下： <br>
  <ul><li>UIL的线程池处理非常简单粗暴，没有根据CPU数量来选择，也没有根据网络状况的变化进行调整;</li>
  <li>Picasso的线程池会根据网络状况的变化进行调整，在Wifi下线程数为4,而4G下线程数为3, 3G下为2， 2G下为1，默认状况为3；</li>
  <li>Glide加载缓存未命中的线程池会根据根据CPU的数量和Java虚拟机中可用的处理器数量来选择合适的线程数，但是最多不超过4;而加载缓存命中的图片的线程池默认大小为1.</li></ul></li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/**
 * Created by soulrelay on 2016/10/11 13:48.
 * Class Note:
 * using {@link Glide} to load image
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">GlideImageLoaderStrategy</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">BaseImageLoaderStrategy</span> {</span>

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImage</span>(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        loadNormal(imageView.getContext(), url, placeholder, imageView);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImage</span>(Context context, String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        loadNormal(context, url, placeholder, imageView);
    }

    <span class=""hljs-javadoc"">/**
     * 无holder的gif加载
     *
     *<span class=""hljs-javadoctag""> @param</span> url
     *<span class=""hljs-javadoctag""> @param</span> imageView
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImage</span>(String url, ImageView imageView) {
        Glide.with(imageView.getContext()).load(url).dontAnimate()
                .placeholder(imageView.getDrawable())
                .diskCacheStrategy(DiskCacheStrategy.SOURCE)
                .into(imageView);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifImage</span>(String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        loadGif(imageView.getContext(), url, placeholder, imageView);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImageWithProgress</span>(String url, <span class=""hljs-keyword"">final</span> ImageView imageView, <span class=""hljs-keyword"">final</span> ProgressLoadListener listener) {
        Glide.with(imageView.getContext()).using(<span class=""hljs-keyword"">new</span> ProgressModelLoader(<span class=""hljs-keyword"">new</span> ProgressUIListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">update</span>(<span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> bytesRead, <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> contentLength) {
                imageView.post(<span class=""hljs-keyword"">new</span> Runnable() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">run</span>() {
                        listener.update(bytesRead, contentLength);
                    }
                });
            }
        })).load(url).asBitmap().dontAnimate().
                listener(<span class=""hljs-keyword"">new</span> RequestListener&lt;Object, Bitmap&gt;() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onException</span>(Exception e, Object model, Target&lt;Bitmap&gt; target, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        listener.onException();
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }

                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onResourceReady</span>(Bitmap resource, Object model, Target&lt;Bitmap&gt; target, <span class=""hljs-keyword"">boolean</span> isFromMemoryCache, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        listener.onResourceReady();
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }
                }).into(imageView);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifWithProgress</span>(String url, <span class=""hljs-keyword"">final</span> ImageView imageView, <span class=""hljs-keyword"">final</span> ProgressLoadListener listener) {
        Glide.with(imageView.getContext()).using(<span class=""hljs-keyword"">new</span> ProgressModelLoader(<span class=""hljs-keyword"">new</span> ProgressUIListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">update</span>(<span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> bytesRead, <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> contentLength) {
                imageView.post(<span class=""hljs-keyword"">new</span> Runnable() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">run</span>() {
                        listener.update(bytesRead, contentLength);
                    }
                });
            }
        })).load(url).asGif().skipMemoryCache(<span class=""hljs-keyword"">true</span>).dontAnimate().
                listener(<span class=""hljs-keyword"">new</span> RequestListener&lt;String, GifDrawable&gt;() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onException</span>(Exception e, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        listener.onException();
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }

                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onResourceReady</span>(GifDrawable resource, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFromMemoryCache, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        listener.onResourceReady();
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }
                }).into(imageView);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">clearImageDiskCache</span>(<span class=""hljs-keyword"">final</span> Context context) {
        <span class=""hljs-keyword"">try</span> {
            <span class=""hljs-keyword"">if</span> (Looper.myLooper() == Looper.getMainLooper()) {
                <span class=""hljs-keyword"">new</span> Thread(<span class=""hljs-keyword"">new</span> Runnable() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">run</span>() {
                        Glide.get(context.getApplicationContext()).clearDiskCache();
                    }
                }).start();
            } <span class=""hljs-keyword"">else</span> {
                Glide.get(context.getApplicationContext()).clearDiskCache();
            }
        } <span class=""hljs-keyword"">catch</span> (Exception e) {
            e.printStackTrace();
        }
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">clearImageMemoryCache</span>(Context context) {
        <span class=""hljs-keyword"">try</span> {
            <span class=""hljs-keyword"">if</span> (Looper.myLooper() == Looper.getMainLooper()) { <span class=""hljs-comment"">//只能在主线程执行</span>
                Glide.get(context.getApplicationContext()).clearMemory();
            }
        } <span class=""hljs-keyword"">catch</span> (Exception e) {
            e.printStackTrace();
        }
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">trimMemory</span>(Context context, <span class=""hljs-keyword"">int</span> level) {
        Glide.get(context).trimMemory(level);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getCacheSize</span>(Context context) {
        <span class=""hljs-keyword"">try</span> {
            <span class=""hljs-keyword"">return</span> CommonUtils.getFormatSize(CommonUtils.getFolderSize(Glide.getPhotoCacheDir(context.getApplicationContext())));
        } <span class=""hljs-keyword"">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""""</span>;
    }

    <span class=""hljs-javadoc"">/**
     * load image with Glide
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadNormal</span>(<span class=""hljs-keyword"">final</span> Context ctx, <span class=""hljs-keyword"">final</span> String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        <span class=""hljs-javadoc"">/**
         *  为其添加缓存策略,其中缓存策略可以为:Source及None,None及为不缓存,Source缓存原型.如果为ALL和Result就不行.然后几个issue的连接:
         https://github.com/bumptech/glide/issues/513
         https://github.com/bumptech/glide/issues/281
         https://github.com/bumptech/glide/issues/600
         modified by xuqiang
         */</span>

        <span class=""hljs-comment"">//去掉动画 解决与CircleImageView冲突的问题 这个只是其中的一个解决方案</span>
        <span class=""hljs-comment"">//使用SOURCE 图片load结束再显示而不是先显示缩略图再显示最终的图片（导致图片大小不一致变化）</span>
        <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">long</span> startTime = System.currentTimeMillis();
        Glide.with(ctx).load(url).dontAnimate()
                .placeholder(placeholder)
                .diskCacheStrategy(DiskCacheStrategy.SOURCE).listener(<span class=""hljs-keyword"">new</span> RequestListener&lt;String, GlideDrawable&gt;() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onException</span>(Exception e, String model, Target&lt;GlideDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onResourceReady</span>(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFromMemoryCache, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }
        })
                .into(imageView);
    }

    <span class=""hljs-javadoc"">/**
     * load image with Glide
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGif</span>(<span class=""hljs-keyword"">final</span> Context ctx, String url, <span class=""hljs-keyword"">int</span> placeholder, ImageView imageView) {
        <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">long</span> startTime = System.currentTimeMillis();
        Glide.with(ctx).load(url).asGif().dontAnimate()
                .placeholder(placeholder).skipMemoryCache(<span class=""hljs-keyword"">true</span>)
                .diskCacheStrategy(DiskCacheStrategy.SOURCE).listener(<span class=""hljs-keyword"">new</span> RequestListener&lt;String, GifDrawable&gt;() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onException</span>(Exception e, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onResourceReady</span>(GifDrawable resource, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFromMemoryCache, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }
        })
                .into(imageView);
    }

}
</code></pre>



<h2 id=""源码地址""><font color=""#C4573C"" size=""5"" face=""黑体"">源码地址</font></h2>

<p><a href=""https://github.com/soulrelay/ImageLoaderUtil"">ImageLoaderUtil</a></p>



<h2 id=""部分参考链接""><font color=""#C4573C"" size=""5"" face=""黑体"">部分参考链接</font></h2>

<p><a href=""http://www.jianshu.com/p/97994c9693f9"">http://www.jianshu.com/p/97994c9693f9</a> <br>
<a href=""https://www.zhihu.com/question/37804956"">https://www.zhihu.com/question/37804956</a> <br>
<a href=""http://www.jianshu.com/p/e26130a93289"">http://www.jianshu.com/p/e26130a93289</a> <br>
<a href=""http://www.cnblogs.com/android-blogs/p/5737611.html"">http://www.cnblogs.com/android-blogs/p/5737611.html</a></p>



<h2 id=""更新""><font color=""#C4573C"" size=""5"" face=""黑体"">更新</font></h2>



<h3 id=""2016-12-09-ll-you-must-not-call-settag-on-a-view-glide-is-targeting""><font color=""#ff9866"" size=""4"" face=""黑体"">2016-12-09 ll You must not call setTag() on a view Glide is targeting</font></h3>

<p>项目中在使用Glide图片加载框架时遇到该错误 <br>
报错原因大致是因为Glide加载的iamgeView调用了setTag()方法导致的错误，因为Glide已经默认为ImageView设置的Tag</p>

<p>相关解决方案已经在Glide 3.6.0<a href=""https://github.com/bumptech/glide/issues/370"">（issue #370）</a>被引进，实测可行 <br>
在AndroidManifest.xml中加入</p>



<pre class=""prettyprint""><code class="" hljs applescript"">&lt;<span class=""hljs-type"">application</span>
        android:<span class=""hljs-property"">name</span>=<span class=""hljs-string"">"".App""</span>&gt;</code></pre>

<p>然后在App中添加如下代码：</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">App</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Application</span> {</span>
    <span class=""hljs-annotation"">@Override</span> <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onCreate</span>() {
        <span class=""hljs-keyword"">super</span>.onCreate();
        ViewTarget.setTagId(R.id.glide_tag);
    }
}</code></pre>

<p>在src/main/values/ids.xml添加如下代码：</p>



<pre class=""prettyprint""><code class="" hljs xml""><span class=""hljs-tag"">&lt;<span class=""hljs-title"">resources</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">item</span> <span class=""hljs-attribute"">type</span>=<span class=""hljs-value"">""id""</span> <span class=""hljs-attribute"">name</span>=<span class=""hljs-value"">""glide_tag""</span> /&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">resources</span>&gt;</span></code></pre>



<h3 id=""2016-12-13-ll-添加loadgifwithpreparecall方法""><font color=""#ff9866"" size=""4"" face=""黑体"">2016-12-13 ll  添加loadGifWithPrepareCall方法</font></h3>

<p>2016.12.13</p>

<p>只想知道图片是否准备完毕（包括来自网络或者sdcard），区别于loadImageWithProgress和loadGifWithProgress的进度回调</p>

<p>Tips：使用Glide加载图片注意ImageView的Scaletype的设置</p>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">interface</span> BaseImageLoaderStrategy {
    <span class=""hljs-keyword"">void</span> loadGifWithPrepareCall(String url, ImageView imageView, SourceReadyListener listener);
}</code></pre>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">GlideImageLoaderStrategy</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">BaseImageLoaderStrategy</span> {</span>

       <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifWithPrepareCall</span>(String url, ImageView imageView, <span class=""hljs-keyword"">final</span> SourceReadyListener listener) {
        Glide.with(imageView.getContext()).load(url).asGif().dontAnimate()
                .skipMemoryCache(<span class=""hljs-keyword"">true</span>)
                .diskCacheStrategy(DiskCacheStrategy.SOURCE).
                listener(<span class=""hljs-keyword"">new</span> RequestListener&lt;String, GifDrawable&gt;() {
                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onException</span>(Exception e, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }

                    <span class=""hljs-annotation"">@Override</span>
                    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">boolean</span> <span class=""hljs-title"">onResourceReady</span>(GifDrawable resource, String model, Target&lt;GifDrawable&gt; target, <span class=""hljs-keyword"">boolean</span> isFromMemoryCache, <span class=""hljs-keyword"">boolean</span> isFirstResource) {
                        listener.onResourceReady(resource.getIntrinsicWidth(),resource.getIntrinsicHeight());
                        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                    }
                }).into(imageView);
    }
}
</code></pre>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">class</span> ImageLoaderUtil {
 <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadGifWithPrepareCall</span>(String url, ImageView imageView, SourceReadyListener listener) {
        mStrategy.loadGifWithPrepareCall(url,imageView,listener);
    }
}</code></pre>



<h3 id=""2016-12-26-ll-更新loadgifwithprogress方法""><font color=""#ff9866"" size=""4"" face=""黑体"">2016-12-26 ll  更新loadGifWithProgress方法  </font></h3>



<h4 id=""2017-1-10-ll-统一加载图片进度回调方法为loadimagewithprogress弃用并删除loadgifwithprogress方法""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-1-10 ll  统一加载图片进度回调方法为loadImageWithProgress，弃用并删除loadGifWithProgress方法 </font></h4>

<p>具体细节查看GitHub最新代码</p>



<h3 id=""2016-12-26-ll-自定义glidemodule-并将-glide与okhttp3集成""><font color=""#ff9866"" size=""3"" face=""黑体"">2016-12-26 ll  自定义GlideModule 并将 Glide与okhttp3集成 </font></h3>

<p>1.自定义一个GlideModule </p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/**
 * DES：自定义一个GlideModule
 * &lt;p&gt;
 * GlideModule 是一个抽象方法，全局改变 Glide 行为的一个方式，
 * 通过全局GlideModule 配置Glide，用GlideBuilder设置选项，用Glide注册ModelLoader等。
 * &lt;p&gt;
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">MyGlideModule</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">GlideModule</span> {</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">applyOptions</span>(Context context, GlideBuilder builder) {
        <span class=""hljs-comment"">// Apply options to the builder here.</span>
        <span class=""hljs-keyword"">int</span> maxMemory = (<span class=""hljs-keyword"">int</span>) Runtime.getRuntime().maxMemory();<span class=""hljs-comment"">//获取系统分配给应用的总内存大小</span>
        <span class=""hljs-keyword"">int</span> memoryCacheSize = maxMemory / <span class=""hljs-number"">8</span>;<span class=""hljs-comment"">//设置图片内存缓存占用八分之一</span>
        <span class=""hljs-comment"">//设置内存缓存大小</span>
        builder.setMemoryCache(<span class=""hljs-keyword"">new</span> LruResourceCache(memoryCacheSize));
        builder.setBitmapPool(<span class=""hljs-keyword"">new</span> LruBitmapPool(memoryCacheSize));
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">registerComponents</span>(Context context, Glide glide) {
        <span class=""hljs-comment"">// register ModelLoaders here.</span>
    }
}</code></pre>

<p>2.AndroidManifest.xml注册</p>



<pre class=""prettyprint""><code class="" hljs xml""><span class=""hljs-tag"">&lt;<span class=""hljs-title"">manifest</span> <span class=""hljs-attribute"">...</span>&gt;</span>
    <span class=""hljs-comment"">&lt;!-- ... permissions --&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">application</span> <span class=""hljs-attribute"">...</span>&gt;</span>
             <span class=""hljs-comment"">&lt;!-- 自定义GlideModule --&gt;</span>
        <span class=""hljs-tag"">&lt;<span class=""hljs-title"">meta-data
</span>            <span class=""hljs-attribute"">android:name</span>=<span class=""hljs-value"">""com.baofeng.soulrelay.utils.imageloader.MyGlideModule""</span>
            <span class=""hljs-attribute"">android:value</span>=<span class=""hljs-value"">""GlideModule""</span> /&gt;</span>
        <span class=""hljs-comment"">&lt;!-- 自定义GlideModule --&gt;</span>
        <span class=""hljs-comment"">&lt;!-- ... activities and other components --&gt;</span>
    <span class=""hljs-tag"">&lt;/<span class=""hljs-title"">application</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">manifest</span>&gt;</span></code></pre>

<p>3、 Glide与OkHttp3集成</p>



<pre class=""prettyprint""><code class="" hljs nginx"">   <span class=""hljs-title"">compile</span> <span class=""hljs-string"">'com.squareup.okhttp3:okhttp:3.4.2'</span>
   compile <span class=""hljs-string"">'com.github.bumptech.glide:okhttp3-integration:1.4.0<span class=""hljs-variable"">@aar</span>'</span></code></pre>

<p>4、添加混淆处理</p>



<pre class=""prettyprint""><code class="" hljs avrasm""><span class=""hljs-preprocessor"">#--------------------Glide-----------------------#</span>
-keep public class * implements <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.module</span><span class=""hljs-preprocessor"">.GlideModule</span>
-keep public enum <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.load</span><span class=""hljs-preprocessor"">.resource</span><span class=""hljs-preprocessor"">.bitmap</span><span class=""hljs-preprocessor"">.ImageHeaderParser</span>$** {
  **[] $VALUES<span class=""hljs-comment"">;</span>
  public *<span class=""hljs-comment"">;</span>
}

-keepnames class <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.baofeng</span><span class=""hljs-preprocessor"">.soulrelay</span><span class=""hljs-preprocessor"">.utils</span><span class=""hljs-preprocessor"">.imageloader</span><span class=""hljs-preprocessor"">.MyGlideModule</span>
<span class=""hljs-preprocessor""># or more generally:</span>
-keep public class * implements <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.module</span><span class=""hljs-preprocessor"">.GlideModule</span>
-keep class <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.integration</span><span class=""hljs-preprocessor"">.okhttp</span>3<span class=""hljs-preprocessor"">.OkHttpGlideModule</span>

<span class=""hljs-preprocessor"">#--------------------Glide-----------------------#</span></code></pre>



<h3 id=""2017-1-6-ll-gif帧显示不完全-2017-1-10补充说明ps""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-1-6 ll  GIF帧显示不完全 2017-1-10补充说明PS</font></h3>

<p>相关问题在<a href=""https://github.com/bumptech/glide/issues/1649"">issues1649</a>中被提到和解决（目前glide:3.7.0的确存在这个问题） <br>
具体解决方法是： <br>
 glide:3.8.0-SNAPSHOT修复了关于GIF展示的一些bug，实测可用 <br>
 Gradle配置修改如下：</p>

<blockquote>
  <ul>
  <li>Add the snapshot repo to your list of repositories:</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs matlab"">repositories <span class=""hljs-cell"">{
  jcenter()
  maven {
    name <span class=""hljs-string"">'glide-snapshot'</span>
    url <span class=""hljs-string"">'http://oss.sonatype.org/content/repositories/snapshots'</span>
  }</span>
}</code></pre>

<blockquote>
  <ul>
  <li>And then change your dependencies to the v3 snapshot version:</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs matlab"">dependencies <span class=""hljs-cell"">{
  compile <span class=""hljs-string"">'com.github.bumptech.glide:glide:3.8.0-SNAPSHOT'</span>
  compile <span class=""hljs-string"">'com.github.bumptech.glide:okhttp-integration:1.5.0-SNAPSHOT'</span>
}</span></code></pre>



<h4 id=""2017-1-10补充说明ps""><font color=""#ff9866"" size=""3"" face=""黑体"">2017-1-10补充说明PS</font></h4>

<p>PS：提供一个gif图 帧提取工具<a href=""http://download.csdn.net/detail/s003603u/9733492"">GIFFrame.exe</a> <br>
据我分析，那些没有显示完整的GIF图片，里面的部分帧图片本身就不是完整的，但是之前的Glide并没有做很好的处理，所以显示效果有缺陷，当然最新的3.8.0-SNAPSHOT解决了这个问题，但是在显示的时候仍有瑕疵（有一些重叠，当然我觉得这也跟gif图的做工有关）</p>



<h3 id=""2017-1-6-ll-you-cannot-start-a-load-for-a-destroyed-activity""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-1-6 ll  You cannot start a load for a destroyed activity</font></h3>

<p>完整异常信息：</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">FATAL EXCEPTION: main
<span class=""hljs-label"">Process:</span> <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.sports</span><span class=""hljs-preprocessor"">.baofeng</span>, PID: <span class=""hljs-number"">9170</span>
<span class=""hljs-label"">java.lang.IllegalArgumentException:</span> You cannot start a load for a destroyed activity
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.d</span><span class=""hljs-preprocessor"">.k</span><span class=""hljs-preprocessor"">.b</span>(SourceFile:<span class=""hljs-number"">134</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.d</span><span class=""hljs-preprocessor"">.k</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">102</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.d</span><span class=""hljs-preprocessor"">.k</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">87</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.bumptech</span><span class=""hljs-preprocessor"">.glide</span><span class=""hljs-preprocessor"">.i</span><span class=""hljs-preprocessor"">.c</span>(SourceFile:<span class=""hljs-number"">629</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.storm</span><span class=""hljs-preprocessor"">.durian</span><span class=""hljs-preprocessor"">.common</span><span class=""hljs-preprocessor"">.utils</span><span class=""hljs-preprocessor"">.imageloader</span><span class=""hljs-preprocessor"">.b</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">1194</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.storm</span><span class=""hljs-preprocessor"">.durian</span><span class=""hljs-preprocessor"">.common</span><span class=""hljs-preprocessor"">.utils</span><span class=""hljs-preprocessor"">.imageloader</span><span class=""hljs-preprocessor"">.c</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">52</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.sports</span><span class=""hljs-preprocessor"">.baofeng</span><span class=""hljs-preprocessor"">.specialtopic</span><span class=""hljs-preprocessor"">.SpecialTopicDetailFixActivity</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">311</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.sports</span><span class=""hljs-preprocessor"">.baofeng</span><span class=""hljs-preprocessor"">.specialtopic</span><span class=""hljs-preprocessor"">.SpecialTopicDetailFixActivity</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">1347</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.sports</span><span class=""hljs-preprocessor"">.baofeng</span><span class=""hljs-preprocessor"">.specialtopic</span><span class=""hljs-preprocessor"">.d</span><span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">1052</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.sports</span><span class=""hljs-preprocessor"">.baofeng</span><span class=""hljs-preprocessor"">.specialtopic</span><span class=""hljs-preprocessor"">.c</span>$1<span class=""hljs-preprocessor"">.a</span>(SourceFile:<span class=""hljs-number"">1064</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.storm</span><span class=""hljs-preprocessor"">.durian</span><span class=""hljs-preprocessor"">.common</span><span class=""hljs-preprocessor"">.b</span><span class=""hljs-preprocessor"">.b</span>$1<span class=""hljs-preprocessor"">.onPostExecute</span>(SourceFile:<span class=""hljs-number"">57</span>)
at android<span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.AsyncTask</span><span class=""hljs-preprocessor"">.finish</span>(AsyncTask<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">651</span>)
at android<span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.AsyncTask</span><span class=""hljs-preprocessor"">.access</span>$500(AsyncTask<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">180</span>)
at android<span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.AsyncTask</span>$InternalHandler<span class=""hljs-preprocessor"">.handleMessage</span>(AsyncTask<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">668</span>)
at android<span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.Handler</span><span class=""hljs-preprocessor"">.dispatchMessage</span>(Handler<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">102</span>)
at android<span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.Looper</span><span class=""hljs-preprocessor"">.loop</span>(Looper<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">158</span>)
at android<span class=""hljs-preprocessor"">.app</span><span class=""hljs-preprocessor"">.ActivityThread</span><span class=""hljs-preprocessor"">.main</span>(ActivityThread<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">7225</span>)
at java<span class=""hljs-preprocessor"">.lang</span><span class=""hljs-preprocessor"">.reflect</span><span class=""hljs-preprocessor"">.Method</span><span class=""hljs-preprocessor"">.invoke</span>(Native Method)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.android</span><span class=""hljs-preprocessor"">.internal</span><span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.ZygoteInit</span>$MethodAndArgsCaller<span class=""hljs-preprocessor"">.run</span>(ZygoteInit<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">1230</span>)
at <span class=""hljs-keyword"">com</span><span class=""hljs-preprocessor"">.android</span><span class=""hljs-preprocessor"">.internal</span><span class=""hljs-preprocessor"">.os</span><span class=""hljs-preprocessor"">.ZygoteInit</span><span class=""hljs-preprocessor"">.main</span>(ZygoteInit<span class=""hljs-preprocessor"">.java</span>:<span class=""hljs-number"">1120</span>)
</code></pre>

<p>以上异常出现的几率为random <br>
初步分析原因是：进入页面然后又迅速退出，导致AsyncTask中的onPostExecute在调用Glide加载图片时出现如上异常，当然也跟对AsyncTask的管理有关 <br>
同样的问题参考<a href=""https://github.com/bumptech/glide/issues/138"">issues138</a> <br>
简单的摘要：</p>

<blockquote>
  <p>you fire an async task and then finish() in which case you just need to pass getApplicationContext instead of this when creating the callback/asynctask</p>
</blockquote>

<p>按照上面这个理解的话，如果是在AsyncTask中的onPostExecute执行时 <br>
调用Glide加载图片，context最好使用ApplicationContext</p>

<p>对<a href=""https://github.com/soulrelay/ImageLoaderUtil"">ImageLoaderUtil</a>做如下更新，添加方法</p>

<blockquote>
  <ul>
  <li>BaseImageLoaderStrategy</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs javascript""> <span class=""hljs-comment"">//这里的context指定为ApplicationContext</span>
    <span class=""hljs-keyword"">void</span> loadImageWithAppCxt(<span class=""hljs-built_in"">String</span> url, ImageView imageView);</code></pre>

<blockquote>
  <ul>
  <li>GlideImageLoaderStrategy</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs avrasm"">  @Override
    public void loadImageWithAppCxt(String url, ImageView imageView) {
        Glide<span class=""hljs-preprocessor"">.with</span>(imageView<span class=""hljs-preprocessor"">.getContext</span>()<span class=""hljs-preprocessor"">.getApplicationContext</span>())<span class=""hljs-preprocessor"">.load</span>(url)<span class=""hljs-preprocessor"">.dontAnimate</span>()
                <span class=""hljs-preprocessor"">.placeholder</span>(imageView<span class=""hljs-preprocessor"">.getDrawable</span>())
                <span class=""hljs-preprocessor"">.diskCacheStrategy</span>(DiskCacheStrategy<span class=""hljs-preprocessor"">.SOURCE</span>)
                <span class=""hljs-preprocessor"">.into</span>(imageView)<span class=""hljs-comment"">;</span>
    }</code></pre>

<blockquote>
  <ul>
  <li>ImageLoaderUtil</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs cs""> <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">loadImageWithAppCxt</span>(String url, ImageView imageView) {
        mStrategy.loadImageWithAppCxt(url,imageView);
    }</code></pre>



<h3 id=""2017-1-10-ll-简单说说图片适配的问题""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-1-10 ll  简单说说图片适配的问题</font></h3>

<p>过多的概念不赘述，可以先参考<a href=""http://blog.csdn.net/zhaokaiqiang1992/article/details/45419023"">Android屏幕适配全攻略(最权威的官方适配指导)</a> <br>
这里主要描述一种现象，明白的话自然觉得很简单！</p>



<pre class=""prettyprint""><code class="" hljs xml"">    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>                <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_gif""</span>
                <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
                <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
                <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""centerInside""</span>
                 /&gt;</span></code></pre>

<p>假设现在要加载一张200px * 200px的GIF图片（图片基于1280 * 720），这张图片的宽高设置为wrap_content，如果在1920 * 1080分辨率的手机上显示，相对于1280 * 720（假设屏幕尺寸相同），在视觉效果上会显得小，这其实是Android系统基于手机像素密度的一种自适配，单一变化条件下，1920 * 1080分辨率的手机的像素密度是1280 * 720的1.5倍 <br>
假设如果系统的自适配让你觉得在高分辨率手机上显得图片过小（像素密度高，200个像素显示起来就比较挤），可以通过自己的计算来改变这种现象 <br>
ImageLoaderUtil提供如下加载成功回调的方法（并且会把图片的宽高告诉你）：这里有个参数设置，看需求来计算，粗略点可以只使用宽度比例来算，如下面的例子显示，参数为AppParams.screenWidth / 720，当然也可以获取屏幕密度，1920 * 1080的屏幕密度为3，1280 * 720的为2，所以参数可以设置为AppParams.density/2（在两种分辨率上看着视觉上一样）</p>



<pre class=""prettyprint""><code class="" hljs cs"">    ImageLoaderUtil.getInstance().loadGifWithPrepareCall(url, mImageView, <span class=""hljs-keyword"">new</span> SourceReadyListener() {
                @Override
                <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onResourceReady</span>(<span class=""hljs-keyword"">int</span> width, <span class=""hljs-keyword"">int</span> height) {
                    ViewGroup.LayoutParams <span class=""hljs-keyword"">params</span> = mImageView.getLayoutParams();
                      <span class=""hljs-keyword"">params</span>.height = height * AppParams.screenWidth / <span class=""hljs-number"">720</span>;
                    <span class=""hljs-keyword"">params</span>.width = width * AppParams.screenWidth / <span class=""hljs-number"">720</span>;
                    mImageView.setLayoutParams(<span class=""hljs-keyword"">params</span>);
                    progressBar.setVisibility(View.GONE);
                }
            });</code></pre>



<h3 id=""2017-1-10-ll-添加saveimage方法实现图片的本地自定义保存功能""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-1-10 ll  添加saveImage方法，实现图片的本地自定义保存功能</font></h3>

<p>已同步到<a href=""https://github.com/soulrelay/ImageLoaderUtil"">GitHub ImageLoaderUtil</a></p>

<blockquote>
  <ul>
  <li>ImageLoaderUtil相关接口：</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs java"">  <span class=""hljs-javadoc"">/**
     *<span class=""hljs-javadoctag""> @param</span> context
     *<span class=""hljs-javadoctag""> @param</span> url 图片url
     *<span class=""hljs-javadoctag""> @param</span> savePath 保存路径
     *<span class=""hljs-javadoctag""> @param</span> saveFileName 保存文件名
     *<span class=""hljs-javadoctag""> @param</span> listener 文件保存成功与否的监听器
     */</span>
 <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">saveImage</span>(Context context, String url, String savePath, String saveFileName, ImageSaveListener listener) {
        mStrategy.saveImage(context, url, savePath, saveFileName, listener);
    }</code></pre>

<blockquote>
  <ul>
  <li>在工作线程中调用示例如下：</li>
  </ul>
</blockquote>



<pre class=""prettyprint""><code class="" hljs java"">ImageLoaderUtil.getInstance().saveImage(getActivity(), url,
                        Environment.getExternalStorageDirectory().getAbsolutePath() + <span class=""hljs-string"">""/bfsports""</span>,
                        <span class=""hljs-string"">""bfsports""</span> + System.currentTimeMillis(), <span class=""hljs-keyword"">new</span> ImageSaveListener() {
                            <span class=""hljs-annotation"">@Override</span>
                            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onSaveSuccess</span>() {
                                handler.obtainMessage(MSG_PIC_SAVE_SUCC).sendToTarget();
                            }

                            <span class=""hljs-annotation"">@Override</span>
                            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onSaveFail</span>() {
                                handler.obtainMessage(MSG_PIC_SAVE_FAIL).sendToTarget();
                            }
                        });</code></pre>



<h3 id=""2017-03-08-ll-glide圆形图片加载封装""><font color=""#ff9866"" size=""4"" face=""黑体"">2017-03-08 ll   Glide圆形图片加载封装</font></h3>

<blockquote>
  <ul>
  <li>之前加载圆形图片，一般都是采用自定义的CircleImageview。后来开始使用Glide加载图片，期间遇到Glide和CircleImageview使用冲突的问题（如：有的图片第一次加载的时候只显示占位图，第二次才显示正常的图片，以及CircleImageview带来的崩溃问题），当时采用了一个牺牲动画效果的解决方案</li>
  <li>既然已经全面使用Glide，那么就尽量基于Glide来完成加载圆形图片的方案</li>
  <li>具体方案请参考<a href=""http://blog.csdn.net/s003603u/article/details/60880308"">Glide圆形图片加载封装</a></li>
  </ul>
</blockquote></div>",移动开发,2016-12-05 11:47
4366,缓存一致性问题当数据时效性要求很高时，需要保证缓存中的数据与数据库中的保持一致，而且需要保证缓存节点和副本中的数据也保持一致，不能出现差异现象。这就比较依赖缓存的过期和更新策略。一般会在数据发生更改的...,dinglang_2009,http://blog.csdn.net/dinglang_2009/article/details/53464196,缓存在高并发场景下的常见问题,,架构,2016-12-05 11:54
3638,OpenCV中图像算术操作与逻辑操作在图像处理中有两类最重要的基础操作分别是图像点操作与块操作，简单点说图像点操作就是图像每个像素点的相关逻辑与几何运算、块操作最常见就是基于卷积算子的各种操作、实现各...,jia20003,http://blog.csdn.net/jia20003/article/details/53465234,OpenCV中图像算术操作与逻辑操作,"<div class=""markdown_views""><h2 id=""opencv中图像算术操作与逻辑操作"">OpenCV中图像算术操作与逻辑操作</h2>

<p>在图像处理中有两类最重要的基础操作分别是图像点操作与块操作，简单点说图像点操作就是图像每个像素点的相关逻辑与几何运算、块操作最常见就是基于卷积算子的各种操作、实现各种不同的功能。今天小编就跟大家一起学习OpenCV中图像点操作相关的函数与应用场景。常见算术运算包括加、减、乘、除，逻辑运算包括与、或、非、异或。准备工作： <br>
选择两张大小一致的图像如下、加载成功以后显示如下： <br>
<img src=""http://img.blog.csdn.net/20161205135337641"" alt=""这里写图片描述"" title=""""> <br>
<img src=""http://img.blog.csdn.net/20161205135357153"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">加法操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205143636365"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">减法操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205143916773"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">乘法操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205143940995"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">除法操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205144037070"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">权重加法操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205144204622"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">异或与非操作结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205144242008"" alt=""这里写图片描述"" title=""""> <br>
<font size=""6"">代码如下：</font></font></font></font></font></font></font></p>

<pre class=""prettyprint""><code class="" hljs cs"">Mat src1, src2, dst;
    src1 = imread(<span class=""hljs-string"">""D:/vcprojects/images/test1.png""</span>);
    src2 = imread(<span class=""hljs-string"">""D:/vcprojects/images/moon.png""</span>);

    <span class=""hljs-keyword"">const</span> <span class=""hljs-keyword"">char</span>* input_title1 = <span class=""hljs-string"">""input image - 1""</span>;
    <span class=""hljs-keyword"">const</span> <span class=""hljs-keyword"">char</span>* input_title2 = <span class=""hljs-string"">""input image - 2""</span>;

    namedWindow(input_title1, CV_WINDOW_AUTOSIZE);
    namedWindow(input_title2, CV_WINDOW_AUTOSIZE);

    imshow(input_title1, src1);
    imshow(input_title2, src2);

    <span class=""hljs-comment"">// create result windows and background image</span>
    <span class=""hljs-keyword"">const</span> <span class=""hljs-keyword"">char</span>* output_title = <span class=""hljs-string"">""result image""</span>;
    namedWindow(output_title, CV_WINDOW_AUTOSIZE);
    Mat bgImg = Mat(src1.size(), src1.type());
    Mat whiteImg = Mat(src1.size(), src1.type());
    whiteImg = Scalar(<span class=""hljs-number"">255</span>, <span class=""hljs-number"">255</span>, <span class=""hljs-number"">255</span>);

    <span class=""hljs-comment"">// 临时图像</span>
    Mat skel(src1.size(), CV_8UC1, Scalar(<span class=""hljs-number"">0</span>));
    Mat temp(src1.size(), CV_8UC1);
    Mat element = getStructuringElement(MORPH_CROSS, Size(<span class=""hljs-number"">3</span>, <span class=""hljs-number"">3</span>), Point(-<span class=""hljs-number"">1</span>, -<span class=""hljs-number"">1</span>));
    <span class=""hljs-keyword"">bool</span> done = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">int</span> index = <span class=""hljs-number"">9</span>, c;
    <span class=""hljs-keyword"">while</span> (<span class=""hljs-keyword"">true</span>) {
        <span class=""hljs-keyword"">switch</span> (index) {
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>:
            <span class=""hljs-comment"">// 加操作</span>
            add(src1, src2, dst, Mat(), -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>:
            <span class=""hljs-comment"">// 减操作</span>
            subtract(src1, src2, dst, Mat(), -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>:
            <span class=""hljs-comment"">// 乘操作</span>
            bgImg = Scalar(<span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>);
            multiply(src1, bgImg, dst, <span class=""hljs-number"">1.0</span>, -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>:
            <span class=""hljs-comment"">// 除操作</span>
            bgImg = Scalar(<span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>);
            divide(src1, bgImg, dst, <span class=""hljs-number"">1.0</span>, -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>:
            <span class=""hljs-comment"">// 基于权重加法 - 调节亮度</span>
            addWeighted(src1, <span class=""hljs-number"">1.5</span>, src2, <span class=""hljs-number"">0.5</span>, <span class=""hljs-number"">0</span>, dst, -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>:
            <span class=""hljs-comment"">// 逻辑非</span>
            bitwise_not(src1, dst, Mat());
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:
            subtract(whiteImg, src1, dst, Mat(), -<span class=""hljs-number"">1</span>);
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">8</span>:
            <span class=""hljs-comment"">// 逻辑异或</span>
            bgImg = Scalar(<span class=""hljs-number"">255</span>, <span class=""hljs-number"">255</span>, <span class=""hljs-number"">255</span>);
            bitwise_xor(src1, bgImg, dst, Mat());
            imshow(output_title, dst);
            <span class=""hljs-keyword"">break</span>;
        <span class=""hljs-keyword"">default</span>:
            imshow(output_title, src2);
            <span class=""hljs-keyword"">break</span>;
        }

        c = waitKey(<span class=""hljs-number"">500</span>);
        <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">char</span>)c == <span class=""hljs-number"">27</span>) {
            <span class=""hljs-keyword"">break</span>;
        }
        <span class=""hljs-keyword"">if</span>(c &gt; <span class=""hljs-number"">0</span>) {
            index = c % <span class=""hljs-number"">9</span>;
        }
    }</code></pre>

<p>此外我们还可以基于逻辑操作与形态学的腐蚀操作实现二值图像的骨架提取，Demo演示结果如下： <br>
<img src=""http://img.blog.csdn.net/20161205144445681"" alt=""这里写图片描述"" title=""""> <br>
代码实现如下：</p>



<pre class=""prettyprint""><code class="" hljs glsl"">    <span class=""hljs-comment"">// 提取骨架</span>
    <span class=""hljs-comment"">// 转灰度与二值化</span>
    cvtColor(src1, src1, COLOR_BGR2GRAY);
    threshold(src1, dst, <span class=""hljs-number"">127</span>, <span class=""hljs-number"">255</span>, CV_THRESH_BINARY);
    <span class=""hljs-comment"">//bitwise_not(src1, src1);</span>

    <span class=""hljs-keyword"">do</span> {
        <span class=""hljs-comment"">// 开操作 - 确保去掉小的干扰块</span>
        morphologyEx(src1, temp, MORPH_OPEN, element);
        <span class=""hljs-comment"">// 取反操作</span>
        bitwise_not(temp, temp);
        <span class=""hljs-comment"">// 得到与源图像不同</span>
        bitwise_and(src1, temp, temp);
        <span class=""hljs-comment"">// 使用它提取骨架、得到是仅仅比源图像小一个像素</span>
        bitwise_or(skel, temp, skel);
        <span class=""hljs-comment"">// 每次循环腐蚀，通过不断腐蚀的方式得到框架</span>
        erode(src1, src1, element);

        <span class=""hljs-comment"">// 对腐蚀之后的图像寻找最大值，如果被完全腐蚀则说明</span>
        <span class=""hljs-comment"">// 只剩下背景黑色、已经得到骨架，退出循环</span>
        <span class=""hljs-keyword"">double</span> <span class=""hljs-built_in"">max</span>;
        minMaxLoc(src1, <span class=""hljs-number"">0</span>, &amp;<span class=""hljs-built_in"">max</span>);
        done = (<span class=""hljs-number"">0</span> == <span class=""hljs-built_in"">max</span>);

    } <span class=""hljs-keyword"">while</span> (!done);

    <span class=""hljs-comment"">// 显示骨架</span>
    imshow(output_title, skel);</code></pre>

<p><strong>总结：</strong> <br>
通过上述代码演示，可以发现简单的图像算术运算也可以发挥大作用，基于黑色背景图像与原图权重叠加可以实现图像亮度调整、基于乘法可以实现对比度调整。基于逻辑操作与腐蚀操作可以实现二值图像的骨架提取。</p></div>",编程语言,2016-12-05 17:28
43562,"剑指Offer——当当+搜狐+好未来笔试题+知识点总结情景回顾
时间:2016.9.21 15：00-21：00
地点:山东省网络环境智能计算技术重点实验室
事件:当当笔试、搜狐笔试、好未来笔试3场笔...",sunhuaqiang1,http://blog.csdn.net/sunhuaqiang1/article/details/53466974,剑指Offer——当当+搜狐+好未来笔试题+知识点总结,"<div class=""markdown_views""><h1 id=""剑指offer当当搜狐好未来笔试题知识点总结"">剑指Offer——当当+搜狐+好未来笔试题+知识点总结</h1>



<h2 id=""情景回顾"">情景回顾</h2>

<ul>
<li>时间:2016.9.21 15：00-21：00</li>
<li>地点:山东省网络环境智能计算技术重点实验室</li>
<li><p>事件:当当笔试、搜狐笔试、好未来笔试</p>

<p>3场笔试中好未来相对简单点。</p></li>
</ul>



<h2 id=""好未来编程题"">好未来编程题</h2>



<h3 id=""马踏棋盘贪心算法"">马踏棋盘(贪心算法)</h3>

<p>  马踏棋盘是经典的程序设计问题之一，主要的解决方案有两种：一种是基于深度优先搜索的方法，另一种是基于贪婪算法的方法。第一种基于深度优先搜索(DFS)的方法是比较常用的算法，深度优先搜索算法也是数据结构中的经典算法之一，主要是采用递归的思想，一级一级的寻找，最后找到合适的解。而基于贪婪的算法则是依据贪婪算法的思想设置一种标准，然后依据标准进行选择，从而得到解，但是他不一定能够得到最优解。 <br>
  关于马踏棋盘的基本过程：国际象棋的棋盘为8*8的方格棋盘。现将”马”放在任意指定的方格中，按照”马”走棋的规则将”马”进行移动。要求每个方格只能进入一次，最终使得”马”走遍棋盘的64个方格。 <br>
  深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search.其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.（来自百度）基于深度优先搜索的算法就是依据当前点找到下一个可能的点，然后对这个点进行深度优先搜索，然后依次递归，当出现条件不满足时，退回来，采用其他的路径进行搜索，最后肯定能够得到对应的结果。 <br>
  贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。（来自百度） <br>
  本题与经典的马踏棋盘问题的区别就是点可以重复走。给定两点，判断是否走得通，并记录某次走通的路径。</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-keyword"">package</span> cn.edu.ujn.practice;

<span class=""hljs-javadoc"">/**
 * 贪心算法解决马踏棋盘问题
 * 棋盘有64个位置，“日”字走法，刚好走满整个棋盘
 *<span class=""hljs-javadoctag""> @author</span> SHQ
 *<span class=""hljs-javadoctag""> @date</span> 2016-09-22
 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">HorseStep</span> {</span>
    <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span>[] dx = { -<span class=""hljs-number"">1</span>, -<span class=""hljs-number"">2</span>, -<span class=""hljs-number"">2</span>, -<span class=""hljs-number"">1</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">1</span> }; <span class=""hljs-comment"">// x方向的增量</span>
    <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span>[] dy = { <span class=""hljs-number"">2</span>, <span class=""hljs-number"">1</span>, -<span class=""hljs-number"">1</span>, -<span class=""hljs-number"">2</span>, -<span class=""hljs-number"">2</span>, -<span class=""hljs-number"">1</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span> }; <span class=""hljs-comment"">// y方向的增量</span>
    <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">final</span> <span class=""hljs-keyword"">int</span> N = <span class=""hljs-number"">8</span>;
    <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">int</span>[][] board = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">int</span>[N][N]; <span class=""hljs-comment"">// 棋盘</span>

    <span class=""hljs-comment"">// 计算结点出口</span>
    <span class=""hljs-keyword"">int</span> waysOut(<span class=""hljs-keyword"">int</span> x, <span class=""hljs-keyword"">int</span> y) {
        <span class=""hljs-keyword"">int</span> tx, ty;
        <span class=""hljs-keyword"">int</span> count = <span class=""hljs-number"">0</span>;
        <span class=""hljs-comment"">// 结点位置非法或已踏过，返回-1</span>
        <span class=""hljs-keyword"">if</span> (x &lt; <span class=""hljs-number"">0</span> || y &lt; <span class=""hljs-number"">0</span> || x &gt;= N || y &gt;= N || board[x][y] &gt; <span class=""hljs-number"">0</span>) {
            <span class=""hljs-keyword"">return</span> -<span class=""hljs-number"">1</span>;
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; N; ++i) {
            tx = x + dx[i];
            ty = y + dy[i];
            <span class=""hljs-keyword"">if</span> (tx &lt; <span class=""hljs-number"">0</span> || ty &lt; <span class=""hljs-number"">0</span> || tx &gt;= N || ty &gt;= N) {
                <span class=""hljs-keyword"">continue</span>;
            }
            <span class=""hljs-comment"">// 如果棋子的下个出路可行，则出路数自加一次</span>
            <span class=""hljs-keyword"">if</span> (board[tx][ty] == <span class=""hljs-number"">0</span>) {
                count++;
            }
        }
        <span class=""hljs-keyword"">return</span> count;
    }

    <span class=""hljs-comment"">// 按结点出口数，从小到大排序</span>
    <span class=""hljs-keyword"">void</span> sortnode(HorseNode[] hn, <span class=""hljs-keyword"">int</span> n)<span class=""hljs-comment"">// 采用简单排序法，因为子结点数最多只有8</span>
    {
        <span class=""hljs-keyword"">int</span> i, j, t;
        HorseNode temp;
        <span class=""hljs-keyword"">for</span> (i = <span class=""hljs-number"">0</span>; i &lt; n; ++i) {
            <span class=""hljs-keyword"">for</span> (t = i, j = i + <span class=""hljs-number"">1</span>; j &lt; n; ++j)
                <span class=""hljs-keyword"">if</span> (hn[j].waysOutNum &lt; hn[t].waysOutNum)
                    t = j;
            <span class=""hljs-keyword"">if</span> (t &gt; i) {
                temp = hn[i];
                hn[i] = hn[t];
                hn[t] = temp;
            }
        }
    }

    <span class=""hljs-comment"">// 搜索函数,count代表当前第几步</span>
    <span class=""hljs-keyword"">void</span> dfs(<span class=""hljs-keyword"">int</span> x, <span class=""hljs-keyword"">int</span> y, <span class=""hljs-keyword"">int</span> count) {
        <span class=""hljs-keyword"">int</span> i, tx, ty;
        HorseNode[] tExit = <span class=""hljs-keyword"">new</span> HorseNode[N]; <span class=""hljs-comment"">// 记录出口结点的出口数</span>

        <span class=""hljs-keyword"">if</span> (count &gt; N * N) {
            output();
            <span class=""hljs-keyword"">return</span>;
        }
        <span class=""hljs-comment"">// 计算[x,y]的出口结点和出口结点的出口数</span>
        <span class=""hljs-keyword"">for</span> (i = <span class=""hljs-number"">0</span>; i &lt; N; i++) {
            tx = x + dx[i];
            ty = y + dy[i];
            HorseNode h = <span class=""hljs-keyword"">new</span> HorseNode();
            tExit[i] = h;
            tExit[i].x = tx;
            tExit[i].y = ty;
            tExit[i].waysOutNum = waysOut(tx, ty);
        }

        sortnode(tExit, N);

        <span class=""hljs-keyword"">for</span>(i = <span class=""hljs-number"">0</span>; tExit[i].waysOutNum &lt; <span class=""hljs-number"">0</span>; ++i)
            ;
        <span class=""hljs-keyword"">for</span>(; i &lt; N; ++i){
            tx = tExit[i].x;
            ty = tExit[i].y;
            board[tx][ty] = count;
            dfs(tx, ty, count + <span class=""hljs-number"">1</span>);
            <span class=""hljs-comment"">/*如果上面dfs()往下一步走不通，则回溯到这里重置chessboard[tx][ty]为0，接着i++,又循环...... */</span>
            board[tx][ty] = <span class=""hljs-number"">0</span>;
        }
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">main</span>(String[] args) {
        <span class=""hljs-keyword"">int</span> x = <span class=""hljs-number"">1</span>;
        <span class=""hljs-keyword"">int</span> y = <span class=""hljs-number"">3</span>;
        HorseStep test = <span class=""hljs-keyword"">new</span> HorseStep();
        board[x][y] = <span class=""hljs-number"">1</span>;
        test.dfs(x, y, <span class=""hljs-number"">2</span>);
    }

    <span class=""hljs-comment"">//打印结果</span>
    <span class=""hljs-keyword"">void</span> output(){
        <span class=""hljs-keyword"">for</span>(<span class=""hljs-keyword"">int</span> i = N - <span class=""hljs-number"">1</span>; i &gt;= <span class=""hljs-number"">0</span>; --i){
            <span class=""hljs-keyword"">for</span>(<span class=""hljs-keyword"">int</span> j = <span class=""hljs-number"">0</span>; j &lt; N; ++j){
                System.out.printf(<span class=""hljs-string"">""%2d ""</span>, board[i][j]);
            }
            System.out.println();
        }
        System.exit(<span class=""hljs-number"">0</span>);
    }

}

<span class=""hljs-comment"">// 下一个走法的方向类</span>
class HorseNode {
    <span class=""hljs-keyword"">int</span> x;
    <span class=""hljs-keyword"">int</span> y;
    <span class=""hljs-keyword"">int</span> waysOutNum;
}</code></pre>



<h3 id=""tsp旅行商问题"">TSP(旅行商问题)</h3>

<pre class=""prettyprint""><code class="" hljs cs"">package cn.edu.ujn.practice;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

<span class=""hljs-comment"">/**
 * 动态规划求解TSP问题
 * @author SHQ
 *
*/</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">class</span> TSP {

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">double</span>[][] dArray;  <span class=""hljs-comment"">// 距离矩阵</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> length;         <span class=""hljs-comment"">// 距离矩阵的长度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> lengthOfLength; <span class=""hljs-comment"">// 距离矩阵长度字符串的长度</span>
    <span class=""hljs-keyword"">private</span> String allzero = <span class=""hljs-string"">""""</span>;<span class=""hljs-comment"">// 0组成的字符串最大值是length个(length - 1)连接起来的字符串，同样最小值是length个0连接起来</span>
    <span class=""hljs-keyword"">private</span> String biggest = <span class=""hljs-string"">""""</span>;
    <span class=""hljs-keyword"">private</span> List&lt;String&gt; list = <span class=""hljs-keyword"">new</span> ArrayList&lt;String&gt;(); <span class=""hljs-comment"">// 城市流列表</span>
    <span class=""hljs-keyword"">private</span> Map&lt;String, Double&gt; store;      <span class=""hljs-comment"">// 存储中间数据</span>
    <span class=""hljs-keyword"">private</span> String notExist = <span class=""hljs-string"">""不存在""</span>;
    <span class=""hljs-keyword"">private</span> String firnalRoad = notExist;   <span class=""hljs-comment"">// 最终的路径，即距离矩阵的列号取值</span>
    <span class=""hljs-keyword"">private</span> String firnalCityFlow = <span class=""hljs-string"">""""</span>;     <span class=""hljs-comment"">// 最终形成的城市流</span>
    <span class=""hljs-keyword"">private</span> String min = notExist;          <span class=""hljs-comment"">// 最终求得的最小值</span>
    <span class=""hljs-keyword"">private</span> String allFlowTime = notExist;  <span class=""hljs-comment"">// 求解所有城市流的时间</span>
    <span class=""hljs-keyword"">private</span> String guihuaTime = notExist;   <span class=""hljs-comment"">// 动态规划的时间</span>

    <span class=""hljs-comment"">/** Creates a new instance of TwentyTwo */</span>
    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">TSP</span>(<span class=""hljs-keyword"">double</span>[][] dArray) {
        <span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">this</span>.check(dArray)) {
            <span class=""hljs-keyword"">this</span>.dArray = dArray;
            <span class=""hljs-keyword"">this</span>.length = dArray.length;
            <span class=""hljs-keyword"">this</span>.lengthOfLength = (length - <span class=""hljs-number"">1</span> + <span class=""hljs-string"">""""</span>).length();
            <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> zeroLength = <span class=""hljs-number"">0</span>; zeroLength &lt; (length * lengthOfLength);) {
                allzero += <span class=""hljs-number"">0</span>;
                zeroLength = allzero.length();
            }
            <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-keyword"">this</span>.length; i &gt; <span class=""hljs-number"">0</span>; i--) {
                <span class=""hljs-keyword"">this</span>.biggest += <span class=""hljs-keyword"">this</span>.toLengthOfLength(i - <span class=""hljs-number"">1</span>);
            }
            <span class=""hljs-keyword"">long</span> start = System.currentTimeMillis();
            <span class=""hljs-keyword"">this</span>.allFlow();
            <span class=""hljs-keyword"">long</span> end = System.currentTimeMillis();
            <span class=""hljs-keyword"">this</span>.allFlowTime = end - start + <span class=""hljs-string"">""毫秒""</span>;
            start = System.currentTimeMillis();
            <span class=""hljs-keyword"">this</span>.initstoreMap();
            <span class=""hljs-keyword"">this</span>.guihua(<span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">2</span>);
            end = System.currentTimeMillis();
            <span class=""hljs-keyword"">this</span>.guihuaTime = end - start + <span class=""hljs-string"">""毫秒""</span>;
        }
    }

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getFirnalRoad</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.firnalRoad;
    }

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getFirnalCityFlow</span>() {
        <span class=""hljs-keyword"">if</span> (<span class=""hljs-string"">""""</span>.equals(<span class=""hljs-keyword"">this</span>.firnalCityFlow)) {
            <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.notExist;
        }
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.firnalCityFlow;
    }

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getMin</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.min;
    }

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getAllFlowTime</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.allFlowTime;
    }

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getGuihuaTime</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">this</span>.guihuaTime;
    }

    <span class=""hljs-comment"">// 输入距离矩阵的有效性判读</span>
    <span class=""hljs-keyword"">private</span> boolean <span class=""hljs-title"">check</span>(<span class=""hljs-keyword"">double</span>[][] dArray) {
        <span class=""hljs-keyword"">if</span> (dArray.length &lt; <span class=""hljs-number"">3</span>) {
            System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""错误信息：距离矩阵长度过小""</span>);
            <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; dArray.length; i++) { <span class=""hljs-comment"">// 每个double[]的长度都进行判断</span>
            <span class=""hljs-keyword"">if</span> (dArray.length != dArray[i].length) {
                <span class=""hljs-comment"">// 非方阵</span>
                System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""错误信息：距离数组长度不合法""</span>);
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; dArray.length; i++) {
            <span class=""hljs-keyword"">if</span> (!oneZero(dArray[i], i)) {
                System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""错误信息：距离数组顺序或元素值设置不合法""</span>);
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }
        }
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">true</span>;
    }

    <span class=""hljs-comment"">// 对于一个doulbe类型的数组，只有第i个元素为0的判断</span>

    <span class=""hljs-keyword"">private</span> boolean <span class=""hljs-title"">oneZero</span>(<span class=""hljs-keyword"">double</span>[] dArray, <span class=""hljs-keyword"">int</span> i) {
        <span class=""hljs-keyword"">int</span> numOfZero = <span class=""hljs-number"">0</span>;
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">double</span> d : dArray) {
            <span class=""hljs-keyword"">if</span> (d == <span class=""hljs-number"">0.0</span>) {
                numOfZero++;
            }
        }
        <span class=""hljs-keyword"">if</span> (numOfZero == <span class=""hljs-number"">1</span> &amp;&amp; (dArray[i] == <span class=""hljs-number"">0</span>)) {
            <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">true</span>;
        } <span class=""hljs-keyword"">else</span> {
            <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
        }
    }

    <span class=""hljs-comment"">// 判断一个城市流是否合法</span>

    <span class=""hljs-keyword"">private</span> boolean <span class=""hljs-title"">oneFlow</span>(String str) {
        <span class=""hljs-comment"">// 将一个字符串更改为一个字符链表</span>
        List&lt;String&gt; listString = <span class=""hljs-keyword"">new</span> ArrayList&lt;String&gt;();
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; (<span class=""hljs-keyword"">this</span>.length * <span class=""hljs-keyword"">this</span>.lengthOfLength);) {
            listString.add(str.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength));
            i += <span class=""hljs-keyword"">this</span>.lengthOfLength;
        }
        <span class=""hljs-comment"">// 如果有相同的元素，则false</span>
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; (<span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">1</span>); i++) {
            <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> j = i + <span class=""hljs-number"">1</span>; j &lt; <span class=""hljs-keyword"">this</span>.length; j++) {
                <span class=""hljs-keyword"">if</span> (listString.<span class=""hljs-keyword"">get</span>(i * <span class=""hljs-keyword"">this</span>.lengthOfLength).equals(
                        listString.<span class=""hljs-keyword"">get</span>(j * <span class=""hljs-keyword"">this</span>.lengthOfLength))) {
                    <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
                }
            }
        }
        <span class=""hljs-comment"">// 如果有距离矩阵全0对角线上的元素，则false</span>
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; listString.size(); i++) {
            <span class=""hljs-keyword"">if</span> (Integer.parseInt(listString.<span class=""hljs-keyword"">get</span>(i)) == i) {
                <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
            }
        }
        <span class=""hljs-comment"">// 排除没有遍历所有城市的情况（从0点出发到达0点）</span>
        Map&lt;Integer, Integer&gt; map = <span class=""hljs-keyword"">new</span> HashMap&lt;Integer, Integer&gt;();
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; <span class=""hljs-keyword"">this</span>.length;) {
            map.put(i,
                    Integer.parseInt(str.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength)));
            i += <span class=""hljs-keyword"">this</span>.lengthOfLength;
        }
        <span class=""hljs-keyword"">int</span> allcity = <span class=""hljs-number"">0</span>;
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>;;) {
            i = map.<span class=""hljs-keyword"">get</span>(i);
            allcity++;
            <span class=""hljs-keyword"">if</span> (i == <span class=""hljs-number"">0</span>) {
                <span class=""hljs-keyword"">break</span>;
            }
        }
        <span class=""hljs-keyword"">if</span> (allcity &lt; <span class=""hljs-keyword"">this</span>.length) {
            <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">false</span>;
        }
        <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">true</span>;
    }

    <span class=""hljs-comment"">// 初始化存储map</span>

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">initstoreMap</span>() {
        <span class=""hljs-keyword"">this</span>.store = <span class=""hljs-keyword"">new</span> HashMap&lt;String, Double&gt;();
        <span class=""hljs-comment"">// 存距离矩阵最后一行可能的列号</span>
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; <span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">1</span>; i++) {
            <span class=""hljs-keyword"">this</span>.store.put(<span class=""hljs-keyword"">this</span>.toLengthOfLength(i),
                    <span class=""hljs-keyword"">this</span>.dArray[<span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">1</span>][i]);
        }
        <span class=""hljs-comment"">// 存距离矩阵倒数两行可能的列号</span>
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; <span class=""hljs-keyword"">this</span>.length; i++) {
            <span class=""hljs-keyword"">if</span> (i == <span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">2</span>)
                <span class=""hljs-keyword"">continue</span>;
            <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> j = <span class=""hljs-number"">0</span>; j &lt; <span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">1</span>; j++) {
                <span class=""hljs-keyword"">if</span> (i == j) {
                    <span class=""hljs-keyword"">continue</span>;
                }
                store.put(
                        <span class=""hljs-keyword"">this</span>.toLengthOfLength(i) + <span class=""hljs-keyword"">this</span>.toLengthOfLength(j),
                        <span class=""hljs-keyword"">this</span>.dArray[<span class=""hljs-keyword"">this</span>.length - <span class=""hljs-number"">2</span>][i]
                                + store.<span class=""hljs-keyword"">get</span>(<span class=""hljs-keyword"">this</span>.toLengthOfLength(j)));
            }
        }
    }

    <span class=""hljs-comment"">// 两个相近的城市流，前length - 2 - temp个数相同，后面不同，用动态规划实现</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">guihua</span>(<span class=""hljs-keyword"">int</span> temp) {
        <span class=""hljs-keyword"">if</span> (list.size() == <span class=""hljs-number"">1</span>) {
            <span class=""hljs-keyword"">this</span>.firnalRoad = list.<span class=""hljs-keyword"">get</span>(<span class=""hljs-number"">0</span>);
            <span class=""hljs-keyword"">this</span>.thePrint(list.<span class=""hljs-keyword"">get</span>(<span class=""hljs-number"">0</span>));
            <span class=""hljs-keyword"">this</span>.min = <span class=""hljs-keyword"">this</span>.store.<span class=""hljs-keyword"">get</span>(list.<span class=""hljs-keyword"">get</span>(<span class=""hljs-number"">0</span>)) + <span class=""hljs-string"">""""</span>;
            <span class=""hljs-keyword"">return</span>;
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; (list.size() - <span class=""hljs-number"">1</span>); i++) {
            <span class=""hljs-keyword"">int</span> next = (i + <span class=""hljs-number"">1</span>);
            <span class=""hljs-keyword"">if</span> (list.<span class=""hljs-keyword"">get</span>(i)
                    .substring(<span class=""hljs-number"">0</span>, temp * <span class=""hljs-keyword"">this</span>.lengthOfLength)
                    .equals(list.<span class=""hljs-keyword"">get</span>(next).substring(<span class=""hljs-number"">0</span>,
                            temp * <span class=""hljs-keyword"">this</span>.lengthOfLength))) {
                <span class=""hljs-keyword"">double</span> iValue = <span class=""hljs-number"">0</span>;
                <span class=""hljs-keyword"">double</span> nextValue = <span class=""hljs-number"">0</span>;

                iValue = <span class=""hljs-keyword"">this</span>.dArray[temp][Integer.parseInt(list.<span class=""hljs-keyword"">get</span>(i)
                        .substring(temp, temp + <span class=""hljs-keyword"">this</span>.lengthOfLength))]
                        + store.<span class=""hljs-keyword"">get</span>(list.<span class=""hljs-keyword"">get</span>(i).substring(
                                (temp + <span class=""hljs-number"">1</span>) * <span class=""hljs-keyword"">this</span>.lengthOfLength));
                nextValue = <span class=""hljs-keyword"">this</span>.dArray[temp][Integer.parseInt(list.<span class=""hljs-keyword"">get</span>(next)
                        .substring(temp, temp + <span class=""hljs-keyword"">this</span>.lengthOfLength))]
                        + store.<span class=""hljs-keyword"">get</span>(list.<span class=""hljs-keyword"">get</span>(next).substring(
                                (temp + <span class=""hljs-number"">1</span>) * <span class=""hljs-keyword"">this</span>.lengthOfLength));

                <span class=""hljs-keyword"">this</span>.store.put(list.<span class=""hljs-keyword"">get</span>(i)
                        .substring(temp * <span class=""hljs-keyword"">this</span>.lengthOfLength), iValue);
                <span class=""hljs-keyword"">this</span>.store.put(
                        list.<span class=""hljs-keyword"">get</span>(next).substring(temp * <span class=""hljs-keyword"">this</span>.lengthOfLength),
                        nextValue);

                <span class=""hljs-keyword"">if</span> (iValue &gt;= nextValue) {
                    list.remove(i);
                } <span class=""hljs-keyword"">else</span> {
                    list.remove(next);
                }
                i--;
            }
        }
        <span class=""hljs-keyword"">this</span>.guihua(temp - <span class=""hljs-number"">1</span>);
    }

    <span class=""hljs-comment"">// 组成所有的城市流</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">allFlow</span>() {
        <span class=""hljs-keyword"">while</span> (!<span class=""hljs-keyword"">this</span>.biggest.equals(<span class=""hljs-keyword"">this</span>.allzero)) {
            <span class=""hljs-keyword"">this</span>.allzero = <span class=""hljs-keyword"">this</span>.addone(<span class=""hljs-keyword"">this</span>.allzero);
            <span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">this</span>.oneFlow(<span class=""hljs-keyword"">this</span>.allzero)) {
                <span class=""hljs-keyword"">this</span>.list.add(<span class=""hljs-keyword"">this</span>.allzero);
            }
        }
    }

    <span class=""hljs-comment"">// 将length进制的字符串加1操作</span>

    <span class=""hljs-keyword"">private</span> String <span class=""hljs-title"">addone</span>(String str) {
        List&lt;String&gt; listString = <span class=""hljs-keyword"">new</span> ArrayList&lt;String&gt;();
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; (<span class=""hljs-keyword"">this</span>.length * <span class=""hljs-keyword"">this</span>.lengthOfLength);) {
            listString.add(str.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength));
            i += <span class=""hljs-keyword"">this</span>.lengthOfLength;
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = (length - <span class=""hljs-number"">1</span>); i &gt; -<span class=""hljs-number"">1</span>; i--) {
            <span class=""hljs-keyword"">int</span> last = Integer.parseInt(listString.<span class=""hljs-keyword"">get</span>(i));
            <span class=""hljs-keyword"">if</span> (last == (length - <span class=""hljs-number"">1</span>)) {
                last = <span class=""hljs-number"">0</span>;
                String strLast = <span class=""hljs-keyword"">this</span>.toLengthOfLength(last);
                listString.<span class=""hljs-keyword"">set</span>(i, strLast);
            } <span class=""hljs-keyword"">else</span> {
                last++;
                String strLast = <span class=""hljs-keyword"">this</span>.toLengthOfLength(last);
                listString.<span class=""hljs-keyword"">set</span>(i, strLast);
                <span class=""hljs-keyword"">break</span>;
            }
        }
        String ret = <span class=""hljs-string"">""""</span>;
        <span class=""hljs-keyword"">for</span> (String s : listString) {
            ret += s;
        }
        <span class=""hljs-keyword"">return</span> ret;
    }

    <span class=""hljs-comment"">// 如果一个int字符串长度不够lengthOfLength 则补足</span>

    <span class=""hljs-keyword"">private</span> String <span class=""hljs-title"">toLengthOfLength</span>(Object i) {
        String returnString = i.toString();
        <span class=""hljs-keyword"">while</span> (returnString.length() &lt; <span class=""hljs-keyword"">this</span>.lengthOfLength) {
            returnString = (<span class=""hljs-number"">0</span> + returnString);
        }
        <span class=""hljs-keyword"">return</span> returnString;
    }

    <span class=""hljs-comment"">// 将一个字符串键值映射，并标准输出</span>

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">thePrint</span>(String str) {
        Map&lt;Integer, Integer&gt; map = <span class=""hljs-keyword"">new</span> HashMap&lt;Integer, Integer&gt;();
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; <span class=""hljs-keyword"">this</span>.length;) {
            map.put(i, Integer.parseInt(str.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength)));
            i += <span class=""hljs-keyword"">this</span>.lengthOfLength;
        }
        String cityFlow = <span class=""hljs-keyword"">this</span>.toLengthOfLength(<span class=""hljs-number"">0</span>);
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>;;) {
            i = map.<span class=""hljs-keyword"">get</span>(i);
            cityFlow += <span class=""hljs-keyword"">this</span>.toLengthOfLength(i);
            <span class=""hljs-keyword"">if</span> (i == <span class=""hljs-number"">0</span>) {
                <span class=""hljs-keyword"">break</span>;
            }
        }
        <span class=""hljs-keyword"">for</span> (<span class=""hljs-keyword"">int</span> i = <span class=""hljs-number"">0</span>; i &lt; <span class=""hljs-keyword"">this</span>.length + <span class=""hljs-number"">1</span>;) {
            <span class=""hljs-keyword"">if</span> (i &lt; (<span class=""hljs-keyword"">this</span>.length)) {
                <span class=""hljs-keyword"">this</span>.firnalCityFlow += Integer.parseInt(cityFlow.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength)) + <span class=""hljs-string"">""-&gt;""</span>;
            } <span class=""hljs-keyword"">else</span> {
                <span class=""hljs-keyword"">this</span>.firnalCityFlow += Integer.parseInt(cityFlow.substring(i, i + <span class=""hljs-keyword"">this</span>.lengthOfLength));
            }
            i += <span class=""hljs-keyword"">this</span>.lengthOfLength;
        }
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">main</span>(String[] args) {
        <span class=""hljs-keyword"">double</span>[][] first = {         <span class=""hljs-comment"">// 各个节点之间路径长度的二维数组</span>
        { <span class=""hljs-number"">0</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">5</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">6</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">5</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">6</span> },
        { <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">4</span>, <span class=""hljs-number"">2</span>, <span class=""hljs-number"">8</span>, <span class=""hljs-number"">3</span>, <span class=""hljs-number"">5</span>, <span class=""hljs-number"">0</span> } };
        <span class=""hljs-keyword"">long</span> start = System.currentTimeMillis();
        TSP ff = <span class=""hljs-keyword"">new</span> TSP(first);
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""路径是：""</span> + ff.getFirnalRoad());
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""城市顺序：""</span> + ff.getFirnalCityFlow());
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""最小值：""</span> + ff.getMin());
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""生成所有合法城市流用时：""</span> + ff.getAllFlowTime());
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""动态规划求解过程用时：""</span> + ff.getGuihuaTime());
        <span class=""hljs-keyword"">long</span> end = System.currentTimeMillis();
        System.<span class=""hljs-keyword"">out</span>.println(<span class=""hljs-string"">""总用时：""</span> + (end - start));
    }
}</code></pre>

<p><img src=""http://img.blog.csdn.net/20161205170013672"" alt=""这里写图片描述"" title=""""></p>

<h2 id=""当当编程题"">当当编程题</h2>

<p><img src=""http://img.blog.csdn.net/20161205170150985"" alt=""这里写图片描述"" title=""""> <br>
<img src=""http://img.blog.csdn.net/20161205170158524"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""搜狐编程题"">搜狐编程题</h2>



<h3 id=""袋鼠过河"">袋鼠过河</h3>



<h3 id=""保留最大的数"">保留最大的数</h3>



<h3 id=""彩色宝石项链"">彩色宝石项链</h3>

<p>时间限制：C/C++语言 1000MS；其他语言 3000MS <br>
内存限制：C/C++语言 65536KB；其他语言 589824KB <br>
题目描述： <br>
有一条彩色宝石项链，是由很多种不同的宝石组成的，包括红宝石，蓝宝石，钻石，翡翠，珍珠等。有一天国王把项链赏赐给了一个学者，并跟他说，你可以带走这条项链，但是王后很喜欢红宝石，蓝宝石，紫水晶，翡翠和钻石这五种，我要你从项链中截取连续的一小段还给我，这一段中必须包含所有的这五种宝石，剩下的部分你可以带走。如果无法找到则一个也无法带走。请帮助学者找出如何切分项链才能够拿到最多的宝石。 <br>
输入 <br>
我们用每种字符代表一种宝石，A表示红宝石，B表示蓝宝石，C代表紫水晶，D代表翡翠，E代表钻石，F代表玉石，G代表玻璃等等，我们用一个全部为大写字母的字符序列表示项链的宝石序列，注意项链是首尾相接的。每行代表一种情况。 <br>
输出 <br>
输出学者能够拿到的最多的宝石数量。每行一个</p>

<p>样例输入 <br>
ABCYDYE <br>
ATTMBQECPD <br>
样例输出 <br>
1 <br>
3 <br>
必须掌握的知识点 <br>
通过参加若干次笔试，发现重复考的知识点主要有排序算法(快排)、设计模式(单例、观察者)、类迷宫问题(递归+回溯)、贪心算法、DFS&amp;BFS。</p>

<p></p><div align=""center""><img src=""http://img.blog.csdn.net/20160927195300348"" alt=""这里写图片描述"" title=""""> <br>
 <img src=""http://img.blog.csdn.net/20160927195313061"" alt=""这里写图片描述"" title=""""> <br>
 <img src=""http://img.blog.csdn.net/20160927195322748"" alt=""这里写图片描述"" title=""""></div><p></p></div>",综合,2016-12-05 17:29
16365,"周末找事做做.看到微信里有个漂流瓶.试着敲了敲.
这里是用leancloud做后台.涉及到语音和文字的储存,查询.自己不会写后台代码,对于我算是个福利.
欢迎交流!




技术点:
...",qq_31383345,http://blog.csdn.net/qq_31383345/article/details/53447403,微信小程序之仿微信漂流瓶,,"移动开发,微信小程序开发",2016-12-05 17:29
3836,在2006年12月召开的 IEEE 数据挖掘国际会议上，与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），本博客的十大数据挖掘算法系列文章已...,baimafujinji,http://blog.csdn.net/baimafujinji/article/details/53269040,数据挖掘十大算法之CART详解,"<div class=""markdown_views""><p>在2006年12月召开的 IEEE 数据挖掘国际会议上（ICDM， International Conference on Data Mining），与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），可以参见文献【1】。本博客已经介绍过的位列十大算法之中的算法包括：</p>

<ul>
<li>[1] <em>k</em>-means算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50570824"">http://blog.csdn.net/baimafujinji/article/details/50570824</a>）</li>
<li>[2] 支持向量机SVM（<a href=""http://blog.csdn.net/baimafujinji/article/details/49885481"">http://blog.csdn.net/baimafujinji/article/details/49885481</a>）</li>
<li>[3] EM算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50626088"">http://blog.csdn.net/baimafujinji/article/details/50626088</a>）</li>
<li>[4] 朴素贝叶斯算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50441927"">http://blog.csdn.net/baimafujinji/article/details/50441927</a>）</li>
<li>[5] <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-1-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-2""><span class=""mi"" id=""MathJax-Span-3"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-1"">k</script>NN算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/6496222"">http://blog.csdn.net/baimafujinji/article/details/6496222</a>）</li>
<li>[6] C4.5决策树算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/53239581"">http://blog.csdn.net/baimafujinji/article/details/53239581</a>）</li>
</ul>

<p>决策树模型是一类算法的集合，在数据挖掘十大算法中，具体的决策树算法占有两席位置，即C4.5和CART算法。本文主要介绍分类回归树（CART，Classification And Regression Tree）也属于一种决策树，希望你在阅读本文之前已经了解前文已经介绍过之内容：</p>

<ul>
<li><a href=""http://blog.csdn.net/baimafujinji/article/details/51724371"">《数据挖掘十大算法之决策树详解（1）》</a></li>
<li><a href=""http://blog.csdn.net/baimafujinji/article/details/53239581"">《数据挖掘十大算法之决策树详解（2）》</a></li>
</ul>

<p>欢迎关注白马负金羁的博客 <a href=""http://blog.csdn.net/baimafujinji"">http://blog.csdn.net/baimafujinji</a>，为保证公式、图表得以正确显示，强烈建议你从该地址上查看原版博文。本博客主要关注方向包括：数字图像处理、算法设计与分析、数据结构、机器学习、数据挖掘、统计分析方法、自然语言处理。</p>

<hr>



<h2 id=""cart生成""><strong>CART</strong>生成</h2>

<p>CART假设决策树是二叉树，内部结点特征的取值为“是”和“否”，左分支是取值为“是”的分支，右分支是取值为“否”的分支。这样的决策树等价于递归地二分每个特征，将输入空间即特征空间划分为有限个单元，并在这些单元上确定预测的概率分布，也就是在输入给定的条件下输出的条件概率分布。</p>

<p>CART算法由以下两步组成：</p>

<ol>
<li><strong>决策树生成</strong>：基于训练数据集生成决策树，生成的决策树要尽量大；</li>
<li><strong>决策树剪枝</strong>：用验证数据集对已生成的树进行剪枝并选择最优子树，这时损失函数最小作为剪枝的标准。</li>
</ol>

<p>CART决策树的生成就是递归地构建二叉决策树的过程。CART决策树既可以用于分类也可以用于回归。本文我们仅讨论用于分类的CART。对分类树而言，CART用Gini系数最小化准则来进行特征选择，生成二叉树。 CART生成算法如下：</p>

<p><strong>输入</strong>：训练数据集<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-2-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-4"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-5""><span class=""mi"" id=""MathJax-Span-6"" style=""font-family: STIXGeneral; font-style: italic;"">D</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-2"">D</script>，停止计算的条件：  <br>
<strong>输出</strong>：CART决策树。</p>

<p>根据训练数据集，从根结点开始，递归地对每个结点进行以下操作，构建二叉决策树：</p>

<ol>
<li>设结点的训练数据集为<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-3-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-7"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-8""><span class=""mi"" id=""MathJax-Span-9"" style=""font-family: STIXGeneral; font-style: italic;"">D</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-3"">D</script>，计算现有特征对该数据集的Gini系数。此时，对每一个特征<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-4-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-10"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.7em, 1000em, 2.741em, -0.612em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-11""><span class=""mi"" id=""MathJax-Span-12"" style=""font-family: STIXGeneral; font-style: italic;"">A</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.848em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-4"">A</script>，对其可能取的每个值<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-5-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-13"" style=""width: 0.55em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.498em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.544em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-14""><span class=""mi"" id=""MathJax-Span-15"" style=""font-family: STIXGeneral; font-style: italic;"">a</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-5"">a</script>，根据样本点对<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-6-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-16"" style=""width: 2.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.43em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.7em, 1000em, 2.752em, -0.612em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-17""><span class=""mi"" id=""MathJax-Span-18"" style=""font-family: STIXGeneral; font-style: italic;"">A</span><span class=""mo"" id=""MathJax-Span-19"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-20"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">a</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.86em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-6"">A=a</script>的测试为“是”或 “否”将<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-7-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-21"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-22""><span class=""mi"" id=""MathJax-Span-23"" style=""font-family: STIXGeneral; font-style: italic;"">D</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-7"">D</script>分割成<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-8-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-24"" style=""width: 1.283em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.184em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-25""><span class=""msubsup"" id=""MathJax-Span-26""><span style=""display: inline-block; position: relative; width: 1.196em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-27"" style=""font-family: STIXGeneral; font-style: italic;"">D</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.748em;""><span class=""mn"" id=""MathJax-Span-28"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-8"">D_1</script>和<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-9-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-29"" style=""width: 1.283em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.184em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-30""><span class=""msubsup"" id=""MathJax-Span-31""><span style=""display: inline-block; position: relative; width: 1.196em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-32"" style=""font-family: STIXGeneral; font-style: italic;"">D</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.748em;""><span class=""mn"" id=""MathJax-Span-33"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-9"">D_2</script>两部分，计算<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-10-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-34"" style=""width: 2.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.43em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.7em, 1000em, 2.752em, -0.612em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-35""><span class=""mi"" id=""MathJax-Span-36"" style=""font-family: STIXGeneral; font-style: italic;"">A</span><span class=""mo"" id=""MathJax-Span-37"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-38"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">a</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.86em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-10"">A=a</script>时的Gini系数。</li>
<li>在所有可能的特征<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-11-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-39"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.7em, 1000em, 2.741em, -0.612em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-40""><span class=""mi"" id=""MathJax-Span-41"" style=""font-family: STIXGeneral; font-style: italic;"">A</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.848em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-11"">A</script>以及它们所有可能的切分点<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-12-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-42"" style=""width: 0.55em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.498em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.544em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-43""><span class=""mi"" id=""MathJax-Span-44"" style=""font-family: STIXGeneral; font-style: italic;"">a</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-12"">a</script>中，选择Gini系数最小的特征及其对应的切分点作为最优特征与最优切分点。依最优特征与最优切分点，从现结点生成两个子结点，将训练数据集依特征分配到两个子结点中去。</li>
<li>对两个子结点递归地调用步骤l~2，直至满足停止条件。</li>
<li>生成CART决策树。</li>
</ol>

<p>算法停止计算的条件是结点中的样本个数小于预定阈值，或样本集的Gini系数小于预定阈值（样本基本属于同一类），或者没有更多特征。 </p>

<hr>



<h2 id=""一个具体的例子""><strong>一个具体的例子</strong></h2>

<p>下面来看一个具体的例子。我们使用<a href=""http://blog.csdn.net/baimafujinji/article/details/51724371"">《数据挖掘十大算法之决策树详解（1）》</a>中图4-6所示的数据集来作为示例，为了便于后面的叙述，我们将其再列出如下： <br>
</p><center> <br>
<img src=""http://img.blog.csdn.net/20161122231317969"" width=""420""> <br>
</center><p></p>

<p>首先对数据集非类标号属性{是否有房，婚姻状况，年收入}分别计算它们的Gini系数增益，取Gini系数增益值最大的属性作为决策树的根节点属性。根节点的Gini系数 <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-52-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1037"" style=""width: 21.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 20.187em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.015em, 1000em, 3.441em, -0.509em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1038""><span class=""mi"" id=""MathJax-Span-1039"" style=""font-family: STIXGeneral; font-style: italic;"">G</span><span class=""mi"" id=""MathJax-Span-1040"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-1041"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-1042"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mo"" id=""MathJax-Span-1043"" style=""font-family: STIXGeneral;"">(</span><span class=""texatom"" id=""MathJax-Span-1044""><span class=""mrow"" id=""MathJax-Span-1045""><span class=""mo"" id=""MathJax-Span-1046""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>是</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1047""><span class=""mrow"" id=""MathJax-Span-1048""><span class=""mo"" id=""MathJax-Span-1049""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>否</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1050""><span class=""mrow"" id=""MathJax-Span-1051""><span class=""mo"" id=""MathJax-Span-1052""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>拖</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1053""><span class=""mrow"" id=""MathJax-Span-1054""><span class=""mo"" id=""MathJax-Span-1055""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>欠</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1056""><span class=""mrow"" id=""MathJax-Span-1057""><span class=""mo"" id=""MathJax-Span-1058""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>贷</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1059""><span class=""mrow"" id=""MathJax-Span-1060""><span class=""mo"" id=""MathJax-Span-1061""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>款</span></span></span></span><span class=""mo"" id=""MathJax-Span-1062"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-1063"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1064"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">1</span><span class=""mo"" id=""MathJax-Span-1065"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1066"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1067""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1068"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1069"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1070""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1071"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1072"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1073"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1074"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1075""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.706em, 1000em, 2.749em, -0.541em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1076"" style=""font-family: STIXGeneral;"">7</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1077"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1078""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1079"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1080"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1081"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1082"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.329em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-52"">Gini(是否拖欠贷款)=1-(\frac3{10})^2-(\frac7{10})^2=0.42</script> <br>
当根据是否有房来进行划分时，Gini系数增益计算过程为 <br>
<center> <br>
<img src=""http://img.blog.csdn.net/20161123000246835"" width=""220""> <br>
</center> <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true""><span class=""MathJax"" id=""MathJax-Element-53-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1083"" style=""width: 100%; display: inline-block; min-width: 17.75em;""><span style=""display: inline-block; position: relative; width: 100%; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(4.068em, 1000em, 9.025em, -0.561em); top: -5.607em; left: 0em; width: 100%;""><span class=""mrow"" id=""MathJax-Span-1084""><span style=""display: inline-block; position: relative; width: 100%; height: 0px;""><span style=""position: absolute; clip: rect(2.448em, 1000em, 4.874em, -0.509em); top: -3.988em; left: 50%; margin-left: -7.17em;""><span class=""mi"" id=""MathJax-Span-1085"" style=""font-family: STIXGeneral; font-style: italic;"">G</span><span class=""mi"" id=""MathJax-Span-1086"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-1087"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-1088"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mo"" id=""MathJax-Span-1089"" style=""font-family: STIXGeneral;"">(</span><span class=""texatom"" id=""MathJax-Span-1090""><span class=""mrow"" id=""MathJax-Span-1091""><span class=""mo"" id=""MathJax-Span-1092""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>左</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1093""><span class=""mrow"" id=""MathJax-Span-1094""><span class=""mo"" id=""MathJax-Span-1095""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>子</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1096""><span class=""mrow"" id=""MathJax-Span-1097""><span class=""mo"" id=""MathJax-Span-1098""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>节</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1099""><span class=""mrow"" id=""MathJax-Span-1100""><span class=""mo"" id=""MathJax-Span-1101""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>点</span></span></span></span><span class=""mo"" id=""MathJax-Span-1102"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-1103"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1104"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">1</span><span class=""mo"" id=""MathJax-Span-1105"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1106"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1107""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.537em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1108"" style=""font-family: STIXGeneral;"">0</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1109"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1110""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1111"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1112"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1113"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1114"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1115""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1116"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1117"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1118""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1119"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1120"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1121"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1122"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span><span style=""position: absolute; clip: rect(2.448em, 1000em, 4.868em, -0.561em); top: -1.451em; left: 50%; margin-left: -8.295em;""><span class=""mspace"" id=""MathJax-Span-1123"" style=""height: 0em; vertical-align: 0em; width: 0em; display: inline-block; overflow: hidden;""></span><span class=""mi"" id=""MathJax-Span-1124"" style=""font-family: STIXGeneral; font-style: italic;"">G</span><span class=""mi"" id=""MathJax-Span-1125"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-1126"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-1127"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mo"" id=""MathJax-Span-1128"" style=""font-family: STIXGeneral;"">(</span><span class=""texatom"" id=""MathJax-Span-1129""><span class=""mrow"" id=""MathJax-Span-1130""><span class=""mo"" id=""MathJax-Span-1131""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>右</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1132""><span class=""mrow"" id=""MathJax-Span-1133""><span class=""mo"" id=""MathJax-Span-1134""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>子</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1135""><span class=""mrow"" id=""MathJax-Span-1136""><span class=""mo"" id=""MathJax-Span-1137""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>节</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1138""><span class=""mrow"" id=""MathJax-Span-1139""><span class=""mo"" id=""MathJax-Span-1140""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>点</span></span></span></span><span class=""mo"" id=""MathJax-Span-1141"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-1142"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1143"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">1</span><span class=""mo"" id=""MathJax-Span-1144"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1145"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1146""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1147"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.706em, 1000em, 2.749em, -0.541em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1148"" style=""font-family: STIXGeneral;"">7</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1149""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1150"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1151"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1152"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1153"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1154""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1155"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.706em, 1000em, 2.749em, -0.541em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1156"" style=""font-family: STIXGeneral;"">7</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1157""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1158"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1159"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1160"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1161"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.4898</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 5.607em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 5.037em; vertical-align: -3.524em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-53"">Gini(左子节点)=1-(\frac03)^2-(\frac33)^2=0\\
Gini(右子节点)=1-(\frac37)^2-(\frac47)^2=0.4898</script> <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-54-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1162"" style=""width: 24.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 22.617em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.015em, 1000em, 3.441em, -0.513em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1163""><span class=""mi"" id=""MathJax-Span-1164"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1165"" style=""font-family: STIXGeneral;"">{</span><span class=""texatom"" id=""MathJax-Span-1166""><span class=""mrow"" id=""MathJax-Span-1167""><span class=""mo"" id=""MathJax-Span-1168""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>是</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1169""><span class=""mrow"" id=""MathJax-Span-1170""><span class=""mo"" id=""MathJax-Span-1171""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>否</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1172""><span class=""mrow"" id=""MathJax-Span-1173""><span class=""mo"" id=""MathJax-Span-1174""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>有</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1175""><span class=""mrow"" id=""MathJax-Span-1176""><span class=""mo"" id=""MathJax-Span-1177""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>房</span></span></span></span><span class=""mo"" id=""MathJax-Span-1178"" style=""font-family: STIXGeneral;"">}</span><span class=""mo"" id=""MathJax-Span-1179"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1180"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span><span class=""mo"" id=""MathJax-Span-1181"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1182"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.706em, 1000em, 2.749em, -0.541em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1183"" style=""font-family: STIXGeneral;"">7</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1184"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1185"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1186"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0.4898</span><span class=""mo"" id=""MathJax-Span-1187"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1188"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1189"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1190"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1191"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1192"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0</span><span class=""mo"" id=""MathJax-Span-1193"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1194"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.077</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.329em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-54"">\Delta\{是否有房\}=0.42-\frac7{10}\times0.4898-\frac3{10}\times0=0.077</script><p></p>

<p>若按婚姻状况属性来划分，属性婚姻状况有三个可能的取值{married，single，divorced}，分别计算划分后的</p>

<ul>
<li>{married} | {single,divorced} </li>
<li>{single} | {married,divorced}</li>
<li>{divorced} | {single,married}</li>
</ul>

<p>的Gini系数增益。 <br>
当分组为{married} | {single,divorced}时，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-55-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1195"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.202em, 1000em, 2.401em, -0.544em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1196""><span class=""msubsup"" id=""MathJax-Span-1197""><span style=""display: inline-block; position: relative; width: 0.752em; height: 0px;""><span style=""position: absolute; clip: rect(1.701em, 1000em, 2.759em, -0.544em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-1198"" style=""font-family: STIXGeneral; font-style: italic;"">S<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.008em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.49em;""><span class=""mi"" id=""MathJax-Span-1199"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.016em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-55"">S_l</script>表示婚姻状况取值为married的分组，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-56-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1200"" style=""width: 0.95em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.872em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.202em, 1000em, 2.393em, -0.544em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1201""><span class=""msubsup"" id=""MathJax-Span-1202""><span style=""display: inline-block; position: relative; width: 0.877em; height: 0px;""><span style=""position: absolute; clip: rect(1.701em, 1000em, 2.759em, -0.544em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-1203"" style=""font-family: STIXGeneral; font-style: italic;"">S<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.008em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.49em;""><span class=""mi"" id=""MathJax-Span-1204"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.016em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.008em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-56"">S_r</script>表示婚姻状况取值为single或者divorced的分组  <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-57-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1205"" style=""width: 28.883em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 26.978em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.63em, 1000em, 4.064em, -0.513em); top: -3.178em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1206""><span class=""mi"" id=""MathJax-Span-1207"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1208"" style=""font-family: STIXGeneral;"">{</span><span class=""texatom"" id=""MathJax-Span-1209""><span class=""mrow"" id=""MathJax-Span-1210""><span class=""mo"" id=""MathJax-Span-1211""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>婚</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1212""><span class=""mrow"" id=""MathJax-Span-1213""><span class=""mo"" id=""MathJax-Span-1214""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>姻</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1215""><span class=""mrow"" id=""MathJax-Span-1216""><span class=""mo"" id=""MathJax-Span-1217""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>状</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1218""><span class=""mrow"" id=""MathJax-Span-1219""><span class=""mo"" id=""MathJax-Span-1220""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>况</span></span></span></span><span class=""mo"" id=""MathJax-Span-1221"" style=""font-family: STIXGeneral;"">}</span><span class=""mo"" id=""MathJax-Span-1222"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1223"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span><span class=""mo"" id=""MathJax-Span-1224"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1225"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1226"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1227"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1228"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1229"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0</span><span class=""mo"" id=""MathJax-Span-1230"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1231"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1232"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1233"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1234"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""texatom"" id=""MathJax-Span-1235"" style=""padding-left: 0.25em;""><span class=""mrow"" id=""MathJax-Span-1236""><span class=""mo"" id=""MathJax-Span-1237"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">[</span></span></span></span></span><span class=""mn"" id=""MathJax-Span-1238"" style=""font-family: STIXGeneral;"">1</span><span class=""mo"" id=""MathJax-Span-1239"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1240"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1241""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1242"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1243"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1244""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1245"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1246"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1247"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1248"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1249""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1250"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1251"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1252""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1253"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1254"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""texatom"" id=""MathJax-Span-1255"" style=""""><span class=""mrow"" id=""MathJax-Span-1256""><span class=""mo"" id=""MathJax-Span-1257"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">]</span></span></span></span></span><span class=""mo"" id=""MathJax-Span-1258"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1259"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.12</span></span><span style=""display: inline-block; width: 0px; height: 3.178em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.338em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-57"">\Delta\{婚姻状况\}=0.42-\frac4{10}\times0-\frac6{10}\times\big[1-(\frac{3}{6})^2-(\frac{3}{6})^2\big]=0.12</script> <br>
当分组为{single} | {married,divorced}时， <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-58-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1260"" style=""width: 30.283em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 28.287em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.626em, 1000em, 4.064em, -0.513em); top: -3.178em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1261""><span class=""mi"" id=""MathJax-Span-1262"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1263"" style=""font-family: STIXGeneral;"">{</span><span class=""texatom"" id=""MathJax-Span-1264""><span class=""mrow"" id=""MathJax-Span-1265""><span class=""mo"" id=""MathJax-Span-1266""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>婚</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1267""><span class=""mrow"" id=""MathJax-Span-1268""><span class=""mo"" id=""MathJax-Span-1269""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>姻</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1270""><span class=""mrow"" id=""MathJax-Span-1271""><span class=""mo"" id=""MathJax-Span-1272""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>状</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1273""><span class=""mrow"" id=""MathJax-Span-1274""><span class=""mo"" id=""MathJax-Span-1275""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>况</span></span></span></span><span class=""mo"" id=""MathJax-Span-1276"" style=""font-family: STIXGeneral;"">}</span><span class=""mo"" id=""MathJax-Span-1277"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1278"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span><span class=""mo"" id=""MathJax-Span-1279"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1280"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1281"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1282"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1283"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1284"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0.5</span><span class=""mo"" id=""MathJax-Span-1285"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1286"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1287"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1288"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1289"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""texatom"" id=""MathJax-Span-1290"" style=""padding-left: 0.25em;""><span class=""mrow"" id=""MathJax-Span-1291""><span class=""mo"" id=""MathJax-Span-1292"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">[</span></span></span></span></span><span class=""mn"" id=""MathJax-Span-1293"" style=""font-family: STIXGeneral;"">1</span><span class=""mo"" id=""MathJax-Span-1294"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1295"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1296""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.45em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1297"" style=""font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1298"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1299""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1300"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1301"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1302"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1303"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1304""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.68em, 1000em, 2.755em, -0.53em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1305"" style=""font-family: STIXGeneral;"">5</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1306"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1307""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1308"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1309"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""texatom"" id=""MathJax-Span-1310"" style=""""><span class=""mrow"" id=""MathJax-Span-1311""><span class=""mo"" id=""MathJax-Span-1312"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">]</span></span></span></span></span><span class=""mo"" id=""MathJax-Span-1313"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1314"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.053</span></span><span style=""display: inline-block; width: 0px; height: 3.178em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.342em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-58"">\Delta\{婚姻状况\}=0.42-\frac4{10}\times0.5-\frac6{10}\times\big[1-(\frac{1}{6})^2-(\frac{5}{6})^2\big]=0.053</script> <br>
当分组为{divorced} | {single,married}时， <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-59-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1315"" style=""width: 29.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 27.788em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.63em, 1000em, 4.064em, -0.513em); top: -3.178em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1316""><span class=""mi"" id=""MathJax-Span-1317"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1318"" style=""font-family: STIXGeneral;"">{</span><span class=""texatom"" id=""MathJax-Span-1319""><span class=""mrow"" id=""MathJax-Span-1320""><span class=""mo"" id=""MathJax-Span-1321""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>婚</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1322""><span class=""mrow"" id=""MathJax-Span-1323""><span class=""mo"" id=""MathJax-Span-1324""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>姻</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1325""><span class=""mrow"" id=""MathJax-Span-1326""><span class=""mo"" id=""MathJax-Span-1327""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>状</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1328""><span class=""mrow"" id=""MathJax-Span-1329""><span class=""mo"" id=""MathJax-Span-1330""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>况</span></span></span></span><span class=""mo"" id=""MathJax-Span-1331"" style=""font-family: STIXGeneral;"">}</span><span class=""mo"" id=""MathJax-Span-1332"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1333"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span><span class=""mo"" id=""MathJax-Span-1334"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1335"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1336"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1337"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1338"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1339"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0.5</span><span class=""mo"" id=""MathJax-Span-1340"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1341"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.505em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1342"" style=""font-family: STIXGeneral;"">8</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1343"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1344"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""texatom"" id=""MathJax-Span-1345"" style=""padding-left: 0.25em;""><span class=""mrow"" id=""MathJax-Span-1346""><span class=""mo"" id=""MathJax-Span-1347"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">[</span></span></span></span></span><span class=""mn"" id=""MathJax-Span-1348"" style=""font-family: STIXGeneral;"">1</span><span class=""mo"" id=""MathJax-Span-1349"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1350"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1351""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1352"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.505em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1353"" style=""font-family: STIXGeneral;"">8</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1354""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1355"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1356"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1357"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1358"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1359""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1360"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.505em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1361"" style=""font-family: STIXGeneral;"">8</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1362""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1363"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1364"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""texatom"" id=""MathJax-Span-1365"" style=""""><span class=""mrow"" id=""MathJax-Span-1366""><span class=""mo"" id=""MathJax-Span-1367"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">]</span></span></span></span></span><span class=""mo"" id=""MathJax-Span-1368"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1369"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.02</span></span><span style=""display: inline-block; width: 0px; height: 3.178em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.338em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-59"">\Delta\{婚姻状况\}=0.42-\frac2{10}\times0.5-\frac8{10}\times\big[1-(\frac{2}{8})^2-(\frac{6}{8})^2\big]=0.02</script> <br>
对比计算结果，根据婚姻状况属性来划分根节点时取Gini系数增益最大的分组作为划分结果，也就是{married} | {single,divorced}。

<p>最后考虑年收入属性，我们发现它是一个连续的数值类型。我们在前面的文章里已经专门介绍过如何应对这种类型的数据划分了。对此还不是很清楚的朋友可以参考之前的文章，这里不再赘述。</p>

<p>对于年收入属性为数值型属性，首先需要对数据按升序排序，然后从小到大依次用相邻值的中间值作为分隔将样本划分为两组。例如当面对年收入为60和70这两个值时，我们算得其中间值为65。倘若以中间值65作为分割点。<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-60-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1370"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.202em, 1000em, 2.401em, -0.544em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1371""><span class=""msubsup"" id=""MathJax-Span-1372""><span style=""display: inline-block; position: relative; width: 0.752em; height: 0px;""><span style=""position: absolute; clip: rect(1.701em, 1000em, 2.759em, -0.544em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-1373"" style=""font-family: STIXGeneral; font-style: italic;"">S<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.008em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.49em;""><span class=""mi"" id=""MathJax-Span-1374"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.016em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-60"">S_l</script>作为年收入小于65的样本，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-61-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1375"" style=""width: 0.95em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.872em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.202em, 1000em, 2.393em, -0.544em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1376""><span class=""msubsup"" id=""MathJax-Span-1377""><span style=""display: inline-block; position: relative; width: 0.877em; height: 0px;""><span style=""position: absolute; clip: rect(1.701em, 1000em, 2.759em, -0.544em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-1378"" style=""font-family: STIXGeneral; font-style: italic;"">S<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.008em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.49em;""><span class=""mi"" id=""MathJax-Span-1379"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.016em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.008em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-61"">S_r</script>表示年收入大于等于65的样本，于是则得Gini系数增益为 <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-62-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1380"" style=""width: 27.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 25.794em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.63em, 1000em, 4.072em, -0.513em); top: -3.178em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1381""><span class=""mi"" id=""MathJax-Span-1382"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1383"" style=""font-family: STIXGeneral;"">(</span><span class=""texatom"" id=""MathJax-Span-1384""><span class=""mrow"" id=""MathJax-Span-1385""><span class=""mo"" id=""MathJax-Span-1386""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>年</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1387""><span class=""mrow"" id=""MathJax-Span-1388""><span class=""mo"" id=""MathJax-Span-1389""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>收</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1390""><span class=""mrow"" id=""MathJax-Span-1391""><span class=""mo"" id=""MathJax-Span-1392""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>入</span></span></span></span><span class=""mo"" id=""MathJax-Span-1393"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-1394"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1395"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.42</span><span class=""mo"" id=""MathJax-Span-1396"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1397"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.45em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1398"" style=""font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1399"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1400"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1401"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0</span><span class=""mo"" id=""MathJax-Span-1402"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1403"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 1.117em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.763em, -0.531em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1404"" style=""font-family: STIXGeneral;"">9</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.45em); top: -1.869em; left: 50%; margin-left: -0.498em;""><span class=""mn"" id=""MathJax-Span-1405"" style=""font-family: STIXGeneral;"">10</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 1.117em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1406"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""texatom"" id=""MathJax-Span-1407"" style=""padding-left: 0.25em;""><span class=""mrow"" id=""MathJax-Span-1408""><span class=""mo"" id=""MathJax-Span-1409"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">[</span></span></span></span></span><span class=""mn"" id=""MathJax-Span-1410"" style=""font-family: STIXGeneral;"">1</span><span class=""mo"" id=""MathJax-Span-1411"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1412"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1413""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1414"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.763em, -0.531em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1415"" style=""font-family: STIXGeneral;"">9</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1416""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1417"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1418"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1419"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1420"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1421""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1422"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.763em, -0.531em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1423"" style=""font-family: STIXGeneral;"">9</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1424""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1425"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1426"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""texatom"" id=""MathJax-Span-1427"" style=""""><span class=""mrow"" id=""MathJax-Span-1428""><span class=""mo"" id=""MathJax-Span-1429"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">]</span></span></span></span></span><span class=""mo"" id=""MathJax-Span-1430"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1431"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.02</span></span><span style=""display: inline-block; width: 0px; height: 3.178em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.347em; vertical-align: -0.824em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-62"">\Delta(年收入)=0.42-\frac{1}{10}\times 0-\frac{9}{10}\times\big[1-(\frac{6}{9})^2-(\frac{3}{9})^2\big]=0.02</script> <br>
其他值的计算同理可得，我们不再逐一给出计算过程，仅列出结果如下（最终我们取其中使得增益最大化的那个二分准则来作为构建二叉树的准则）： <br>
<center> <br>
<img src=""http://img.blog.csdn.net/20161123011250299"" width=""800""> <br>
</center> <br>
注意，这与我们之前在<a href=""http://blog.csdn.net/baimafujinji/article/details/51724371"">《数据挖掘十大算法之决策树详解（1）》</a>中得到的结果是一致的。最大化增益等价于最小化子女结点的不纯性度量（Gini系数）的加权平均值，之前的表里我们列出的是Gini系数的加权平均值，现在的表里给出的是Gini系数增益。现在我们希望最大化Gini系数的增益。根据计算知道，三个属性划分根节点的增益最大的有两个：年收入属性和婚姻状况，他们的增益都为0.12。此时，选取首先出现的属性作为第一次划分。<p></p>

<p>接下来，采用同样的方法，分别计算剩下属性，其中根节点的Gini系数为（此时是否拖欠贷款的各有3个records） <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-63-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1432"" style=""width: 20.017em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 18.692em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.015em, 1000em, 3.441em, -0.509em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1433""><span class=""mi"" id=""MathJax-Span-1434"" style=""font-family: STIXGeneral; font-style: italic;"">G</span><span class=""mi"" id=""MathJax-Span-1435"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-1436"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-1437"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mo"" id=""MathJax-Span-1438"" style=""font-family: STIXGeneral;"">(</span><span class=""texatom"" id=""MathJax-Span-1439""><span class=""mrow"" id=""MathJax-Span-1440""><span class=""mo"" id=""MathJax-Span-1441""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>是</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1442""><span class=""mrow"" id=""MathJax-Span-1443""><span class=""mo"" id=""MathJax-Span-1444""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>否</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1445""><span class=""mrow"" id=""MathJax-Span-1446""><span class=""mo"" id=""MathJax-Span-1447""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>拖</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1448""><span class=""mrow"" id=""MathJax-Span-1449""><span class=""mo"" id=""MathJax-Span-1450""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>欠</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1451""><span class=""mrow"" id=""MathJax-Span-1452""><span class=""mo"" id=""MathJax-Span-1453""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>贷</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1454""><span class=""mrow"" id=""MathJax-Span-1455""><span class=""mo"" id=""MathJax-Span-1456""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>款</span></span></span></span><span class=""mo"" id=""MathJax-Span-1457"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-1458"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1459"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">1</span><span class=""mo"" id=""MathJax-Span-1460"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1461"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1462""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1463"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1464"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1465""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1466"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1467"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1468"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1469"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1470""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1471"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1472"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1473""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1474"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1475"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1476"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1477"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.5</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.329em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-63"">Gini(是否拖欠贷款)=1-(\frac3{6})^2-(\frac3{6})^2=0.5</script> <br>
与前面的计算过程类似，对于是否有房属性，可得 <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true"" style=""text-align: center;""><span class=""MathJax"" id=""MathJax-Element-64-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-1478"" style=""width: 27.283em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 25.483em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.638em, 1000em, 4.064em, -0.513em); top: -3.178em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-1479""><span class=""mi"" id=""MathJax-Span-1480"" style=""font-family: STIXGeneral;"">Δ</span><span class=""mo"" id=""MathJax-Span-1481"" style=""font-family: STIXGeneral;"">{</span><span class=""texatom"" id=""MathJax-Span-1482""><span class=""mrow"" id=""MathJax-Span-1483""><span class=""mo"" id=""MathJax-Span-1484""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>是</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1485""><span class=""mrow"" id=""MathJax-Span-1486""><span class=""mo"" id=""MathJax-Span-1487""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>否</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1488""><span class=""mrow"" id=""MathJax-Span-1489""><span class=""mo"" id=""MathJax-Span-1490""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>有</span></span></span></span><span class=""texatom"" id=""MathJax-Span-1491""><span class=""mrow"" id=""MathJax-Span-1492""><span class=""mo"" id=""MathJax-Span-1493""><span style='font-family: STIXGeneral,""Arial Unicode MS"",serif; font-size: 93%; font-style: normal; font-weight: normal;'>房</span></span></span></span><span class=""mo"" id=""MathJax-Span-1494"" style=""font-family: STIXGeneral;"">}</span><span class=""mo"" id=""MathJax-Span-1495"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1496"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.5</span><span class=""mo"" id=""MathJax-Span-1497"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1498"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1499"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1500"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1501"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""texatom"" id=""MathJax-Span-1502"" style=""padding-left: 0.25em;""><span class=""mrow"" id=""MathJax-Span-1503""><span class=""mo"" id=""MathJax-Span-1504"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">[</span></span></span></span></span><span class=""mn"" id=""MathJax-Span-1505"" style=""font-family: STIXGeneral;"">1</span><span class=""mo"" id=""MathJax-Span-1506"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1507"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1508""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1509"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1510"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1511""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1512"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1513"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1514"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mo"" id=""MathJax-Span-1515"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">(</span><span class=""mfrac"" id=""MathJax-Span-1516""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.45em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1517"" style=""font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.549em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1518"" style=""font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""msubsup"" id=""MathJax-Span-1519""><span style=""display: inline-block; position: relative; width: 0.76em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.532em); top: -2.555em; left: 0em;""><span class=""mo"" id=""MathJax-Span-1520"" style=""font-family: STIXGeneral;"">)</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.531em; left: 0.312em;""><span class=""mn"" id=""MathJax-Span-1521"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""texatom"" id=""MathJax-Span-1522"" style=""""><span class=""mrow"" id=""MathJax-Span-1523""><span class=""mo"" id=""MathJax-Span-1524"" style=""vertical-align: -0.246em;""><span><span style=""font-size: 110%; font-family: STIXSizeOneSym;"">]</span></span></span></span></span><span class=""mo"" id=""MathJax-Span-1525"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mfrac"" id=""MathJax-Span-1526"" style=""padding-left: 0.25em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1527"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.684em, 1000em, 2.755em, -0.527em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-1528"" style=""font-family: STIXGeneral;"">6</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-1529"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">×</span><span class=""mn"" id=""MathJax-Span-1530"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">0</span><span class=""mo"" id=""MathJax-Span-1531"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-1532"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.25</span></span><span style=""display: inline-block; width: 0px; height: 3.178em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 2.329em; vertical-align: -0.816em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-64"">\Delta\{是否有房\}=0.5-\frac4{6}\times\big[1-(\frac{3}{4})^2-(\frac{1}{4})^2\big]-\frac2{6}\times0=0.25</script> <br>
对于年收入属性则有：

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161123103247420"" width=""480""> <br>
</center><p></p>

<p>最后我们构建的CART如下图所示：</p>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161123013214455"" width=""400""> <br>
</center><p></p>

<p>最后我们总结一下，CART和C4.5的主要区别：</p>

<ul>
<li>C4.5采用信息增益率来作为分支特征的选择标准，而CART则采用Gini系数； </li>
<li>C4.5不一定是二叉树，但CART一定是二叉树。</li>
</ul>

<hr>

<h2 id=""关于过拟合以及剪枝""><strong>关于过拟合以及剪枝</strong></h2>

<p>决策树很容易发生过拟合，也就是由于对train数据集适应得太好，反而在test数据集上表现得不好。这个时候我们要么是通过阈值控制终止条件避免树形结构分支过细，要么就是通过对已经形成的决策树进行剪枝来避免过拟合。另外一个克服过拟合的手段就是基于Bootstrap的思想建立随机森林（Random Forest）。关于剪枝的内容可以参考文献【2】以了解更多，如果有机会我也可能在后续的文章里讨论它。</p>

<hr>



<h2 id=""参考文献""><strong>参考文献</strong></h2>

<p>【1】Wu, X., Kumar, V., Quinlan, J.R., Ghosh, J., Yang, Q., Motoda, H., McLachlan, G.J., Ng, A., Liu, B., Philip, S.Y. and Zhou, Z.H., 2008. Top 10 algorithms in data mining. Knowledge and information systems, 14(1), pp.1-37. (<a href=""http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf"">http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf</a>） <br>
【2】李航，统计学习方法，清华大学出版社</p></div>",综合,2016-12-05 17:54
2564,在Android上面搭建HTTPS server。用于小型设备上提供服务。常用的场景有智能音箱类似的带嵌入性质的设备,xjz729827161,http://blog.csdn.net/xjz729827161/article/details/53466957,android 搭建https Server,,移动开发,2016-12-05 21:36
1500,"MyBatis Generator中文文档

MyBatis Generator中文文档地址：


http://mbg.cndocs.tk/


该中文文档由于尽可能和原文内容一致，...",ltaihyy,http://blog.csdn.net/ltaihyy/article/details/53468003,MyBatis Generator 详细讲解,,编程语言,2016-12-06 08:26
3696,"1 Iterator（ 遍历器） 的概念
JavaScript 原有的表示“ 集合” 的数据结构， 主要是数组（ Array） 和对象（ Object）， ES6 又添加了 Map 和 Set。 这...",qq_30100043,http://blog.csdn.net/qq_30100043/article/details/53463471,es6 javascript的Iterator 和 for...of 循环,,前端,2016-12-06 09:04
3404,在Root前提下，我们可以使用Hooker方式绑定so库，通过逆向方式篡改数值，从而达到所谓破解目的。然而，目前无论是软件加固方式，或是数据处理能力后台化，还是客户端数据真实性验证，都有了一定积累和发...,xiangzhihong8,http://blog.csdn.net/xiangzhihong8/article/details/53471541,Android逆向工程,,"移动开发,深入Android Framwork",2016-12-06 09:36
3705,支持多种屏幕Android 可在各种具有不同屏幕尺寸和密度的设备上运行。对于 应用，Android 系统在不同设备中提供一致的开发环境， 可以处理大多数工作，将每个应用的用户界面调整为适应其显示的 屏...,u010321471,http://blog.csdn.net/lpjishu/article/details/53465996,Android适配难题全面总结,"<div class=""markdown_views""><h1 id=""支持多种屏幕"">支持多种屏幕</h1>

<p>Android 可在各种具有不同屏幕尺寸和密度的设备上运行。对于 应用，Android 系统在不同设备中提供一致的开发环境， 可以处理大多数工作，将每个应用的用户界面调整为适应其显示的 屏幕。同时，系统提供 API，可用于控制 应用适用于特定屏幕尺寸和密度的 UI，以针对 不同屏幕配置优化 UI 设计。例如，您可能想要不同于手机 UI 的 平板电脑 UI。</p>

<p>虽然系统为使您的应用适用于不同的屏幕， 会进行缩放和大小调整，但您应针对不同的屏幕尺寸和密度优化 应用。这样可以最大程度优化所有设备上的用户体验，用户会 认为您的应用实际上是专为他们的设备而设计，而不是 简单地拉伸以适应其设备屏幕。</p>

<p>按照本文档所述的做法，您可以创建 正常显示的应用，然后使用 一个 .apk 文件在所有支持的屏幕配置中提供优化的用户体验。</p>



<h2 id=""注"">注</h2>

<p>：本文档中的信息假设您的 应用设计用于 Android 1.6（API 级别 4）或更高级别。</p>

<p>另请注意，Android 3.2 引入了新的 API，可用于更 精确地控制应用用于不同屏幕尺寸的布局资源。如果您要开发针对平板电脑优化的应用，这些新 功能特别重要。 </p>

<h1 id=""屏幕支持概览"">屏幕支持概览</h1>

<p>本节概述 Android 对多种屏幕的支持，包括： 本文档和 API 中所用术语和概述的简介、 系统支持的屏幕配置摘要，以及 API 和基本 屏幕兼容性功能的概述。</p>



<h1 id=""术语和概念"">术语和概念</h1>



<h2 id=""屏幕尺寸"">屏幕尺寸</h2>

<p>按屏幕对角测量的实际物理尺寸。 <br>
为简便起见，Android 将所有实际屏幕尺寸分组为四种通用尺寸：小、 正常、大和超大。</p>



<h2 id=""屏幕密度"">屏幕密度</h2>

<p>屏幕物理区域中的像素量；通常称为 dpi（每英寸 点数）。例如， 与“正常”或“高”密度屏幕相比，“低”密度屏幕在给定物理区域的像素较少。 <br>
为简便起见，Android 将所有屏幕密度分组为六种通用密度： 低、中、高、超高、超超高和超超超高。</p>



<h2 id=""方向"">方向</h2>

<p>从用户视角看屏幕的方向，即横屏还是 竖屏，分别表示屏幕的纵横比是宽还是高。请注意， 不仅不同的设备默认以不同的方向操作，而且 方向在运行时可随着用户旋转设备而改变。</p>



<h2 id=""分辨率"">分辨率</h2>

<p>屏幕上物理像素的总数。添加对多种屏幕的支持时， 应用不会直接使用分辨率；而只应关注通用尺寸和密度组指定的屏幕 尺寸及密度。</p>



<h2 id=""密度无关像素-dp"">密度无关像素 (dp)</h2>

<p>在定义 UI 布局时应使用的虚拟像素单位，用于以密度无关方式表示布局维度 或位置。 <br>
密度无关像素等于 160 dpi 屏幕上的一个物理像素，这是 系统为“中”密度屏幕假设的基线密度。在运行时，系统 根据使用中屏幕的实际密度按需要以透明方式处理 dp 单位的任何缩放 。dp 单位转换为屏幕像素很简单： px = dp * (dpi / 160)。 例如，在 240 dpi 屏幕上，1 dp 等于 1.5 物理像素。在定义应用的 UI 时应始终使用 dp 单位 ，以确保在不同密度的屏幕上正常显示 UI。</p>



<h2 id=""支持的屏幕范围"">支持的屏幕范围</h2>

<p>从 Android 1.6（API 级别 4）开始，Android 支持多种屏幕尺寸和密度，反映设备可能具有的多种不同屏幕配置。 您可以使用 Android 系统的功能优化应用在各种屏幕配置下的用户界面 ，确保应用不仅正常渲染，而且在每个屏幕上提供 最佳的用户体验。</p>

<p>为简化您为多种屏幕设计用户界面的方式，Android 将实际屏幕尺寸和密度的范围 分为：</p>



<h1 id=""四种通用尺寸小正常-大-和超大"">四种通用尺寸：小、正常、 大 和超大</h1>

<p>注：从 Android 3.2（API 级别 13）开始，这些尺寸组 已弃用，而采用根据可用屏幕宽度管理屏幕尺寸的 新技术。如果为 Android 3.2 和更高版本开发，请参阅声明适用于 Android 3.2 的平板电脑布局以了解更多信息。</p>



<h1 id=""六种通用的密度"">六种通用的密度：</h1>

<p>ldpi（低）~120dpi <br>
mdpi（中）~160dpi <br>
hdpi（高）~240dpi <br>
xhdpi（超高）~320dpi <br>
xxhdpi（超超高）~480dpi <br>
xxxhdpi（超超超高）~640dpi <br>
通用的尺寸和密度按照基线配置（即正常尺寸和 mdpi（中）密度）排列。 此基线基于第一代 Android 设备 (T-Mobile G1) 的屏幕配置，该设备采用 HVGA 屏幕（在 Android 1.6 之前，这是 Android 支持的唯一屏幕配置）。</p>

<p>每种通用的尺寸和密度都涵盖一个实际屏幕尺寸和密度范围。例如， 两部都报告正常屏幕尺寸的设备在手动测量时，实际屏幕尺寸和 高宽比可能略有不同。类似地，对于两台报告 hdpi 屏幕密度的设备，其实际像素密度可能略有不同。 Android 将这些差异抽象概括到应用，使您可以提供为通用尺寸和密度设计的 UI，让系统按需要处理任何最终调整。 图 1 说明不同的尺寸和密度如何粗略归类为不同的尺寸 和密度组。 <br>
<img src=""http://img.blog.csdn.net/20161205150955676"" alt=""这里写图片描述"" title=""""></p>

<p>图 1. 说明 Android 如何将实际尺寸和密度粗略地 对应到通用的尺寸和密度（数据并不精确）。</p>

<p>在为不同的屏幕尺寸设计 UI 时，您会发现每种设计都需要 最小空间。因此，上述每种通用的屏幕尺寸都关联了系统定义的最低 分辨率。这些最小尺寸以“dp”单位表示 — 在定义布局时应使用相同的单位 — 这样系统无需担心屏幕密度的变化。</p>

<p>超大屏幕至少为 960dp x 720dp <br>
大屏幕至少为 640dp x 480dp <br>
正常屏幕至少为 470dp x 320dp <br>
小屏幕至少为 426dp x 320dp <br>
注：这些最小屏幕尺寸在 Android 3.0 之前未正确定义，因此某些设备在正常屏幕与大屏幕之间变换时可能会出现分类错误的情况。 这些尺寸还基于屏幕的物理分辨率，因此设备之间可能不同 — 例如，具有系统状态栏的 1024x720 平板电脑因系统状态栏要占用空间，所以可供 应用使用的空间要小一点。</p>

<p>要针对不同的屏幕尺寸和密度优化应用的 UI，可为任何通用的尺寸和密度提供 替代 资源。通常，应为某些不同的屏幕尺寸提供替代布局，为不同的屏幕密度提供替代位图图像。 在运行时，系统会根据当前设备屏幕的通用 尺寸或密度对应用使用适当的资源。</p>

<p>无需为屏幕尺寸和 密度的每个组合提供替代资源。系统提供强大的兼容性功能，可处理在任何设备屏幕上 渲染应用的大多数工作，前提是您已经使用 可以适当调整大小的技术实现 UI（如下面的最佳做法所述）。</p>

<p>注：定义设备通用屏幕 尺寸和密度的特性相互独立。例如，WVGA 高密度屏幕 被视为正常尺寸屏幕，因为其物理尺寸与 T-Mobile G1 （Android 的第一代设备和基线屏幕配置）大约相同。另一方面，WVGA 中密度 屏幕被视为大尺寸屏幕。虽然它提供相同的分辨率（相同的 像素数），但 WVGA 中密度屏幕的屏幕密度更低，意味着每个像素 实际上更大，因此整个屏幕大于基线（正常尺寸）屏幕。</p>



<h1 id=""密度独立性"">密度独立性</h1>

<p>应用显示在密度不同的屏幕上时，如果它保持用户界面元素的物理尺寸（从 用户的视角），便可实现“密度独立性” 。</p>

<p>保持密度独立性很重要，因为如果没有此功能，UI 元素（例如 按钮）在低密度屏幕上看起来较大，在高密度屏幕上看起来较小。这些 密度相关的大小变化可能给应用布局和易用性带来问题。图 2 和 3 分别显示了应用不提供密度独立性和 提供密度独立性时的差异。</p>

<p><img src=""http://img.blog.csdn.net/20161205153034278"" alt=""这里写图片描述"" title=""""> <br>
图 2. 不支持不同密度的示例应用在低、中、高密度屏幕上的显示情况。</p>

<p><img src=""http://img.blog.csdn.net/20161205153042811"" alt=""这里写图片描述"" title=""""> <br>
图 3. 良好支持不同密度（密度独立）的示例应用在低、中、高密度屏幕上的显示情况。</p>

<p>Android 系统可帮助您的应用以两种方式实现密度独立性：</p>

<p>系统根据当前屏幕密度扩展 dp 单位数 <br>
系统在必要时可根据当前屏幕 密度将可绘制对象资源扩展到适当的大小 <br>
在图 2 中，文本视图和位图可绘制对象具有以像素（px 单位）指定的尺寸，因此视图的物理尺寸在低密度屏幕上更大，在高密度 屏幕上更小。这是因为，虽然实际屏幕尺寸可能相同，但高密度屏幕 的每英寸像素更多（同样多的像素在一个更小的区域内）。在图 3 中，布局 尺寸以密度独立的像素（dp 单位）指定。由于 密度独立像素的基线是中密度屏幕，因此具有中密度屏幕的设备看起来 与图 2 一样。但对于低密度和高密度屏幕，系统 将分别增加和减少密度独立像素值，以适应 屏幕。</p>

<p>大多数情况下，确保应用中的屏幕独立性很简单，只需以适当的密度独立像素（dp 单位）或 “wrap_content” 指定所有 布局尺寸值。系统然后根据适用于当前屏幕密度的缩放比例适当地缩放位图可绘制对象，以 适当的大小显示。</p>

<p>但位图缩放可能导致模糊或像素化位图，您或许已经在上面的屏幕截图中 发现了这些问题。为避免这些伪影，应为 不同的密度提供替代的位图资源。例如，应为高密度 屏幕提供分辨率较高的位图，然后系统对中密度 屏幕将使用这些位图，而无需调整位图大小。下一节详细说明如何为 不同的屏幕配置提供替代资源。</p>



<h1 id=""如何支持多种屏幕"">如何支持多种屏幕</h1>

<p>Android 支持多种屏幕的基础是它能够管理针对当前屏幕配置 以适当方式渲染应用的布局和位图 可绘制对象。系统可处理大多数工作，通过适当地 缩放布局以适应屏幕尺寸/密度和根据屏幕密度缩放位图可绘制对象 ，在每种屏幕配置中渲染您的应用。但是，为了更适当地处理不同的屏幕配置 ，还应该：</p>

<p>在清单中显式声明您的应用 支持哪些屏幕尺寸 <br>
通过声明您的应用支持哪些屏幕尺寸，可确保只有 其屏幕受支持的设备才能下载您的应用。声明对 不同屏幕尺寸的支持也可影响系统如何在较大 屏幕上绘制您的应用 — 特别是，您的应用是否在屏幕兼容模式中运行。 <br>
要声明应用支持的屏幕尺寸，应在清单文件中包含 supports-screens 元素。 <br>
为不同屏幕尺寸提供不同的布局 <br>
默认情况下，Android 会调整应用布局的大小以适应当前设备屏幕。大多数 情况下效果很好。但有时 UI 可能看起来不太好，需要针对 不同的屏幕尺寸进行调整。例如，在较大屏幕上，您可能要调整 某些元素的位置和大小，以利用其他屏幕空间，或者在较小屏幕上， 可能需要调整大小以使所有内容纳入屏幕。 <br>
可用于提供尺寸特定资源的配置限定符包括 small、normal、large 和 xlarge。例如，超大屏幕的布局应使用 layout-xlarge/。 <br>
从 Android 3.2（API 级别 13）开始，以上尺寸组已弃用，您 应改为使用 swdp 配置限定符来定义布局资源 可用的最小宽度。例如，如果多窗格平板电脑布局 需要至少 600dp 的屏幕宽度，应将其放在 layout-sw600dp/ 中。声明适用于 Android 3.2 的平板电脑布局一节将进一步讨论如何使用新技术声明布局资源。 <br>
为不同屏幕密度提供不同的位图可绘制对象 <br>
默认情况下，Android 会缩放位图可绘制对象（.png、.jpg 和 .gif 文件）和九宫格可绘制对象（.9.png 文件），使它们以适当的 物理尺寸显示在每部设备上。例如，如果您的应用只为 基线中密度屏幕 (mdpi) 提供位图可绘制对象，则在高密度 屏幕上会增大位图，在低密度屏幕上会缩小位图。这种缩放可能在 位图中造成伪影。为确保位图的最佳显示效果，应针对 不同屏幕密度加入不同分辨率的替代版本。 <br>
可用于密度特定资源的配置限定符（在下面详述） 包括 ldpi（低）、mdpi（中）、 hdpi（高）、xhdpi（超高）、xxhdpi （超超高）和 xxxhdpi（超超超高）。例如，高密度屏幕的位图应使用 drawable-hdpi/。 <br>
注：仅当要在 xxhdpi 设备上提供比正常位图大的启动器图标时才需要提供 mipmap-xxxhdpi 限定符。无需为所有应用的图像提供 xxxhdpi 资源。</p>

<p>有些设备会将启动器图标增大 25%。例如，如果您的最高 密度启动器图标已是超超高密度，缩放处理会降低其 清晰度。因此应在 mipmap-xxxhdpi 目录中提供更高密度的启动器图标，系统将改为增大较小 的图标。 <br>
请参阅提供 xxx-高密度启动器图标以了解详细信息。对启动程序图标以外的 UI 元素不应使用 xxxhdpi 限定符。 <br>
注：将您的所有启动器图标放在 res/mipmap-[density]/ 文件夹中，而非 res/drawable-[density]/ 文件夹中。无论安装应用的设备屏幕分辨率如何，Android 系统都会将资源保留在这些密度特定的文件夹中，例如 mipmap-xxxhdpi。此 行为可让启动器应用为您的应用选择要显示在主 屏幕上的最佳分辨率图标。如需了解有关使用 mipmap 文件夹的详细信息，请参阅管理项目概览。</p>

<p>尺寸和密度配置限定符对应于 前面支持的屏幕范围中所述的通用尺寸和密度。</p>

<p>在运行时，系统通过 以下程序确保任何给定资源在当前屏幕上都能保持尽可能最佳的显示效果：</p>



<h1 id=""系统使用适当的替代资源"">系统使用适当的替代资源</h1>

<p>根据当前屏幕的尺寸和密度，系统将使用您的应用中提供的任何尺寸和 密度特定资源。例如，如果设备有 高密度屏幕，并且应用请求可绘制对象资源，系统将查找 与设备配置最匹配的可绘制对象资源目录。根据可用的其他 替代资源，包含 hdpi 限定符（例如 drawable-hdpi/）的资源目录可能是最佳匹配项，因此系统将使用此 目录中的可绘制对象资源。 <br>
如果没有匹配的资源，系统将使用默认资源，并按需要向上 或向下扩展，以匹配当前的屏幕尺寸和密度。 <br>
“默认”资源是指未标记配置限定符的资源。例如，drawable/ 中的资源是默认可绘制资源。 系统假设默认资源设计用于基线屏幕尺寸和密度，即 正常屏幕尺寸和中密度。 因此，系统对于高密度屏幕向上扩展默认密度 资源，对于低密度屏幕向下扩展。 <br>
当系统查找密度特定的资源但在 密度特定目录中未找到时，不一定会使用默认资源。系统在缩放时可能 改用其他密度特定资源提供更好的 效果。例如，查找低密度资源但该资源不可用时， 系统会缩小资源的高密度版本，因为 系统可轻松以 0.5 为系数将高密度资源缩小至低密度资源，与以 0.75 为系数 缩小中密度资源相比，伪影更少。 <br>
如需有关 Android 如何通过使配置 限定符与设备配置匹配来选择替代资源的更多信息，请参阅 Android 如何 查找最佳匹配资源。</p>



<h1 id=""使用配置限定符"">使用配置限定符</h1>

<p>Android 支持多种配置限定符，可让您控制系统 如何根据当前设备屏幕的特性选择替代资源。配置限定符是可以附加到 Android 项目中资源目录的字符串，用于指定在其中设计资源的配置。</p>



<h1 id=""要使用配置限定符"">要使用配置限定符：</h1>



<pre class=""prettyprint""><code class="" hljs xml"">在项目的 res/ 目录中新建一个目录，并使用以下 格式命名： <span class=""hljs-tag"">&lt;<span class=""hljs-title"">resources_name</span>&gt;</span>-<span class=""hljs-tag"">&lt;<span class=""hljs-title"">qualifier</span>&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-title"">resources_name</span>&gt;</span> 是标准资源名称（例如 drawable 或 layout）。
<span class=""hljs-tag"">&lt;<span class=""hljs-title"">qualifier</span>&gt;</span> 是下表 1 中的配置限定符，用于指定 要使用这些资源的屏幕配置（例如 hdpi 或 xlarge）。
您可以一次使用多个 <span class=""hljs-tag"">&lt;<span class=""hljs-title"">qualifier</span>&gt;</span> — 只需使用短划线分隔每个 限定符。</code></pre>

<p>将适当的配置特定资源保存在此新目录下。这些资源 文件的名称必须与默认资源文件完全一样。 <br>
例如，xlarge 是超大屏幕的配置限定符。将 此字符串附加到资源目录名称（例如 layout-xlarge）时，它指向 要在具有超大屏幕的设备上使用这些资源的系统。</p>

<p>表 1. 可用于为 不同屏幕配置提供特殊资源的配置限定符。</p>



<pre class=""prettyprint""><code class="" hljs livecodeserver"">屏幕特性    限定符 说明
尺寸  small   适用于小尺寸屏幕的资源。
<span class=""hljs-keyword"">normal</span>  适用于正常尺寸屏幕的资源。（这是基线尺寸。）
large   适用于大尺寸屏幕的资源。
xlarge  适用于超大尺寸屏幕的资源。
密度  ldpi    适用于低密度 (ldpi) 屏幕 (~<span class=""hljs-number"">120</span>dpi) 的资源。
mdpi    适用于中密度 (mdpi) 屏幕 (~<span class=""hljs-number"">160</span>dpi) 的资源。（这是基线 密度。）
hdpi    适用于高密度 (hdpi) 屏幕 (~<span class=""hljs-number"">240</span>dpi) 的资源。
xhdpi   适用于超高密度 (xhdpi) 屏幕 (~<span class=""hljs-number"">320</span>dpi) 的资源。
xxhdpi  适用于超超高密度 (xxhdpi) 屏幕 (~<span class=""hljs-number"">480</span>dpi) 的资源。
xxxhdpi 适用于超超超高密度 (xxxhdpi) 屏幕 (~<span class=""hljs-number"">640</span>dpi) 的资源。此限定符仅适用于 启动器图标，请参阅上面的注。
nodpi   适用于所有密度的资源。这些是密度独立的资源。不管当前屏幕的密度如何，系统都不会 缩放以此限定符标记的资源。
tvdpi   适用于密度介于 mdpi 和 hdpi 之间屏幕（约为 <span class=""hljs-number"">213</span>dpi）的资源。它并不是 “主要”密度组，主要用于电视，而大多数应用都不 需要它 — 对于大多数应用而言，提供 mdpi 和 hdpi 资源便已足够，系统将根据需要对其进行 缩放。如果发现必须提供 tvdpi 资源，应以 <span class=""hljs-number"">1.33</span>*mdpi 的系数 调整其大小。例如，mdpi 屏幕的 <span class=""hljs-number"">100</span>px x <span class=""hljs-number"">100</span>px 图像应该相当于 tvdpi 的 <span class=""hljs-number"">133</span>px x <span class=""hljs-number"">133</span>px。
方向  land    适用于横屏（长宽比）的资源。
方向port  适用于竖屏（高宽比）的资源。
纵横比 <span class=""hljs-keyword"">long</span>    适用于纵横比明显高于或宽于（分别在竖屏 或横屏时）基线屏幕配置的屏幕的资源。
notlong 适用于使用纵横比类似于基线屏幕 配置的屏幕的资源。</code></pre>

<p>注：如果是为 Android 3.2 和 更高版本开发应用，请参阅有关声明适用于 Android 3.2 的平板电脑布局的章节，了解 在为特定屏幕尺寸声明布局资源时应使用的 新配置限定符（而不是使用表 1 中的尺寸限定符）。</p>

<p>如需了解有关这些限定符如何粗略地对应于实际屏幕 尺寸和密度的更多信息，请参阅本文档前面的支持的屏幕范围 。</p>

<p>例如，以下应用资源目录 为不同屏幕尺寸和不同可绘制对象提供不同的布局设计。使用 mipmap/ 文件夹放置 启动器图标。</p>

<p>res/layout/my_layout.xml              // layout for normal screen size (“default”) <br>
res/layout-large/my_layout.xml        // layout for large screen size <br>
res/layout-xlarge/my_layout.xml       // layout for extra-large screen size <br>
res/layout-xlarge-land/my_layout.xml  // layout for extra-large in landscape orientation</p>

<p>res/drawable-mdpi/graphic.png         // bitmap for medium-density <br>
res/drawable-hdpi/graphic.png         // bitmap for high-density <br>
res/drawable-xhdpi/graphic.png        // bitmap for extra-high-density <br>
res/drawable-xxhdpi/graphic.png       // bitmap for extra-extra-high-density</p>

<p>res/mipmap-mdpi/my_icon.png         // launcher icon for medium-density <br>
res/mipmap-hdpi/my_icon.png         // launcher icon for high-density <br>
res/mipmap-xhdpi/my_icon.png        // launcher icon for extra-high-density <br>
res/mipmap-xxhdpi/my_icon.png       // launcher icon for extra-extra-high-density <br>
res/mipmap-xxxhdpi/my_icon.png      // launcher icon for extra-extra-extra-high-density</p>

<p>请注意，当 Android 系统在运行时选择使用哪些资源时，它会使用 特定逻辑确定“最佳匹配”资源。也就是说，您使用的限定符无 需在所有情况下精确匹配当前屏幕配置，系统也可 使用它们。特别是，根据屏幕尺寸限定符选择资源时，如果没有更好的匹配资源，则系统将 使用专为小于当前屏幕的屏幕而设计的 资源（例如，如有必要，大尺寸屏幕将使用标准尺寸的屏幕 资源）。但是，如果唯一可用的资源大于当前屏幕， 则系统不会使用这些资源，并且如果没有其他资源与设备 配置匹配，应用将会崩溃（例如，如果所有布局资源均用 xlarge 限定符标记， 但设备是标准尺寸的屏幕）。 <br>
提示：如果您有一些系统 应该永远不会缩放（或许是因为您在 运行时亲自对图像做一些调整）的可绘制对象资源，则应将它们放在有 nodpi 配置限定符的目录中。 使用此限定符的资源被视为与密度无关，系统不会缩放 它们。</p>



<h1 id=""设计替代布局和可绘制对象"">设计替代布局和可绘制对象</h1>

<p>您应该创建的替代资源类型取决于应用的需求。 通常，您应该使用尺寸和方向限定符提供替代布局资源 ，并且使用密度限定符提供替代位图可绘制对象资源。</p>

<p>以下各节摘要说明您可能要如何使用尺寸和密度限定符 来分别提供替代布局和可绘制对象。</p>



<h1 id=""替代布局"">替代布局</h1>

<p>一般而言，在不同的屏幕配置上测试应用后，您会知道 是否需要用于不同屏幕尺寸的替代布局。例如：</p>

<p>在小屏幕上测试时，可能会发现您的布局不太适合 屏幕。例如，小屏幕设备的屏幕宽度可能无法容纳一排 按钮。在此情况下，您应该为小屏幕提供调整 按钮大小或位置的替代布局。 <br>
在超大屏幕上测试时，可能会发现您的布局无法 有效地利用大屏幕，并且明显拉伸填满屏幕。 在此情况下，您应该为超大屏幕提供替代布局，以提供 针对大屏幕（例如平板电脑）优化、重新设计的 UI。 <br>
虽然您的应用不使用替代布局也能在大屏幕上正常运行，但 必须让用户感觉您的应用看起来像是专为其 设备而设计。如果 UI 明显拉伸，用户很可能对 应用体验不满意。 <br>
而且，对比横屏测试和竖屏测试时 可能会发现，竖屏时置于底部的 UI 在横屏时应位于屏幕右侧。 <br>
简而言之，您应确保应用布局：</p>

<p>适应小屏幕（让用户能实际使用您的应用） <br>
已针对大屏幕优化，可以利用其他屏幕空间 <br>
已同时针对横屏和竖屏方向优化 <br>
如果 UI 使用的位图即使在系统缩放 布局后也需要适应视图大小（例如按钮的背景图片），则应使用九宫格位图文件。九宫格文件基本上是一个指定可拉伸的二维区域的 PNG 文件。 当系统需要缩放使用位图的视图时，系统 会拉伸九宫格位图，但只拉伸指定的区域。因此，您无 需为不同的屏幕尺寸提供不同的可绘制对象，因为九宫格位图可 调整至任何大小。但您应该为不同的屏幕密度提供 九宫格文件的替代版本。</p>



<h1 id=""替代可绘制对象"">替代可绘制对象</h1>

<p><img src=""http://img.blog.csdn.net/20161205153309690"" alt=""这里写图片描述"" title=""""> <br>
图 4. 支持每种密度的 位图可绘制对象的相对大小。</p>

<p>基本上每个应用都应该具有不同密度的替代可绘制对象 资源，因为基本上每个应用都有启动器图标，而且该图标应该在 所有屏幕密度中看起来都很好。同样，如果您的应用中包含其他位图可绘制对象（例如 应用中的菜单图标或其他图形），则应该为不同密度提供替代版本或 每种密度一个版本。</p>

<p>注：您只需要为 位图文件（.png、.jpg 或 .gif）和九宫格文件 (.9.png) 提供密度特定的可绘制对象。如果您使用 XML 文件定义形状、颜色或其他可绘制对象资源，应该 将一个副本放在默认可绘制对象目录中 (drawable/)。</p>

<p>要为不同的密度创建替代位图可绘制对象，应遵循六种通用密度之间的 3:4:6:8:12:16 缩放比率。例如，如果您的 位图可绘制对象是对中密度屏幕使用 48x48 像素，则所有不同的尺寸应为：</p>

<p>36x36 (0.75x) 用于低密度 <br>
48x48（1.0x 基线）用于中密度 <br>
72x72 (1.5x) 用于高密度 <br>
96x96 (2.0x) 用于超高密度 <br>
144x144 (3.0x) 用于超超高密度 <br>
192x192 (4.0x) 用于超超超高密度（仅限启动器图标；请参阅上面的 注） <br>
如需了解有关设计图标的更多信息，请参阅图标设计指南， 其中包含各种位图可绘制对象（例如启动器图标、菜单 图标、状态栏图标、选项卡图标等）的大小信息。</p>

<p>声明适用于 Android 3.2 的平板电脑布局 <br>
对于第一代运行 Android 3.0 的平板电脑，声明平板电脑 的正确方式是将它们放在有 xlarge 配置限定符的目录（例如 res/layout-xlarge/）中。为适应其他类型的平板电脑和屏幕 尺寸 — 特别是 7 英寸平板电脑 — Android 3.2 引入了为更具体的屏幕尺寸指定资源 的新方式。新技术基于布局需要的空间量 （例如 600dp 宽），而不是尝试让您的布局容纳通用化的尺寸组 （例如大或超大）。</p>

<p>使用通用化的尺寸组时，为 7 英寸平板电脑设计很棘手的原因在于， 7 英寸平板电脑在技术上与 5 英寸手机属于同一个组（大组）。虽然 这两种设备在尺寸上似乎很接近，但用于 应用 UI 的空间量明显不同，用户交互的方式也是如此。因此，7 英寸和 5 英寸 屏幕不一定使用相同的布局。为便于您为这两种屏幕提供不同的 布局，Android 现在允许您 根据实际适用于应用布局的宽度和/或高度指定布局资源（ 以 dp 单位数指定）。</p>

<p>例如，在设计要用于平板电脑样式设备的布局之后，您可能 发现该布局在屏幕宽度小于 600dp 时不适用。此阈值 于是变成平板电脑布局需要的最小尺寸。因此，您现在可以指定应仅当至少有 600dp 宽度供应用的 UI 使用时才使用这些布局资源。</p>

<p>应选择一个宽度并将其设计为最小尺寸，或者在布局设计完成后测试 其支持的最小宽度。</p>

<p>注：请记住，这些新尺寸 API 使用的所有数据是密度独立的像素 (dp) 值，您的布局尺寸也应始终 使用 dp 单位定义，因为您关注的是系统 考虑屏幕密度后可用的屏幕空间量（与使用原始像素分辨率相反）。如需了解 密度独立像素的更多信息，请参阅本文档前面的术语和概念 。</p>



<h1 id=""使用新尺寸限定符"">使用新尺寸限定符</h1>

<p>表 2 摘要列出了您可以根据 布局可用空间指定的不同资源配置。与传统的屏幕尺寸组（小、 正常、大和超大）相比，这些新的限定符可用于更多地控制 应用支持的屏幕尺寸。</p>

<p>注：您使用这些限定符指定的尺寸 不是实际屏幕尺寸。更确切地说，尺寸是 可用于 Activity 窗口的宽度或高度（dp 单位）。Android 系统 可能将某些屏幕用于系统 UI（例如屏幕底部的系统栏或 顶部的状态栏），因此有些屏幕可能不适用于您的布局。因此， 您声明的尺寸应与 Activity 需要的尺寸具体相关 — 系统 在声明向您的布局提供的空间量时会计算系统 UI 使用的任何空间。 另请注意，操作栏被视为 应用的窗口空间的一部分，但您的布局未声明此事，因此会减少 您的布局可用的空间，您在设计时必须考虑进去。</p>

<p>表 2. 屏幕尺寸的新配置限定符 （在 Android 3.2 中引入）。 <br>
屏幕配置    限定符值    说明</p>



<pre class=""prettyprint""><code class="" hljs xml"">smallestWidth   sw<span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp</code></pre>

<p>示例： <br>
sw600dp <br>
sw720dp</p>



<pre class=""prettyprint""><code class="" hljs xml"">屏幕的基本尺寸，由可用屏幕区域的最小尺寸指定。 具体来说，设备的 smallestWidth 是屏幕可用高度和宽度的最小尺寸（您也可以将其视为屏幕的“最小可能宽度”）。无论屏幕的当前方向如何，您均可使用此限定符确保应用 UI 的可用宽度至少为 <span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp。

例如，如果布局要求屏幕区域的最小尺寸始终至少为 600 dp，则可使用此限定符创建布局资源 res/layout-sw600dp/。仅当可用屏幕的最小尺寸至少为 600dp 时，系统才会使用这些资源，而不考虑 600dp 所代表的边是用户所认为的高度还是宽度。smallestWidth 是设备的固定屏幕尺寸特性；设备的 smallestWidth 不会随屏幕方向的变化而改变。

设备的 smallestWidth 将屏幕装饰元素和系统 UI 考虑在内。例如，如果设备的屏幕上有一些永久性 UI 元素占据沿 smallestWidth 轴的空间，则系统会声明 smallestWidth 小于实际屏幕尺寸，因为这些屏幕像素不适用于您的 UI。

这可替代通用化的屏幕尺寸限定符（小、正常、大、超大）， 可让您为 UI 可用的有效尺寸定义不连续的数值。 使用 smallestWidth 定义一般屏幕尺寸很有用，因为宽度 通常是设计布局时的驱动因素。UI 经常会垂直滚动，但 对其水平需要的最小空间具有非常硬性的限制。可用的宽度也是 确定是否对手机使用单窗格布局或是对平板电脑使用多窗格布局 的关键因素。因此，您可能最关注每部 设备上的最小可能宽度。
可用屏幕宽度  w<span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp

示例：
w720dp
w1024dp
指定资源应该使用的最小可用宽度（dp 单位） — 由 <span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span> 值定义。当屏幕的方向在横屏与竖屏之间切换时，系统对应的 宽度值将会变化，以 反映 UI 可用的当前实际宽度。

这对于确定是否使用多窗格布局往往很有用，因为即使是在 平板电脑设备上，您也通常不希望竖屏像横屏一样 使用多窗格布局。因此，您可以使用此功能指定布局需要的最小宽度，而 无需同时使用屏幕尺寸和方向限定符。
可用屏幕高度  h<span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp

示例：
h720dp
h1024dp
等等  
指定资源应该使用的最小屏幕高度（dp 单位） — 由 <span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span> 值定义。当屏幕的方向在横屏与竖屏之间切换时，系统 对应的高度值将会变化，以 反映 UI 可用的当前实际高度。

使用此方式定义 布局需要的高度很有用，它与使用 w<span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp 定义 所需宽度的方式相同，无需同时使用屏幕尺寸和方向限定符。 但大多数应用不需要此限定符，考虑到 UI 经常垂直滚动， 因此高度更弹性，而宽度更刚性。</code></pre>

<p>虽然使用这些限定符似乎比使用屏幕尺寸组更复杂，但 当您确定 UI 的要求后，它实际上应该更简单。在设计 UI 时， 您主要关注的可能是应用在 手机样式 UI 与使用多窗格的平板电脑样式 UI 之间切换时的实际尺寸。此确切的精确时间 取决于特定设计 — 可能平板电脑布局需要 720dp 宽度， 但 600dp、480dp 或这两者之间的某个值就够了。使用表 2 中的这些限定符 可以控制布局切换时的精确尺寸。</p>

<p>如需有关这些尺寸配置限定符的更多讨论，请参阅 提供资源文档。</p>

<h1 id=""配置示例"">配置示例</h1>

<p>为帮助您针对不同的设备类型确定某些设计，下面提供了一些 常见的屏幕宽度值：</p>

<p>320dp：常见手机屏幕（240x320 ldpi、320x480 mdpi、480x800 hdpi 等）。 <br>
480dp：中间平板电脑，例如 Streak (480x800 mdpi)。 <br>
600dp：7 英寸平板电脑 (600x1024 mdpi)。 <br>
720dp：10 英寸平板电脑（720x1280 mdpi、800x1280 mdpi 等）。 <br>
利用表 2 中的尺寸限定符，您的应用可以使用要用于宽度和/或高度的 的任何值，在用于手机和平板电脑的不同布局资源之间切换。例如， 如果 600dp 是平板电脑布局支持的最小可用宽度，您可以提供以下两 组布局：</p>

<p>res/layout/main_activity.xml           # For handsets <br>
res/layout-sw600dp/main_activity.xml   # For tablets <br>
在此情况下，可用屏幕空间的最小宽度必须是 600dp，才可 应用平板电脑布局。</p>

<p>对于要进一步自定义 UI 以区分不同尺寸 （例如 7 英寸和 10 英寸平板电脑）的其他情况，您可以定义其他最小宽度布局：</p>

<p>res/layout/main_activity.xml           # For handsets (smaller than 600dp available width) <br>
res/layout-sw600dp/main_activity.xml   # For 7” tablets (600dp wide and bigger) <br>
res/layout-sw720dp/main_activity.xml   # For 10” tablets (720dp wide and bigger) <br>
请注意，上面两组示例资源使用“最小宽度”限定符 swdp，用于指定屏幕两边的最小值，而不管设备 当前的方向如何。</p>



<pre class=""prettyprint""><code class="" hljs xml"">因此，使用 sw<span class=""hljs-tag"">&lt;<span class=""hljs-title"">N</span>&gt;</span>dp 是指定 布局可用于整体屏幕尺寸的简便方法，它会忽略屏幕的方向。</code></pre>

<p>但在某些情况下，可能 必须确定布局当前可用的精确宽度或高度。例 如，如果是并排显示两个片段的双窗格布局，则只要 屏幕提供至少 600dp 的宽度（无论设备是横屏还是竖屏）， 您可能就要使用该布局。在此情况下，您的资源可能与以下所示类似：</p>



<pre class=""prettyprint""><code class="" hljs mathematica"">res/layout/main_activity.xml         # <span class=""hljs-keyword"">For</span> handsets (smaller than <span class=""hljs-number"">600</span>dp available width)
res/layout-w600dp/main_activity.xml  # Multi-pane (any screen with <span class=""hljs-number"">600</span>dp available width or more)
请注意，第二组使用“可用宽度”限定符 w&lt;<span class=""hljs-keyword"">N</span>&gt;dp。这 样，一部设备可能实际使用两种布局，具体取决于屏幕的方向（如果 可用的宽度在一个方向上至少为 <span class=""hljs-number"">600</span>dp，而在另一个方向上小于 <span class=""hljs-number"">600</span>dp）。

如果您关注可用高度，便可使用 h&lt;<span class=""hljs-keyword"">N</span>&gt;dp 限定符执行同样的操作。或者，如果您需要很具体，甚至可以结合 w&lt;<span class=""hljs-keyword"">N</span>&gt;dp 与 h&lt;<span class=""hljs-keyword"">N</span>&gt;dp 限定符。</code></pre>



<h1 id=""声明屏幕尺寸支持"">声明屏幕尺寸支持</h1>

<p>在对不同的屏幕尺寸实现您的布局后，在 清单文件中声明您的应用支持哪些屏幕相当重要。</p>

<p>与用于屏幕尺寸的新配置限定符一起，Android 3.2 为 supports-screens&gt;清单元素引入了新的属性：</p>

<p>android:requiresSmallestWidthDp <br>
指定需要的最小 smallestWidth。smallestWidth 是必须为您的应用 UI 提供的 屏幕空间的最短尺寸（dp 单位）—即 可用屏幕的两个尺寸中的最短者。因此，为使设备 与您的应用兼容，设备的 smallestWidth 必须等于或大于此 值。（通常，无论屏幕的当前方向如何， 此值都是布局支持的“最小宽度”。） <br>
例如，如果您的应用只用于最小可用宽度为 600dp 的平板电脑样式设备：</p>



<pre class=""prettyprint""><code class="" hljs r"">&lt;manifest <span class=""hljs-keyword"">...</span> &gt;
    &lt;supports-screens android:requiresSmallestWidthDp=<span class=""hljs-string"">""600""</span> /&gt;
    <span class=""hljs-keyword"">...</span>
&lt;/manifest&gt;</code></pre>

<p>但是，如果您的应用支持 Android 支持的所有屏幕尺寸（小至 426dp x 320dp），则无需声明此属性，因为应用 需要的最小宽度就是任何设备上可以实现的最小宽度。</p>

<p>注意：Android 系统不关注此 属性，因为它不影响应用在运行时的行为，而是被用于 在服务（例如 Google Play）上过滤您的应用。但是， Google Play 目前不支持此属性用于过滤（在 Android 3.2 上），因此如果您的应用不支持 小屏幕，您应继续使用其他尺寸属性。</p>

<p>android:compatibleWidthLimitDp <br>
此属性可让您指定用户支持的最大“最小宽度”，将屏幕兼容性模式用作 用户可选的功能 。如果设备可用屏幕的最小边大于您在这里的值， 用户仍可安装您的应用，但提议在屏幕兼容性模式下运行。默认 情况下，屏幕兼容性模式会停用，并且您的布局照例会调整大小以 适应屏幕，但按钮会显示在系统栏中，可让用户打开和关闭屏幕兼容性 模式。 <br>
注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p>

<p>android:largestWidthLimitDp <br>
此属性可让您指定应用支持的最大“最小宽度”来强制启用屏幕兼容性模式。 如果设备可用屏幕的最小 边大于您在这里的值，应用将在屏幕 兼容性模式下运行，且用户无法停用该模式。 <br>
注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p>

<p>注意：针对 Android 3.2 及更高版本开发时，您 应改为将旧屏幕尺寸属性与上列 属性结合使用。同时使用新属性和旧尺寸属性可能导致 非预期的行为。</p>

<p>如需了解每个属性的更多信息，请跟随上面各自的链接。</p>



<h1 id=""最佳做法"">最佳做法</h1>

<p>支持多种屏幕的目标是创建一款在 Android 系统支持的通用屏幕尺寸上都可以 正常运行且显示良好的应用。本文档 前面各节内容介绍了 Android 系统如何使您的 应用适应屏幕配置，以及如何在不同的 屏幕配置上自定义应用的外观。本节提供另外一些提示以及有助于 确保应用针对不同屏幕配置正确缩放的 技巧概览。</p>

<p>下面是有关如何确保应用在 不同屏幕上正常显示的快速检查清单：</p>

<p>在 XML 布局文件中指定尺寸时使用 wrap_content、match_parent 或 dp 单位 。 <br>
不要在应用代码中使用硬编码的像素值 <br>
不要使用 AbsoluteLayout（已弃用） <br>
为不同屏幕密度提供替代位图可绘制对象 <br>
下文将提供更详细的信息。</p>

<ol>
<li>对布局尺寸使用 wrap_content、match_parent 或 dp 单位 <br>
为 XML 布局文件中的视图定义 android:layout_width 和 android:layout_height 时，使用 “wrap_content”、 “match_parent” 或 dp 单位可确保在当前设备屏幕上为 视图提供适当的尺寸。</li>
</ol>

<p>例如，layout_width=”100dp” 的视图在 中密度屏幕上测出宽度为 100 像素，在高密度屏幕上系统会将其扩展至 150 像素宽， 因此视图在屏幕上占用的物理空间大约相同。</p>

<p>类似地，您应选择 sp（缩放独立的像素）来定义文本 大小。sp 缩放系数取决于用户设置，系统 会像处理 dp 一样缩放大小。</p>

<ol>
<li>不要在应用代码中使用硬编码的像素值 <br>
由于性能的原因和简化代码的需要，Android 系统使用像素作为 表示尺寸或坐标值的标准单位。这意味着， 视图的尺寸在代码中始终以像素表示，但始终基于当前的屏幕密度。 例如，如果 myView.getWidth() 返回 10，则表示视图在 当前屏幕上为 10 像素宽，但在更高密度的屏幕上，返回的值可能是 15。如果 在应用代码中使用像素值来处理预先未针对 当前屏幕密度缩放的位图，您可能需要缩放代码中使用的像素值，以与 未缩放的位图来源匹配。</li>
</ol>

<p>如果应用在运行时操作位图或处理像素值，请参阅 下面有关其他密度注意事项的一节。</p>

<ol>
<li>不要使用 AbsoluteLayout <br>
与其他布局小工具不同，AbsoluteLayout 会强制 使用固定位置放置其子视图，很容易导致 在不同显示屏上显示效果不好的用户界面。因此，AbsoluteLayout 在 Android 1.5（API 级别 3）上便已弃用。</li>
</ol>

<p>您应改用 RelativeLayout，它会使用相对定位 来放置其子视图。例如，您可以指定按钮小部件显示在文本小工具的“右边”。</p>

<ol>
<li>使用尺寸和密度特定资源 <br>
虽然系统会根据当前屏幕 配置扩展布局，但您在不同的屏幕尺寸上可能要调整 UI，以及提供 针对不同密度优化的可绘制对象。这基本上是重申 本文档前面的信息。</li>
</ol>

<p>如果需要精确控制应用在不同 屏幕配置上的外观，请在配置特定的 资源目录中调整您的布局和位图可绘制对象。例如，考虑要显示在 中密度和高密度屏幕上的图标。只需创建两种不同大小的图标 （例如中密度使用 100x100，高密度使用 150x150），然后使用适当的限定符 以适当的方向放置两个 变体：</p>

<p>res/drawable-mdpi/icon.png   //for medium-density screens <br>
res/drawable-hdpi/icon.png   //for high-density screens <br>
注：如果密度限定符在目录名称中未定义， 系统会假设该目录中的资源是针对基线中 密度而设计，对于其他密度将会适当地缩放。</p>



<h1 id=""其他密度注意事项"">其他密度注意事项</h1>

<p>本节详细说明 Android 如何在不同 屏幕密度上对位图可绘制对象执行缩放，以及如何进一步控制在不同密度屏幕上位图的绘制。 本节信息对大多数应用应该不怎么重要，除非您的 应用在不同屏幕密度上运行或 操控图形时遇到了问题。</p>

<p>为更好地了解在运行时 操控图形时如何支持多种密度，您应该先了解，系统通过以下方式帮助确保正确 缩放位图：</p>



<h1 id=""资源例如位图可绘制对象的预缩放"">资源（例如位图可绘制对象）的预缩放</h1>

<p>根据当前屏幕的密度，系统将使用您的应用中提供的任何尺寸或 密度特定资源，并且不加缩放而显示它们。如果没有可用于正确密度 的资源，系统将加载默认资源，并按需要向上或向下扩展，以 匹配当前屏幕的密度。系统假设默认资源（ 没有配置限定符的目录中的资源）针对基线屏幕密度 (mdpi) 而设计， 除非它们加载自密度特定的资源目录。因此，系统 会执行预缩放，以将位图调整至适应当前屏幕 密度的大小。 <br>
如果您请求预缩放的资源的尺寸，系统将返回 代表缩放后尺寸的值。例如，针对 mdpi 屏幕以 50x50 像素 设计的位图在 hdpi 屏幕上将扩展至 75x75 像素（如果没有 用于 hdpi 的替代资源），并且系统会这样报告大小。 <br>
有时您可能不希望 Android 预缩放 资源。避免预缩放最简单的方法是将资源放在 有 nodpi 配置限定符的资源目录中。例如： <br>
res/drawable-nodpi/icon.png <br>
当系统使用此文件夹中的 icon.png 位图时，不会 根据当前设备密度缩放。</p>



<h1 id=""像素尺寸和坐标的自动缩放"">像素尺寸和坐标的自动缩放</h1>

<p>应用可通过在清单中将 android:anyDensity 设置为 “false” 或者通过将 inScaled 设置为 “false” 对 Bitmap 编程来停用预缩放。在此情况下，系统在绘制时会自动缩放任何绝对的像素坐标和像素 尺寸值。缩放的目的是确保像素定义的屏幕元素仍 以它们在基线屏幕密度 (mdpi) 下的大致相同物理尺寸显示。系统会对应用透明地处理此缩放，并且 向应用报告缩放后的像素尺寸，而不是物理像素尺寸。 <br>
例如，假设设备具有 480x800 的 WVGA 高密度屏幕，大约 与传统 HVGA 屏幕的尺寸一样，但它运行的应用停用了 预缩放。在此情况下，系统在查询屏幕尺寸时会对应用“撒谎” ，报告 320x533（屏幕密度的近似 mdpi 转换值）。然后，当 应用执行绘制操作时，例如作废从 (10,10) 到 (100, 100) 的矩形，系统会将它们缩放适当的量以转变坐标，并且实际 作废区域 (15,15) 到 (150, 150)。如果应用直接操控缩放的位图， 此差异可能会导致非预期的行为，但这被视为 确保应用最佳性能所需的合理权衡。如果遇到此 情况，请参阅将 dp 单位转换为像素 单位一节。 <br>
通常，不应停用预缩放。支持多种 屏幕的最佳方法是采用上面如何支持 多种屏幕中所述的基本技术。 <br>
如果您的应用操控位图或以某种其他方式直接与 屏幕上的像素交互，您可能需要采取其他步骤支持不同的屏幕密度。例 如，如果您通过计算手指滑过的像素数 来响应触控手势，则需使用适当的密度独立像素值，而不是实际 像素。</p>



<h1 id=""缩放运行时创建的位图对象"">缩放运行时创建的位图对象</h1>

<p><img src=""http://img.blog.csdn.net/20161205153708751"" alt=""这里写图片描述"" title=""""> <br>
图 5. 预缩放的位图与自动缩放的 位图比较。</p>

<p>如果您的应用创建内存中位图（Bitmap 对象）， 系统在默认情况下假设位图是针对基线中密度屏幕而设计，然后 在绘制时自动缩放位图。当位图具有不明的密度属性时，系统会对 Bitmap 应用“自动缩放”。如果未正确 考虑当前设备的屏幕密度和指定位图的密度属性， 自动缩放可能导致缩放伪影，就像未提供替代 资源一样。</p>

<p>要控制是否缩放运行时创建的 Bitmap，可以 使用 setDensity() 指定位图的密度， 从 DisplayMetrics 传递密度常量，例如 DENSITY_HIGH 或 DENSITY_LOW。</p>

<p>如果使用 BitmapFactory 创建 Bitmap，例如从文件或流创建，可以使用 BitmapFactory.Options 定义位图的属性（因为 它已经存在），确定系统是否要缩放或者如何缩放。例如，您可以使用 inDensity 字段定义 位图设计时的密度，使用 inScaled 字段指定位图是否应缩放以 匹配当前设备的屏幕密度。</p>

<p>如果将 inScaled 字段设置为 false，然后停用 系统可能应用到位图的预缩放，则系统在绘制时将自动 缩放它。使用自动缩放代替预缩放可能耗用的 CPU 更多，但耗用的内存 更少。</p>

<p>图 5 所示为在高密度屏幕上加载低 (120)、中 (160) 和高 (240) 密度位图时预缩放和自动缩放机制产生的效果。差异 很小，因为所有位图都针对当前屏幕密度而缩放，但根据在绘制时 是预缩放还是自动缩放， 缩放后位图的外观略有不同。</p>

<p>注：在 Android 3.0 的更高版本中，由于图形框架的改进，应该觉察不出预缩放的位图 与自动缩放的位图之间 的差异。</p>



<h1 id=""将-dp-单位转换为像素单位"">将 dp 单位转换为像素单位</h1>

<p>在某些情况下，您需要以 dp 表示尺寸，然后将它们转换为 像素。设想一个在用户 手指移动至少 16 像素之后可以识别滚动或滑动手势的应用。在基线屏幕上，用户必须移动 16 pixels / 160 dpi（等于一英寸的 1/10 或 2.5 毫米），然后才会识别该手势。在 具有高密度显示屏 (240dpi) 的设备上，用户必须移动 16 pixels / 240 dpi（等于 一英寸的 1/15 或 1.7 毫米）。此距离更短，应用因此 似乎对用户更灵敏。</p>

<p>要修复此问题，手势阈值必须在代码中以 dp 表示，然后 转换为实际像素。例如：</p>

<p>// The gesture threshold expressed in dp <br>
private static final float GESTURE_THRESHOLD_DP = 16.0f;</p>

<p>// Get the screen’s density scale <br>
final float scale = getResources().getDisplayMetrics().density; <br>
// Convert the dps to pixels, based on density scale <br>
mGestureThreshold = (int) (GESTURE_THRESHOLD_DP * scale + 0.5f);</p>

<p>// Use mGestureThreshold as a distance in pixels… <br>
DisplayMetrics.density 字段根据当前屏幕密度指定 将 dp 单位转换为像素必须使用的缩放系数。 在中密度屏幕上，DisplayMetrics.density 等于 1.0；在高密度屏幕上，它等于 1.5；在超高密度屏幕上，等于 2.0； 在低密度屏幕上，等于 0.75。此数字是一个系数，应用其乘以 dp 单位以获取用于当前屏幕的实际像素数。（然后在转换时加上 0.5f，将该数字四舍五入到最接近的整数。）如需了解 详细信息，请参阅 DisplayMetrics 类。</p>

<p>但是，不能为此类事件定义任意阈值，而应 使用 ViewConfiguration 中的预缩放配置值。.</p>

<p>使用预缩放的配置值 <br>
您可以使用 ViewConfiguration 类访问 Android 系统使用的通常距离、 速度和时间。例如， 使用 getScaledTouchSlop() 可获取框架用作滚动阈值的距离（像素）：</p>

<p>private static final int GESTURE_THRESHOLD_DP = ViewConfiguration.get(myContext).getScaledTouchSlop(); <br>
ViewConfiguration 中以 getScaled 前缀 开头的方法确定会返回不管当前屏幕密度为何都会正常显示的 像素值。</p>



<h1 id=""如何在多个屏幕上测试您的应用"">如何在多个屏幕上测试您的应用</h1>

<p><img src=""http://img.blog.csdn.net/20161205153755892"" alt=""这里写图片描述"" title=""""> <br>
图 6. 一组用于测试屏幕支持的 AVD。</p>

<p>在发布应用之前，应在所有支持的屏幕 尺寸和密度中全面测试。Android SDK 包含可以使用的模拟器皮肤， 它们会复制您的应用可能要在其中运行的常见屏幕配置的 尺寸和密度。也可修改模拟器皮肤的默认尺寸、密度和分辨率， 以复制任何特定屏幕的特性。使用模拟器皮肤和其他 自定义配置可测试任何可能的屏幕配置，因此您无 需仅仅为了测试应用的屏幕支持而购买不同的设备。</p>

<p>要设置环境以测试应用的屏幕支持，应使用能模拟您希望应用支持的 屏幕尺寸和密度的模拟器皮肤和屏幕配置创建 一系列 AVD (Android Virtual Devices)。要执行此操作，可以使用 AVD Manager 创建 AVD 并使用图形界面启动它们。</p>

<p>要启动 Android SDK Manager，从您的 Android SDK 目录执行 SDK Manager.exe（仅在 Windows 上），或者从 /tools/ 目录执行 android（在所有平台上）。图 6 所示为用于测试不同屏幕配置的 AVD Manager（选择了 AVD）。</p>

<p>表 3 所示为 Android SDK 中可用的各种模拟器皮肤，可用 以模拟某些最常见的屏幕配置。</p>

<p>如需了解有关创建和使用 AVD 测试应用的详细信息，请参阅使用 AVD Manager 管理 AVD。</p>

<p>表 3. Android SDK（粗体表示）及其他 代表性解决方案中模拟器皮肤提供的 各种屏幕配置</p>



<pre class=""prettyprint""><code class="" hljs markdown"">低密度 (120)，ldpi  中密度 (160)，mdpi  高密度 (240)，hdpi  超高密度 (320)，xhdpi
小屏幕 QVGA (240x320)      480x640 
正常屏幕    WQVGA400 (240x400) 
WQVGA432 (240x432)  HVGA (320x480)  WVGA800 (480x800) 
WVGA854 (480x854) 
600x1024    640x960
大屏幕 WVGA800** (480x800) 
WVGA854<span class=""hljs-emphasis"">** (480x854) WVGA800*</span> (480x800) 
WVGA854* (480x854) 
600x1024        
超大屏幕    1024x600    WXGA (1280x800)†
1024x768
1280x768    1536x1152
1920x1152 
1920x1200   2048x1536
2560x1536 
2560x1600</code></pre>

<ul>
<li>要模拟此配置，在 创建使用 WVGA800 或 WVGA854 皮肤的 AVD 时请指定自定义密度 160。 <br>
** 要模拟此配置，在创建 使用 WVGA800 或 WVGA854 皮肤的 AVD 时请指定自定义密度 120。 <br>
† 此皮肤可用于 Android 3.0 平台 <br>
要查看支持任何指定屏幕配置的活动设备的相对数量，请参阅 屏幕尺寸和密度 仪表板。</li>
</ul>

<p><img src=""http://img.blog.csdn.net/20161205153814236"" alt=""这里写图片描述"" title=""""> <br>
图 7. 从 AVD Manager 启动 AVD 时可以设置的尺寸和密度选项。</p>

<p>我们还建议您在 设置为以接近实际设备的物理尺寸运行的模拟器中测试应用。这样 更容易比较不同尺寸和密度时的结果。要 完成此操作，需要知道计算机显示器的大约密度 (dpi)， 例如 30 英寸 Dell 显示器的密度约为 96 dpi。从 AVD Manager 启动 AVD 时，可在 Launch Options 中指定用于模拟器和您的 显示器的屏幕尺寸 (dpi)，如图 7 所示。</p>

<p>如果要在使用内置皮肤 不支持的分辨率或密度的屏幕上测试应用，可以创建使用自定义分辨率或密度的 AVD。从 AVD Manager 创建 AVD 时，指定 Resolution， 而不要选择 Built-in Skin。</p>

<p>从命令行启动 AVD 时，可以使用 -scale 选项指定用于 模拟器的缩放比例。例如：</p>



<pre class=""prettyprint""><code class="" hljs lasso"">emulator <span class=""hljs-attribute"">-avd</span> <span class=""hljs-subst"">&lt;</span>avd_name<span class=""hljs-subst"">&gt;</span> <span class=""hljs-attribute"">-scale</span> <span class=""hljs-number"">96</span>dpi</code></pre>

<p>要调整模拟器的大小，可使用 -scale 选项指定代表所需缩放系数的 0.1 至 3。</p>

<p>如需了解从命令行创建 AVD 的更多信息，请参阅从命令行管理 AVD。</p>



<h2 id=""我的微信二维码如下欢迎交流讨论"">我的微信二维码如下，欢迎交流讨论</h2>

<p><img src=""http://img.blog.csdn.net/20160805162827934"" alt=""这里写图片描述"" title=""""></p>



<h1 id=""欢迎关注it面试题汇总微信订阅号每天推送经典面试题和面试心得技巧"">欢迎关注《IT面试题汇总》微信订阅号。每天推送经典面试题和面试心得技巧</h1>



<h2 id=""微信订阅号二维码如下"">微信订阅号二维码如下：</h2>

<p><img src=""http://img.blog.csdn.net/20160805162844330"" alt=""这里写图片描述"" title=""""></p></div>","移动开发,Android开发笔记",2016-12-06 09:47
2316,"一、概述
JSON是JavaScript Object Notation的简称，起源于js(javascript)它是一种轻量级的数据交换格式，JSON不仅在js中广泛使用，同时还在其他领域得到广泛使...",qq_29013473,http://blog.csdn.net/qq_29013473/article/details/53483150,安卓中解析json数据,"<div class=""markdown_views""><p><strong>一、概述</strong></p>

<ul>
<li>JSON是JavaScript Object Notation的简称，起源于js(javascript)它是一种轻量级的数据交换格式，JSON不仅在js中广泛使用，同时还在其他领域得到广泛使用，如c,c++,java,Php，swift等等,成为了一种通用的理想数据交换格式，它有两种数据结构，分别是对象，数组，它形式上有花括号{}和中括号[]嵌套，{}中的是代表对象，[]中的为数组，即对象中有数组，数组中又有对象，而且以及键/值对出现。</li>
<li>json语法： <br>
<ul><li>数据在键值对中</li>
<li>数据有逗号分离</li>
<li>花括号保存对象</li></ul></li>
<li>json的值： <br>
<ul><li>数字（整数或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true或false）</li>
<li>数组（在方括号中）</li>
<li>对象（在大括号中）</li>
<li>null</li></ul></li>
<li>json和xml的比较 <br>
<ul><li>数据体积小，花费流量比xml少</li>
<li>可读性比xml稍差，但格式化后也很可观</li>
<li>与JavaScript交互比xml方便</li>
<li>速度比xml快</li>
<li>拥有与xml同样多的解析方式</li></ul></li>
</ul>

<p>大概了解了JSON，下面将介绍在Android中通过采用android内置的org.json包，android 3.0 新出的JsonReader，google提供的gson解析json这三种常用的方式解析json；这里笔者只介绍前两种解析方式。</p>

<p><strong>二、准备json数据</strong></p>

<ul>
<li>要学习怎么解析json，咋们先要得到json数据，得到json数据方式有很多种，比如：webservice接口api，自己写个服务器端，或者自己在代码中写一个json格式的字符串。下面我们将通过金山词霸开放平台为我们提供的每日一句的api接口演示三种解析json的方法。 <br>
金山词霸每日一句api接口：<a href=""http://open.iciba.com/dsapi"">http://open.iciba.com/dsapi</a> <br>
要解析json，我们得先知道要解析json的格式及内容，我们先用浏览器访问每日有一句api接口看看返回的数据。</li>
</ul>

<pre class=""prettyprint""><code class="" hljs tex""><span class=""hljs-special"">{</span>""sid"":""2436"",""tts"":""http:<span class=""hljs-command"">\/</span><span class=""hljs-command"">\/</span>news.iciba.com<span class=""hljs-command"">\/</span>admin<span class=""hljs-command"">\/</span>tts<span class=""hljs-command"">\/</span>2016-12-06-day.mp3"",""content"":""Don't make a promise when you are in Joy. Don't reply when you are Sad.Don't take decisions when you are Angry.Think Twice.Act Wise."",""note"":""<span class=""hljs-command"">\u</span>5f53<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>559c<span class=""hljs-command"">\u</span>60a6<span class=""hljs-command"">\u</span>65f6<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>4e0d<span class=""hljs-command"">\u</span>8981<span class=""hljs-command"">\u</span>8f7b<span class=""hljs-command"">\u</span>6613<span class=""hljs-command"">\u</span>5730<span class=""hljs-command"">\u</span>627f<span class=""hljs-command"">\u</span>8bfa<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>5f53<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>60b2<span class=""hljs-command"">\u</span>4f24<span class=""hljs-command"">\u</span>65f6<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>4e0d<span class=""hljs-command"">\u</span>8981<span class=""hljs-command"">\u</span>8f7b<span class=""hljs-command"">\u</span>6613<span class=""hljs-command"">\u</span>5730<span class=""hljs-command"">\u</span>56de<span class=""hljs-command"">\u</span>590d<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>5f53<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>6124<span class=""hljs-command"">\u</span>6012<span class=""hljs-command"">\u</span>65f6<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>4e0d<span class=""hljs-command"">\u</span>8981<span class=""hljs-command"">\u</span>8f7b<span class=""hljs-command"">\u</span>6613<span class=""hljs-command"">\u</span>505a<span class=""hljs-command"">\u</span>51fa<span class=""hljs-command"">\u</span>51b3<span class=""hljs-command"">\u</span>5b9a<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>4e09<span class=""hljs-command"">\u</span>601d<span class=""hljs-command"">\u</span>800c<span class=""hljs-command"">\u</span>540e<span class=""hljs-command"">\u</span>884c<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>660e<span class=""hljs-command"">\u</span>667a<span class=""hljs-command"">\u</span>4e4b<span class=""hljs-command"">\u</span>6cd5<span class=""hljs-command"">\u</span>3002"",""love"":""1066"",""translation"":""<span class=""hljs-command"">\u</span>8bcd<span class=""hljs-command"">\u</span>9738<span class=""hljs-command"">\u</span>5c0f<span class=""hljs-command"">\u</span>7f16<span class=""hljs-command"">\uff</span>1a<span class=""hljs-command"">\u</span>8fd9<span class=""hljs-command"">\u</span>4e09<span class=""hljs-command"">\u</span>53e5<span class=""hljs-command"">\u</span>8bdd<span class=""hljs-command"">\u</span>5c0f<span class=""hljs-command"">\u</span>7f16<span class=""hljs-command"">\u</span>89c9<span class=""hljs-command"">\u</span>5f97<span class=""hljs-command"">\u</span>5728<span class=""hljs-command"">\u</span>751f<span class=""hljs-command"">\u</span>6d3b<span class=""hljs-command"">\u</span>4e2d<span class=""hljs-command"">\u</span>771f<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>53d7<span class=""hljs-command"">\u</span>76ca<span class=""hljs-command"">\u</span>65e0<span class=""hljs-command"">\u</span>7a77<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>7279<span class=""hljs-command"">\u</span>522b<span class=""hljs-command"">\u</span>662f<span class=""hljs-command"">\u</span>7b2c<span class=""hljs-command"">\u</span>4e00<span class=""hljs-command"">\u</span>53e5<span class=""hljs-command"">\u</span>548c<span class=""hljs-command"">\u</span>7b2c<span class=""hljs-command"">\u</span>4e09<span class=""hljs-command"">\u</span>53e5<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>4eba<span class=""hljs-command"">\u</span>4f1a<span class=""hljs-command"">\u</span>56e0<span class=""hljs-command"">\u</span>4e3a<span class=""hljs-command"">\u</span>559c<span class=""hljs-command"">\u</span>60a6<span class=""hljs-command"">\u</span>51b2<span class=""hljs-command"">\u</span>660f<span class=""hljs-command"">\u</span>5934<span class=""hljs-command"">\u</span>8111<span class=""hljs-command"">\u</span>8bf4<span class=""hljs-command"">\u</span>5927<span class=""hljs-command"">\u</span>8bdd<span class=""hljs-command"">\u</span>6216<span class=""hljs-command"">\u</span>8005<span class=""hljs-command"">\u</span>662f<span class=""hljs-command"">\u</span>778e<span class=""hljs-command"">\u</span>8bb8<span class=""hljs-command"">\u</span>8bfa<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>6700<span class=""hljs-command"">\u</span>540e<span class=""hljs-command"">\u</span>53c8<span class=""hljs-command"">\u</span>505a<span class=""hljs-command"">\u</span>4e0d<span class=""hljs-command"">\u</span>5230<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>8fd9<span class=""hljs-command"">\u</span>6837<span class=""hljs-command"">\u</span>6b21<span class=""hljs-command"">\u</span>6570<span class=""hljs-command"">\u</span>591a<span class=""hljs-command"">\u</span>4e86<span class=""hljs-command"">\u</span>5468<span class=""hljs-command"">\u</span>56f4<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>4eba<span class=""hljs-command"">\u</span>5c31<span class=""hljs-command"">\u</span>6ca1<span class=""hljs-command"">\u</span>6709<span class=""hljs-command"">\u</span>4eba<span class=""hljs-command"">\u</span>613f<span class=""hljs-command"">\u</span>610f<span class=""hljs-command"">\u</span>76f8<span class=""hljs-command"">\u</span>4fe1<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>8bf4<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>8bdd<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>6574<span class=""hljs-command"">\u</span>4e2a<span class=""hljs-command"">\u</span>4eba<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>5206<span class=""hljs-command"">\u</span>91cf<span class=""hljs-command"">\u</span>5728<span class=""hljs-command"">\u</span>670b<span class=""hljs-command"">\u</span>53cb<span class=""hljs-command"">\u</span>4e2d<span class=""hljs-command"">\u</span>4f1a<span class=""hljs-command"">\u</span>8d8a<span class=""hljs-command"">\u</span>6765<span class=""hljs-command"">\u</span>8d8a<span class=""hljs-command"">\u</span>4f4e<span class=""hljs-command"">\u</span>3002<span class=""hljs-command"">\u</span>5f53<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>6124<span class=""hljs-command"">\u</span>6012<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>65f6<span class=""hljs-command"">\u</span>5019<span class=""hljs-command"">\u</span>5462<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>4e5f<span class=""hljs-command"">\u</span>5343<span class=""hljs-command"">\u</span>4e07<span class=""hljs-command"">\u</span>4e0d<span class=""hljs-command"">\u</span>8981<span class=""hljs-command"">\u</span>505a<span class=""hljs-command"">\u</span>51fa<span class=""hljs-command"">\u</span>4ec0<span class=""hljs-command"">\u</span>4e48<span class=""hljs-command"">\u</span>51b3<span class=""hljs-command"">\u</span>5b9a<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>56e0<span class=""hljs-command"">\u</span>4e3a<span class=""hljs-command"">\u</span>5982<span class=""hljs-command"">\u</span>8bba<span class=""hljs-command"">\u</span>4f60<span class=""hljs-command"">\u</span>505a<span class=""hljs-command"">\u</span>51fa<span class=""hljs-command"">\u</span>4ec0<span class=""hljs-command"">\u</span>4e48<span class=""hljs-command"">\u</span>51b3<span class=""hljs-command"">\u</span>5b9a<span class=""hljs-command"">\u</span>4e4b<span class=""hljs-command"">\u</span>540e<span class=""hljs-command"">\u</span>57fa<span class=""hljs-command"">\u</span>672c<span class=""hljs-command"">\u</span>90fd<span class=""hljs-command"">\u</span>4f1a<span class=""hljs-command"">\u</span>975e<span class=""hljs-command"">\u</span>5e38<span class=""hljs-command"">\u</span>540e<span class=""hljs-command"">\u</span>6094<span class=""hljs-command"">\uff</span>01<span class=""hljs-command"">\u</span>6240<span class=""hljs-command"">\u</span>4ee5<span class=""hljs-command"">\u</span>5982<span class=""hljs-command"">\u</span>679c<span class=""hljs-command"">\u</span>5927<span class=""hljs-command"">\u</span>5bb6<span class=""hljs-command"">\u</span>771f<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>5f88<span class=""hljs-command"">\u</span>6c14<span class=""hljs-command"">\u</span>6124<span class=""hljs-command"">\u</span>4e5f<span class=""hljs-command"">\u</span>8981<span class=""hljs-command"">\u</span>7ed9<span class=""hljs-command"">\u</span>81ea<span class=""hljs-command"">\u</span>5df1<span class=""hljs-command"">\u</span>4e00<span class=""hljs-command"">\u</span>4e2a<span class=""hljs-command"">\u</span>7f13<span class=""hljs-command"">\u</span>51b2<span class=""hljs-command"">\u</span>7684<span class=""hljs-command"">\u</span>65f6<span class=""hljs-command"">\u</span>95f4<span class=""hljs-command"">\uff</span>0c<span class=""hljs-command"">\u</span>518d<span class=""hljs-command"">\u</span>51b3<span class=""hljs-command"">\u</span>5b9a<span class=""hljs-command"">\u</span>4e0b<span class=""hljs-command"">\u</span>4e00<span class=""hljs-command"">\u</span>6b65<span class=""hljs-command"">\u</span>600e<span class=""hljs-command"">\u</span>4e48<span class=""hljs-command"">\u</span>505a<span class=""hljs-special"">~</span>"",""picture"":""http:<span class=""hljs-command"">\/</span><span class=""hljs-command"">\/</span>cdn.iciba.com<span class=""hljs-command"">\/</span>news<span class=""hljs-command"">\/</span>word<span class=""hljs-command"">\/</span>20161206.jpg"",""picture2"":""http:<span class=""hljs-command"">\/</span><span class=""hljs-command"">\/</span>cdn.iciba.com<span class=""hljs-command"">\/</span>news<span class=""hljs-command"">\/</span>word<span class=""hljs-command"">\/</span>big_20161206b.jpg"",""caption"":""<span class=""hljs-command"">\u</span>8bcd<span class=""hljs-command"">\u</span>9738<span class=""hljs-command"">\u</span>6bcf<span class=""hljs-command"">\u</span>65e5<span class=""hljs-command"">\u</span>4e00<span class=""hljs-command"">\u</span>53e5"",""dateline"":""2016-12-06"",""s_pv"":""0"",""sp_pv"":""0"",""tags"":<span class=""hljs-special"">[</span><span class=""hljs-special"">{</span>""id"":null,""name"":null<span class=""hljs-special"">}</span><span class=""hljs-special"">]</span>,""fenxiang_img"":""http:<span class=""hljs-command"">\/</span><span class=""hljs-command"">\/</span>cdn.iciba.com<span class=""hljs-command"">\/</span>web<span class=""hljs-command"">\/</span>news<span class=""hljs-command"">\/</span>longweibo<span class=""hljs-command"">\/</span>imag<span class=""hljs-command"">\/</span>2016-12-06.jpg""<span class=""hljs-special"">}</span></code></pre>

<p>这是什么东西，看不懂是不是？没关系，这里有一个格式化json数据的工具，格式化之后的json就非常可观了，<a href=""http://pan.baidu.com/s/1jIyQIj0"">HiJson32位和64位下载</a></p>

<ul>
<li>使用HiJson格式化json数据 <br>
如下图所示，格式化后的字符json数据就相当可观了。 <br>
<img src=""http://img.blog.csdn.net/20161206093059361"" alt=""这里写图片描述"" title=""""> <br>
这是格式化后的json数据：</li>
</ul>



<pre class=""prettyprint""><code class="" hljs json"">{
    ""<span class=""hljs-attribute"">caption</span>"": <span class=""hljs-value""><span class=""hljs-string"">""词霸每日一句""</span></span>,
    ""<span class=""hljs-attribute"">content</span>"": <span class=""hljs-value""><span class=""hljs-string"">""Don't make a promise when you are in Joy. Don't reply when you are Sad.Don't take decisions when you are Angry.Think Twice.Act Wise.""</span></span>,
    ""<span class=""hljs-attribute"">dateline</span>"": <span class=""hljs-value""><span class=""hljs-string"">""2016-12-06""</span></span>,
    ""<span class=""hljs-attribute"">fenxiang_img</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/web/news/longweibo/imag/2016-12-06.jpg""</span></span>,
    ""<span class=""hljs-attribute"">love</span>"": <span class=""hljs-value""><span class=""hljs-string"">""1066""</span></span>,
    ""<span class=""hljs-attribute"">note</span>"": <span class=""hljs-value""><span class=""hljs-string"">""当你喜悦时，不要轻易地承诺。当你悲伤时，不要轻易地回复。当你愤怒时，不要轻易做出决定。三思而后行，明智之法。""</span></span>,
    ""<span class=""hljs-attribute"">picture</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/news/word/20161206.jpg""</span></span>,
    ""<span class=""hljs-attribute"">picture2</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/news/word/big_20161206b.jpg""</span></span>,
    ""<span class=""hljs-attribute"">s_pv</span>"": <span class=""hljs-value""><span class=""hljs-string"">""0""</span></span>,
    ""<span class=""hljs-attribute"">sid</span>"": <span class=""hljs-value""><span class=""hljs-string"">""2436""</span></span>,
    ""<span class=""hljs-attribute"">sp_pv</span>"": <span class=""hljs-value""><span class=""hljs-string"">""0""</span></span>,
    ""<span class=""hljs-attribute"">tags</span>"": <span class=""hljs-value"">[
        {}
    ]</span>,
    ""<span class=""hljs-attribute"">translation</span>"": <span class=""hljs-value""><span class=""hljs-string"">""词霸小编：这三句话小编觉得在生活中真的受益无穷，特别是第一句和第三句。人会因为喜悦冲昏头脑说大话或者是瞎许诺，最后又做不到。这样次数多了周围的人就没有人愿意相信你说的话，整个人的分量在朋友中会越来越低。当你愤怒的时候呢，也千万不要做出什么决定，因为如论你做出什么决定之后基本都会非常后悔！所以如果大家真的很气愤也要给自己一个缓冲的时间，再决定下一步怎么做~""</span></span>,
    ""<span class=""hljs-attribute"">tts</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://news.iciba.com/admin/tts/2016-12-06-day.mp3""</span>
</span>}</code></pre>

<ul>
<li>注意：由于今天金山提供的json数据tags数组中无内容，所以笔者选择往期的json数据讲解，笔者使用这份json数据举例。</li>
</ul>

<pre class=""prettyprint""><code class="" hljs json"">{
    ""<span class=""hljs-attribute"">caption</span>"": <span class=""hljs-value""><span class=""hljs-string"">""词霸每日一句""</span></span>,
    ""<span class=""hljs-attribute"">content</span>"": <span class=""hljs-value""><span class=""hljs-string"">""You aspire to do great things? Begin with little ones.  ""</span></span>,
    ""<span class=""hljs-attribute"">dateline</span>"": <span class=""hljs-value""><span class=""hljs-string"">""2015-12-07""</span></span>,
    ""<span class=""hljs-attribute"">fenxiang_img</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/web/news/longweibo/imag/2015-12-07.jpg""</span></span>,
    ""<span class=""hljs-attribute"">love</span>"": <span class=""hljs-value""><span class=""hljs-string"">""2437""</span></span>,
    ""<span class=""hljs-attribute"">note</span>"": <span class=""hljs-value""><span class=""hljs-string"">""想成就大事，就要从小事开始。（Augustine of Hippo）""</span></span>,
    ""<span class=""hljs-attribute"">picture</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/news/word/2015-12-07.jpg""</span></span>,
    ""<span class=""hljs-attribute"">picture2</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://cdn.iciba.com/news/word/big_2015-12-07b.jpg""</span></span>,
    ""<span class=""hljs-attribute"">s_pv</span>"": <span class=""hljs-value""><span class=""hljs-string"">""6694""</span></span>,
    ""<span class=""hljs-attribute"">sid</span>"": <span class=""hljs-value""><span class=""hljs-string"">""1683""</span></span>,
    ""<span class=""hljs-attribute"">sp_pv</span>"": <span class=""hljs-value""><span class=""hljs-string"">""121""</span></span>,
    ""<span class=""hljs-attribute"">tags</span>"": <span class=""hljs-value"">[
        {
            ""<span class=""hljs-attribute"">id</span>"": <span class=""hljs-value""><span class=""hljs-string"">""13""</span></span>,
            ""<span class=""hljs-attribute"">name</span>"": <span class=""hljs-value""><span class=""hljs-string"">""名人名言""</span>
        </span>},
        {
            ""<span class=""hljs-attribute"">id</span>"": <span class=""hljs-value""><span class=""hljs-string"">""16""</span></span>,
            ""<span class=""hljs-attribute"">name</span>"": <span class=""hljs-value""><span class=""hljs-string"">""治愈系""</span>
        </span>}
    ]</span>,
    ""<span class=""hljs-attribute"">translation</span>"": <span class=""hljs-value""><span class=""hljs-string"">""词霸小编：拥有好心情的最佳方式就是“干正事”。学会了规定的单词，读完了必读的书，收尾了工作，锻炼没有偷懒…那么遇到态度不好的出租司机，多收钱的看车大妈，排队加塞的无良青年也会一笑置之，心中充实，才有底气快乐。【关注词霸小妹微信（微信号：ijinshanciba），有惊喜呦！】""</span></span>,
    ""<span class=""hljs-attribute"">tts</span>"": <span class=""hljs-value""><span class=""hljs-string"">""http://news.iciba.com/admin/tts/2015-12-07-day.mp3""</span>
</span>}</code></pre>

<p><strong>三、解析json数据</strong></p>

<ul>
<li>方式一：使用org.json包解析</li>
</ul>



<pre class=""prettyprint""><code class="" hljs avrasm""><span class=""hljs-comment"">/**
     * 通过org.json解析json
     * @param jsonStr json字符串
     * @throws JSONException  格式不对，转换异常
     */</span>
    public static Sentence parseJsonByOrgJson(String jsonStr) throws JSONException{
        // 使用该方法解析思路，遇到大括号用JsonObject，中括号用JsonArray
        // 第一个是大括号{}
        JSONObject jsonObj = new JSONObject(jsonStr)<span class=""hljs-comment"">;</span>
        // 新建Sentence对象
        Sentence sentence = new Sentence()<span class=""hljs-comment"">;</span>
        // 以下是体力活
        String caption = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""caption""</span>)<span class=""hljs-comment"">;</span>
        String content = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""content""</span>)<span class=""hljs-comment"">;</span>
        String dateline = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""dateline""</span>)<span class=""hljs-comment"">;</span>
        String fenxiang_img = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""fenxiang_img""</span>)<span class=""hljs-comment"">;</span>
        String love = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""love""</span>)<span class=""hljs-comment"">;</span>
        String note = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""note""</span>)<span class=""hljs-comment"">;</span>
        String picture = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""picture""</span>)<span class=""hljs-comment"">;</span>
        String picture2 = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""picture2""</span>)<span class=""hljs-comment"">;</span>
        String s_pv = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""s_pv""</span>)<span class=""hljs-comment"">;</span>
        String sp_pv = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""sp_pv""</span>)<span class=""hljs-comment"">;</span>
        String translation = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""translation""</span>)<span class=""hljs-comment"">;</span>
        String tts = jsonObj<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""tts""</span>)<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.caption</span> = caption<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.content</span> = content<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.dateline</span> = dateline<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.fenxiang</span>_img = fenxiang_img<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.love</span> = love<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.note</span> = note<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.picture</span> = picture<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.picture</span>2 = picture2<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.s</span>_pv = s_pv<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.sp</span>_pv = sp_pv<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.translation</span> = translation<span class=""hljs-comment"">;</span>
        sentence<span class=""hljs-preprocessor"">.tts</span> = tts<span class=""hljs-comment"">;</span>

        // 解析关键字tags，它是一个JsonArray，遇到[]
        JSONArray jsonArray = jsonObj<span class=""hljs-preprocessor"">.getJSONArray</span>(<span class=""hljs-string"">""tags""</span>)<span class=""hljs-comment"">;</span>
        // 新建Tag集合
        List&lt;Sentence<span class=""hljs-preprocessor"">.Tag</span>&gt; tags = new ArrayList&lt;Sentence<span class=""hljs-preprocessor"">.Tag</span>&gt;()<span class=""hljs-comment"">;</span>
        for(int i=<span class=""hljs-number"">0</span><span class=""hljs-comment"">;i&lt;jsonArray.length();i++){</span>
            Sentence<span class=""hljs-preprocessor"">.Tag</span> tag = new Sentence<span class=""hljs-preprocessor"">.Tag</span>()<span class=""hljs-comment"">;</span>
            // jsonArray里的每一项都是JsonObject
            JSONObject jsonObject = jsonArray<span class=""hljs-preprocessor"">.getJSONObject</span>(i)<span class=""hljs-comment"">;</span>
            tag<span class=""hljs-preprocessor"">.id</span> = jsonObject<span class=""hljs-preprocessor"">.getInt</span>(<span class=""hljs-string"">""id""</span>)<span class=""hljs-comment"">;</span>
            tag<span class=""hljs-preprocessor"">.name</span> = jsonObject<span class=""hljs-preprocessor"">.getString</span>(<span class=""hljs-string"">""name""</span>)<span class=""hljs-comment"">;</span>
            tags<span class=""hljs-preprocessor"">.add</span>(tag)<span class=""hljs-comment"">;</span>
        }
        sentence<span class=""hljs-preprocessor"">.tags</span> = tags<span class=""hljs-comment"">;</span>

        return sentence<span class=""hljs-comment"">;</span>
    }</code></pre>

<pre><code>使用这种方法解析JSON，看注释，没什么好多的，总结一句话就是：遇到{}用JSONObject，遇到[]用JSONArray，这样你就可以说你精通org.json解析JSON了。
</code></pre>

<ul>
<li>方式二：使用JsonReader解析JSON，JsonReader解析JSON有点类似PULL解析XML，主要的方法还是nextName()将游标后移。</li>
</ul>



<pre class=""prettyprint""><code class="" hljs avrasm""> <span class=""hljs-comment"">/**
     * Call requires API level 11 (current min is 8): new
     * android.util.JsonReader 通过org.json解析json
     * 
     * @param jsonStr
     *            json字符串
     * @throws Exception
     */</span>
    @SuppressLint(<span class=""hljs-string"">""NewApi""</span>)
    public static Sentence parseJsonByJsonReader(String jsonStr)
            throws Exception {
        // 新建Sentence
        Sentence sentence = new Sentence()<span class=""hljs-comment"">;</span>
        // 新建Tag集合
        List&lt;Sentence<span class=""hljs-preprocessor"">.Tag</span>&gt; tags = new ArrayList&lt;Sentence<span class=""hljs-preprocessor"">.Tag</span>&gt;()<span class=""hljs-comment"">;</span>
        JsonReader reader = new JsonReader(new StringReader(jsonStr))<span class=""hljs-comment"">;</span>
        // 遇到{,开始解析对象
        reader<span class=""hljs-preprocessor"">.beginObject</span>()<span class=""hljs-comment"">;</span>
        while (reader<span class=""hljs-preprocessor"">.hasNext</span>()) {
            String name = reader<span class=""hljs-preprocessor"">.nextName</span>()<span class=""hljs-comment"">;</span>
            if (<span class=""hljs-string"">""caption""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.caption</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""content""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.content</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""dateline""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.dateline</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""fenxiang_img""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.fenxiang</span>_img = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""love""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.love</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""note""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.note</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""picture""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.picture</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""picture2""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.picture</span>2 = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""s_pv""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.s</span>_pv = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""sid""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.sid</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""sp_pv""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.sp</span>_pv = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""translation""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.translation</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""tts""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                sentence<span class=""hljs-preprocessor"">.tts</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
            }
            if (<span class=""hljs-string"">""tags""</span><span class=""hljs-preprocessor"">.equals</span>(name)) {
                // 遇到[,开始解析数组
                reader<span class=""hljs-preprocessor"">.beginArray</span>()<span class=""hljs-comment"">;</span>
                while (reader<span class=""hljs-preprocessor"">.hasNext</span>()) {
                    // 遇到{,开始解析对象
                    reader<span class=""hljs-preprocessor"">.beginObject</span>()<span class=""hljs-comment"">;</span>
                    Sentence<span class=""hljs-preprocessor"">.Tag</span> tag = new Sentence<span class=""hljs-preprocessor"">.Tag</span>()<span class=""hljs-comment"">;</span>
                    if (<span class=""hljs-string"">""id""</span><span class=""hljs-preprocessor"">.equals</span>(reader<span class=""hljs-preprocessor"">.nextName</span>())) {
                        tag<span class=""hljs-preprocessor"">.id</span> = reader<span class=""hljs-preprocessor"">.nextInt</span>()<span class=""hljs-comment"">;</span>
                    }
                    if (<span class=""hljs-string"">""name""</span><span class=""hljs-preprocessor"">.equals</span>(reader<span class=""hljs-preprocessor"">.nextName</span>())) {
                        tag<span class=""hljs-preprocessor"">.name</span> = reader<span class=""hljs-preprocessor"">.nextString</span>()<span class=""hljs-comment"">;</span>
                    }
                    // 遇到}，对象解析结束
                    reader<span class=""hljs-preprocessor"">.endObject</span>()<span class=""hljs-comment"">;</span>
                    tags<span class=""hljs-preprocessor"">.add</span>(tag)<span class=""hljs-comment"">;</span>
                }
                sentence<span class=""hljs-preprocessor"">.tags</span> = tags<span class=""hljs-comment"">;</span>
                // 遇到],数组解析结束
                reader<span class=""hljs-preprocessor"">.endArray</span>()<span class=""hljs-comment"">;</span>
            }
        }
        // 遇到}，对象解析结束
        reader<span class=""hljs-preprocessor"">.endObject</span>()<span class=""hljs-comment"">;</span>
        return sentence<span class=""hljs-comment"">;</span>
    }</code></pre>

<p>当开始解析对象时(遇到”{“就JsonReader.beginObject())，当这个对象解析结束了（遇到”}”）就endObject()结束对象的解析。 <br>
当开始解析数组时(遇到”[“就JsonReader.beginArray())，当这个数组解析结束了（遇到”]”）就endArray()结束数组的解析。 <br>
注意nextXXX()都会是游标后移，如果有数据忘了解析等等导致游标错位，将会导致数据类型错乱，这个时候就会很容易发生：java.lang.IllegalStateException: Expected a X but was Y …参数匹配异常。所以一定不要漏了数据和注意每一次移动游标。</p>

<ul>
<li>校验json解析数据是否正确 <br>
检验json数据的方法通常是将解析出来的内容用Log输出来，但这里节点较多，显然这方法是不可取的。可以用调试的方法检验json数据是否解析正确。具体做法为在解析json数据的第一句打一个断点，然后让程序逐行执行，如果解析出现措错误，程序会直接跳到catch异常的代码那里，这样就知道是哪一行代码出错了；出错原因通常为解析节点的键写错了。如解析无错误，则程序能一行一行往下顺序执行完毕。</li>
</ul></div>",移动开发,2016-12-06 09:55
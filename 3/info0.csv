count,jianjie,author,url,title,content,cete,date
466,理性看待ICO，却无需对区块链失去信心。对于区块链来说，这一切才刚刚开始，这次声势浩大的ICO监管将区块链这个看似深奥的概念提到大众面前，区块链技术也即将像大热的人工智能一样，全民关注，全民了解。,Blockchain_lemon,http://blog.csdn.net/blockchain_lemon/article/details/77853523,ICO惨遭团灭，区块链技术是福是祸？,"<div class=""markdown_views""><p>今年上半年，随着以比特币为代表的虚拟货币价格暴增，ICO（Initial Coin Offering 首次代币发行）这种新型融资方式在国内迅速发展，大量山寨币层出不穷。光上半年，通过ICO获得的融资金额已经超过了传统VC的投资，ICO累计融资规模达26.16亿元人民币。</p>



<h3 id=""乱象丛生折射黄金光芒的-ico-泡沫终于破灭了"">乱象丛生、折射黄金光芒的 ICO 泡沫终于破灭了</h3>

<p>现在这场堪称疯狂的资产泡沫，已经破灭。9月2日，由亚洲DACA区块链协会、内蒙古乌海市政府主办的<a href=""DACA%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9B%BD%E9%99%85%E9%AB%98%E5%B3%B0%E8%AE%BA%E5%9D%9B%E4%B8%B4%E6%97%B6%E5%8F%96%E6%B6%88%20%E6%88%96%E7%B3%BB%E7%9B%91%E7%AE%A1%E4%BB%8B%E5%85%A5ICO%E4%BF%A1%E5%8F%B7"">“2017DACA区块链国际高峰论坛”在活动开始前一天突然被叫停</a>，这已经是最近相关部门对区块链活动的第二次“出手”。</p>

<p></p><center><img src=""http://img.blog.csdn.net/20170905115420242"" alt=""图片描述"" title=""""></center><p></p>

<p>9月4日下午，央行等7部委联合发布《<a href=""http://www.pbc.gov.cn/goutongjiaoliu/113456/113469/3374222/index.html"">关于防范代币发行融资风险的公告</a>》，《公告》指出，近期国内通过发行代币形式包括首次代币发行（ICO）进行融资的活动大量涌现，投机炒作盛行，涉嫌从事非法金融活动，严重扰乱了经济金融秩序。本公告发布之日起，各类代币发行融资活动应当立即停止。</p>

<p>公告发布之后，各类虚拟货币价格迎来断崖式暴跌。截至目前，火币网的比特币售价为24000元，而上一周，这个价格还维持在30000元左右。监管政策的出台给了重重迷障，人人都想割韭菜的ICO一记重创，将这场全民参与的“靠着一本白皮书就坐收千万”，“坐等代币涨价，人人走向致富梦”的闹剧遏制在了没有产生更大的影响之前。</p>



<h3 id=""泡沫之下的啤酒ico-究竟关区块链什么事儿"">泡沫之下的啤酒：ICO 究竟关区块链什么事儿？</h3>

<p>披着区块链外衣的疯狂ICO犹如一杯充满泡沫的啤酒，被监管政策吹破泡沫之后，底层剩下的啤酒——区块链技术，才是我们真正应该关注的对象。值得注意的是，一千多字的监管公告，一次都没有提到区块链，这背后，也代表着有关部门对于区块链的态度。区块链作为一项巨大的技术创新，抛却那些打着区块链幌子却根本空无一物的ICO，我们应该看到它真正的价值和意义。</p>

<p><img src=""http://img.blog.csdn.net/20170905122302535"" alt=""图片描述"" title=""""></p>

<p>区块链技术是利用块链式数据结构来验证和存储数据，利用分布式节点共识算法来生成和更新数据，利用密码学的方式保证数据传输和访问的安全，利用自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础结构与设计范式。区块链拥有去中心化、不可篡改、唯一可信任、匿名性的特点，在金融、防伪溯源、版权保护等方面拥有诸多应用。将区块链技术应用在合适的领域，才能发挥出该有的价值。</p>



<h3 id=""清场之后从国家层面深入探索区块链技术发展之道"">清场之后，从国家层面深入探索区块链技术发展之道</h3>

<p>去年十月，工信部率先发布《中国区块链技术和应用发展白皮书》,从国家层面、政府层面深入探索全球区块链发展趋势；去年12月,国务院印发的《“十三五”国家信息化规划》中,明确将区块链列入战略性前沿技术的范畴；今年五月，中国电子技术标准化研究院区块链研究室发布了首个区块链标准《区块链 参考架构》。</p>

<p>近日，工信部直属中国电子信息产业发展研究院会同北京天德科技有限公司发起设立的赛迪（青岛）区块链研究院落户青岛。我国千人计划专家、北航数字科技与区块链实验室主任蔡维德成为该项目首席科学家。他认为，<a href=""http://www.gov.cn/xinwen/2017-09/05/content_5222688.htm"">我国区块链产业有望走在世界前列</a>。</p>

<p>国家对于区块链技术的肯定和扶持不言而喻。</p>

<p>理性看待ICO，却无需对区块链失去信心。对于区块链来说，这一切才刚刚开始，这次声势浩大的ICO监管将区块链这个看似深奥的概念提到大众面前，区块链技术也即将像大热的人工智能一样，全民关注，全民了解。</p>

<p>对于开发者而言，监管无疑是好事。从产业层面将区块链的发展从“假大空”变为了“做实事”；从个人发展层面，当前中国区块链企业人才严重不足，特别是掌握区块链核心底层技术的区块链人才严重欠缺，这给广大开发者带来了巨大的机会，提前入场掌握这项即将成为潮流的技术。</p>

<p>让区块链回归技术和应用的本质，用之有道，方为上策。而如何更好的将区块链技术与当下应用场景结合，发挥出它原本的力量，才是目前我们最应该关注的事情。</p>

<p><img src=""http://img.blog.csdn.net/20170904105147002"" alt=""图片描述"" title=""""></p><link rel=""stylesheet"" href=""http://static.blog.csdn.net/public/res-min/markdown_views.css?v=1.0""></div>",互联网,昨天 17:09
35578,Android WebView加载了Chromium动态库之后，就可以启动Chromium渲染引擎了。Chromium渲染引擎由Browser、Render和GPU三端组成。其中，Browser端负责...,Luoshengyang,http://blog.csdn.net/luoshengyang/article/details/53237189,Android WebView启动Chromium渲染引擎的过程分析,,"移动开发,老罗的Android之旅",2016-12-05 11:39
2031,"前情提要上集讲到, 小光请来堂哥大龙作为自己的代理与饮品供应商谈判, 最终大龙用自己丰富的商场经验帮小光拿到合适的价格.小光也是尝到了代理的甜头, 开始将店里的更多工作交给表妹来打理, 自己腾出功夫去...",anly_jun,http://blog.csdn.net/anly_jun/article/details/53484203,创业街分店开张啦---原型模式,"<div class=""markdown_views""><h2 id=""前情提要"">前情提要</h2>

<p><a href=""http://blog.lmj.wiki/2016/11/28/design-pattern/proxy/"">上集</a>讲到, 小光请来堂哥大龙作为自己的<strong><a href=""http://blog.lmj.wiki/2016/11/28/design-pattern/proxy/"">代理</a></strong>与饮品供应商谈判, 最终大龙用自己丰富的商场经验帮小光拿到合适的价格.</p>

<p>小光也是尝到了<strong>代理</strong>的甜头, 开始将店里的更多工作交给表妹来打理, 自己腾出功夫去选新的分店地址了.</p>

<!-- more -->

<blockquote>
  <p>所有示例源码已经上传到Github, <a href=""https://github.com/mingjunli/JavaDesignPatterns"">戳这里</a></p>
</blockquote>



<h2 id=""新店建设"">新店建设</h2>

<p>根据光谷店的经营经验, 很快, 小光就选好了分店的地址—创业街. 还是为了造福广大屌丝单身程序猿们啊, 哈哈.</p>

<p>分店的建设相对第一家店的开辟来说也是简单了很多, 在光谷店的探索, 诸如热干面生产流程, 饮料机机制, 活动策略等都可以复制过来用. 简单来说, 就是复制成功原型, 如下:</p>

<p><strong>照例, 抽象出一个公司的类:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Company</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">Cloneable</span> {</span>

    <span class=""hljs-comment"">// 此处我们假装省略了N多, 诸如活动策略, 饮料机, 热干面生产流程等.</span>
    <span class=""hljs-comment"">// 再此仅以饮品为例</span>
    <span class=""hljs-keyword"">private</span> ArrayList&lt;String&gt; drinks = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();

    <span class=""hljs-keyword"">private</span> String name;

    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getName</span>() {
        <span class=""hljs-keyword"">return</span> name;
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setName</span>(String name) {
        <span class=""hljs-keyword"">this</span>.name = name;
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">addDrink</span>(String drink) {
        drinks.add(drink);
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

        Company company = <span class=""hljs-keyword"">null</span>;
        <span class=""hljs-keyword"">try</span> {
            company = (Company) <span class=""hljs-keyword"">super</span>.clone();
        } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        <span class=""hljs-keyword"">return</span> company;
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">toString</span>() {
        <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""{""</span> +
                <span class=""hljs-string"">""名字: '""</span> + getName() + <span class=""hljs-string"">'\''</span> +
                <span class=""hljs-string"">"", 饮品: ""</span> + drinks  + <span class=""hljs-string"">'\''</span> +
                <span class=""hljs-string"">'}'</span>;
    }
}</code></pre>

<p><strong>光谷店:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">OpticalValleyCompany</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Company</span> {</span>

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">OpticalValleyCompany</span>() {
        setName(<span class=""hljs-string"">""光谷软件园分店""</span>);
        addDrink(<span class=""hljs-string"">""橙汁""</span>);
        addDrink(<span class=""hljs-string"">""可乐""</span>);
        addDrink(<span class=""hljs-string"">""酸梅汤""</span>);
    }
}</code></pre>

<p><strong>看下小光是如何复制光谷店的成功, 创建新的创业街分店的:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">XiaoGuang</span> {</span>

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">main</span>(String[] args) {

        <span class=""hljs-comment"">// new 光谷店</span>
        Company ovCompany = <span class=""hljs-keyword"">new</span> OpticalValleyCompany();
        System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);

        <span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
        Company sbiCompany = ovCompany.clone();
        sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);
        System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);
    }
}</code></pre>

<p><strong>output:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs "">光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}
SBI店: {名字: '</span>创业街分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤]'</span>}</code></pre>

<p>看样子很成功, 小光开始准备试运营了.</p>



<h2 id=""试运营"">试运营</h2>

<p>小光信心满满的开始了新店的试运营. 为了庆祝分店开张, 小光新拿了一款饮料XDrink在新店做活动, 买热干面赠送饮料.</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
Company sbiCompany = ovCompany.clone();
sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);

<span class=""hljs-comment"">// 给SBI店新增一款饮品</span>
sbiCompany.addDrink(<span class=""hljs-string"">""雪碧""</span>);

System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);</code></pre>

<p>这时, SBI店的饮品列表是:</p>



<pre class=""prettyprint""><code class="" hljs http""><span class=""hljs-attribute"">SBI店</span>: <span class=""hljs-string"">{名字: '创业街分店', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'}</span></code></pre>

<p>看着很好, Perfect. <br>
然而, 这时, 表妹打来电话了, 说我光谷店这边的菜单系统怎么无端多出一款雪碧的饮料啊, 我这没有提供的啊, 怎么给客户啊.</p>

<p>小光立马打印了下光谷店的信息(基于上面的修改):</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">// 在光谷店的基础上clone <span class=""hljs-keyword"">SBI</span>店
Company sbiCompany = ovCompany<span class=""hljs-preprocessor"">.clone</span>()<span class=""hljs-comment"">;</span>
sbiCompany<span class=""hljs-preprocessor"">.setName</span>(<span class=""hljs-string"">""创业街分店""</span>)<span class=""hljs-comment"">;</span>

// 给<span class=""hljs-keyword"">SBI</span>店新增一款饮品
sbiCompany<span class=""hljs-preprocessor"">.addDrink</span>(<span class=""hljs-string"">""雪碧""</span>)<span class=""hljs-comment"">;</span>

System<span class=""hljs-preprocessor"">.out</span><span class=""hljs-preprocessor"">.println</span>(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany)<span class=""hljs-comment"">;</span>

// 打印下光谷店ovCompany
System<span class=""hljs-preprocessor"">.out</span><span class=""hljs-preprocessor"">.println</span>(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany)<span class=""hljs-comment"">;</span></code></pre>

<p>果然, 光谷店新增了”雪碧”, </p>



<pre class=""prettyprint""><code class=""language-java hljs "">SBI店: {名字: <span class=""hljs-string"">'创业街分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]<span class=""hljs-string"">'}
光谷店: {名字: '</span>光谷软件园分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'</span>}</code></pre>

<p>这样当然是不好的咯, 小光只想复制光谷店的基本流程架构过来, 后续两个店的某些方面还是要分开发展的, 可不能一改俱改啊.</p>



<h2 id=""改进之路"">改进之路</h2>

<p>小光又开始了clone的改进之路. 先回头看下, 小光之前是怎么clone的:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span>
<span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

   Company company = <span class=""hljs-keyword"">null</span>;
   <span class=""hljs-keyword"">try</span> {
       company = (Company) <span class=""hljs-keyword"">super</span>.clone();
   } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
       e.printStackTrace();
   }
   <span class=""hljs-keyword"">return</span> company;
}</code></pre>

<p>我们注意到, 这个clone只是clone了Company, 并没有clone Company内部的引用(ArrayList drinks). <strong>也就是说clone出来的对象和之前的对象会使用同一份drinks列表</strong><sup>注1</sup>, 这显然不是小光愿意看到的.</p>

<p>小光也很快想到了解决方案, 改造了clone过程:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-annotation"">@Override</span>
<span class=""hljs-keyword"">protected</span> Company <span class=""hljs-title"">clone</span>() {

   Company company = <span class=""hljs-keyword"">null</span>;
   <span class=""hljs-keyword"">try</span> {
       company = (Company) <span class=""hljs-keyword"">super</span>.clone();

       <span class=""hljs-comment"">// 对于对象的属性也加以clone</span>
       company.drinks = (ArrayList&lt;String&gt;) <span class=""hljs-keyword"">this</span>.drinks.clone();
   } <span class=""hljs-keyword"">catch</span> (CloneNotSupportedException e) {
       e.printStackTrace();
   }
   <span class=""hljs-keyword"">return</span> company;
}</code></pre>

<p><strong>这次小光不仅clone了Company, 还clone了其属性值drinks</strong><sup>注2</sup>.</p>

<p>让我们来看下小光的成果:</p>

<p><strong>和之前同样的使用:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-comment"">// new 光谷店</span>
Company ovCompany = <span class=""hljs-keyword"">new</span> OpticalValleyCompany();
System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);

<span class=""hljs-comment"">// 在光谷店的基础上clone SBI店</span>
Company sbiCompany = ovCompany.clone();
sbiCompany.setName(<span class=""hljs-string"">""创业街分店""</span>);

<span class=""hljs-comment"">// 给SBI店新增一款饮品</span>
sbiCompany.addDrink(<span class=""hljs-string"">""雪碧""</span>);

System.out.println(<span class=""hljs-string"">""SBI店: ""</span> + sbiCompany);
System.out.println(<span class=""hljs-string"">""光谷店: ""</span> + ovCompany);</code></pre>

<p><strong>改造后的结果:</strong></p>



<pre class=""prettyprint""><code class=""language-java hljs "">光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}
SBI店: {名字: '</span>创业街分店<span class=""hljs-string"">', 饮品: [橙汁, 可乐, 酸梅汤, 雪碧]'</span>}
光谷店: {名字: <span class=""hljs-string"">'光谷软件园分店'</span>, 饮品: [橙汁, 可乐, 酸梅汤]<span class=""hljs-string"">'}</span></code></pre>

<p>我们看到, 光谷店不会因为SBI店的改变而改变了. <br>
小光热干面SBI店试运营正式开始, 欢迎大家光临咯…</p>



<h2 id=""故事之后"">故事之后</h2>

<p>我们在故事中多次提到了clone, 原型. 没错, 这个就是原型模式. 照例, 我们来梳理下类之间的关系, 相对简单: <br>
<img src=""http://oat9lzupi.bkt.clouddn.com/14809331313429.jpg"" alt="""" title=""""></p>

<blockquote>
  <p>原型模式: <br>
  通过原型对象实例, 使用clone的方式来快速创建一个新的(与原型对象实例一致的)对象实例.</p>
</blockquote>

<p><strong>由于原型模式较为通用, 且相对简单, Java中的最基类Object已经提供了clone方法, 来方便我们复制出新的对象实例.</strong></p>



<h2 id=""扩展阅读一"">扩展阅读一</h2>

<p>上述故事中, 我们在某些加了<sup>注1</sup>, <sup>注2</sup>的标签. 这就是我们今天的扩展阅读一要注意的内容: </p>

<blockquote>
  <p><sup>注1</sup> 浅拷贝 <br>
  <sup>注2</sup> 深拷贝</p>
</blockquote>

<p>其实, 跟随故事我们也大致了解了浅拷贝和深拷贝的区别:</p>

<ul>
<li><strong>浅拷贝</strong>对于要克隆的对象, 会复制其基本数据类型(包括String)的属性(本例中的name属性)的<strong>值</strong>给新的对象. 而对于非基本数据类型的属性(本例中的drinks), 仅仅复制一份<strong>引用</strong>给新产生的对象, 即新产生的对象和原始对象中的非基本数据类型的属性都指向的是同一个对象.</li>
<li><strong>深拷贝</strong>   对于要克隆的对象, clone出的非基本数据类型的属性(要求属性也实现了Cloneable接口, ArrayList就已经自带实现了)不再是和原对象指向同一个对象了, 而是一个新的clone出来的属性对象实例.</li>
</ul>

<p>如下:</p>

<p><img src=""http://oat9lzupi.bkt.clouddn.com/14809352540535.jpg"" alt="""" title=""""></p>



<h2 id=""扩展阅读二"">扩展阅读二</h2>

<p>如果我们查看java源码, 可以发现, 我们调用的clone()方法是Object对象的. 而不是Cloneable接口的. 那么我们为什么要实现Cloneable接口呢? 不识闲Cloneable接口可否调用Object的clone()方法呢?</p>

<p>我们先来看下Cloneable接口的源码:</p>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">Cloneable</span> {</span>
}</code></pre>

<p>发现其中并没有任何方法. 幸运的是Java源码的java doc注释足够清晰:</p>



<pre class=""prettyprint""><code class="" hljs applescript"">/**
 * A <span class=""hljs-type"">class</span> implements <span class=""hljs-keyword"">the</span> &lt;code&gt;Cloneable&lt;/code&gt; interface <span class=""hljs-keyword"">to</span>
 * indicate <span class=""hljs-keyword"">to</span> <span class=""hljs-keyword"">the</span> {@link java.lang.Object<span class=""hljs-comment"">#clone()} method that it</span>
 * <span class=""hljs-keyword"">is</span> legal <span class=""hljs-keyword"">for</span> <span class=""hljs-keyword"">that</span> method <span class=""hljs-keyword"">to</span> make a
 * field-<span class=""hljs-keyword"">for</span>-field <span class=""hljs-keyword"">copy</span> <span class=""hljs-keyword"">of</span> instances <span class=""hljs-keyword"">of</span> <span class=""hljs-keyword"">that</span> <span class=""hljs-type"">class</span>.
 * &lt;p&gt;
 * Invoking Object's clone method <span class=""hljs-function_start""><span class=""hljs-keyword"">on</span></span> an instance <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">does</span> <span class=""hljs-keyword"">not</span> implement <span class=""hljs-keyword"">the</span>
 * &lt;code&gt;Cloneable&lt;/code&gt; interface results <span class=""hljs-keyword"">in</span> <span class=""hljs-keyword"">the</span> exception
 * &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.
 * &lt;p&gt;
 * By convention, classes <span class=""hljs-keyword"">that</span> implement this interface should override
 * &lt;tt&gt;Object.clone&lt;/tt&gt; (which <span class=""hljs-keyword"">is</span> protected) <span class=""hljs-keyword"">with</span> a public method.
 * See {@link java.lang.Object<span class=""hljs-comment"">#clone()} for details on overriding this</span>
 * method.
 * &lt;p&gt;
 * Note <span class=""hljs-keyword"">that</span> this interface <span class=""hljs-keyword"">does</span> &lt;i&gt;<span class=""hljs-keyword"">not</span>&lt;/i&gt; <span class=""hljs-keyword"">contain</span> <span class=""hljs-keyword"">the</span> &lt;tt&gt;clone&lt;/tt&gt; method.
 * Therefore, <span class=""hljs-keyword"">it</span> <span class=""hljs-keyword"">is</span> <span class=""hljs-keyword"">not</span> possible <span class=""hljs-keyword"">to</span> clone an object merely <span class=""hljs-keyword"">by</span> virtue <span class=""hljs-keyword"">of</span> <span class=""hljs-keyword"">the</span>
 * fact <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">it</span> implements this interface.  Even <span class=""hljs-keyword"">if</span> <span class=""hljs-keyword"">the</span> clone method <span class=""hljs-keyword"">is</span> invoked
 * reflectively, there <span class=""hljs-keyword"">is</span> no guarantee <span class=""hljs-keyword"">that</span> <span class=""hljs-keyword"">it</span> will succeed.
 */</code></pre>

<p>大体我们可以理解几点:</p>

<ol>
<li>Cloneable可以看着是一个标识, 实现了改接口的类才能合法地调用其从Object类中继承而来的clone()方法.</li>
<li>如果没有实现Cloneable接口而调用clone()方法, 会触发CloneNotSupportedException异常.</li>
<li>实现Cloneable接口的类应当重写Object的clone()方法.</li>
</ol>



<h2 id=""扩展阅读三"">扩展阅读三</h2>

<p>原型模式也是一种创建型的设计模式, 一般会结合工厂模式一起使用, 来构建对象. 本例中就不扩展了.</p>

<hr>

<p>好了, 小光热干面创业街分店开张啦, 吃热干面赠雪碧了, 欢迎大家光临, 欢迎大家关注.</p></div>",架构,2016-12-06 12:16
5773,"【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式
  无意中看到了百度的加载动画，看起来非常优雅，打算亲手造一个。  仿百度加载动画的重要思路：当第一遍执行完毕后就让...",u010785585,http://blog.csdn.net/linglongxin24/article/details/53470872,【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式,"<div class=""markdown_views""><blockquote>
  <p>转载请注明出处：<a href=""http://blog.csdn.net/linglongxin24/article/details/53470872""><font color=""blue"">http://blog.csdn.net/linglongxin24/article/details/53470872</font>  </a>  <br>
  本文出自<a href=""http://blog.csdn.net/linglongxin24""><font color=""blue"">【DylanAndroid的博客】</font>  </a></p>
</blockquote>

<hr>

<p></p><div class=""toc"">
<ul>
<li><a href=""#android%E8%87%AA%E5%AE%9A%E4%B9%89view%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E4%B8%80%E7%A7%8D%E4%BC%98%E9%9B%85%E7%9A%84loading%E6%96%B9%E5%BC%8F"">Android自定义View实战之仿百度加载动画一种优雅的Loading方式</a></li>
<li><a href=""#%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E7%94%A8objectanimator%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E6%93%8D%E4%BD%9Cimageview%E7%9A%84%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0"">第一个仿百度加载动画用ObjectAnimator属性动画操作ImageView的属性方法实现</a></li>
<li><a href=""#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BB%BF%E7%99%BE%E5%BA%A6%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E7%94%A8valueanimator%E5%8E%9F%E7%94%9F%E7%9A%84ondraw%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0"">第二个仿百度加载动画第二种实现方式用ValueAnimator原生的ondraw方法实现</a></li>
<li><a href=""#%E7%AC%AC%E4%B8%89%E4%B8%AA%E6%89%94%E7%90%83%E5%8A%A8%E7%94%BB-%E6%B0%B4%E5%B9%B3%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB"">第三个扔球动画-水平旋转动画</a></li>
<li><a href=""#%E7%AC%AC%E5%9B%9B%E4%B8%AA%E6%89%94%E7%90%83%E5%8A%A8%E7%94%BB-%E5%9E%82%E7%9B%B4%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB"">第四个扔球动画-垂直旋转动画</a></li>
<li><a href=""#github"">GitHub</a></li>
</ul>
</div>


<h1 id=""android自定义view实战之仿百度加载动画一种优雅的loading方式"">【Android自定义View实战】之仿百度加载动画，一种优雅的Loading方式</h1>

<blockquote>
  <p>无意中看到了百度的加载动画，看起来非常优雅，打算亲手造一个。</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/baiduloading.gif?raw=true"" alt=""效果图"" title=""""></p>

<blockquote>
  <p>仿百度加载动画的重要思路：当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画， <br>
   以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/effect.gif?raw=true"" alt=""效果图"" title=""""></p>



<h1 id=""第一个仿百度加载动画用objectanimator属性动画操作imageview的属性方法实现"">第一个：仿百度加载动画，用ObjectAnimator属性动画操作ImageView的属性方法实现：</h1>

<ul>
<li>1.布局文件</li>
</ul>



<pre class=""prettyprint""><code class=""language-xml hljs ""><span class=""hljs-pi"">&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-title"">FrameLayout</span> <span class=""hljs-attribute"">xmlns:android</span>=<span class=""hljs-value"">""http://schemas.android.com/apk/res/android""</span>
    <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""500px""</span>
    <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""500px""</span>
    <span class=""hljs-attribute"">android:orientation</span>=<span class=""hljs-value"">""vertical""</span>&gt;</span>

    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_blue""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_blue""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_yellow""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_yellow""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-title"">ImageView
</span>        <span class=""hljs-attribute"">android:id</span>=<span class=""hljs-value"">""@+id/iv_red""</span>
        <span class=""hljs-attribute"">android:layout_width</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:layout_height</span>=<span class=""hljs-value"">""wrap_content""</span>
        <span class=""hljs-attribute"">android:scaleType</span>=<span class=""hljs-value"">""matrix""</span>
        <span class=""hljs-attribute"">android:src</span>=<span class=""hljs-value"">""@mipmap/dot_red""</span>
        <span class=""hljs-attribute"">android:layout_gravity</span>=<span class=""hljs-value"">""center""</span> /&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-title"">FrameLayout</span>&gt;</span></code></pre>

<ul>
<li>2.代码</li>
</ul>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * 仿百度优雅的加载动画
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressBar</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 开始执行的第一个动画的索引，
     * 由于第一个和第二个同时当执行，
     * 当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画，
     * 以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> startIndex = <span class=""hljs-number"">0</span>;
    <span class=""hljs-javadoc"">/**
     * 交换执行动画的源图片数组
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span>[] src = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">int</span>[]{R.mipmap.dot_yellow, R.mipmap.dot_red, R.mipmap.dot_blue};
    <span class=""hljs-javadoc"">/**
     * 存放三个ImageView的的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();
    <span class=""hljs-javadoc"">/**
     * 让左边和右边动画同时执行的AnimatorSet对象
     */</span>
    <span class=""hljs-keyword"">private</span> AnimatorSet animatorSet;

    <span class=""hljs-javadoc"">/**
     * 动画所执行的最大半径（即中间点和最左边的距离）
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> maxRadius = <span class=""hljs-number"">200</span>;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-javadoc"">/**
     * 查找布局控件
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-javadoc"">/**
     * 初始化
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator();
    }

    <span class=""hljs-javadoc"">/**
     * 开始执行动画
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        <span class=""hljs-javadoc"">/**向左来回移动的X位移动画**/</span>
        ObjectAnimator objectAnimatorLeft = ObjectAnimator.ofFloat(views.get(<span class=""hljs-number"">0</span>), <span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, -maxRadius, <span class=""hljs-number"">0</span>);
        objectAnimatorLeft.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimatorLeft.setDuration(<span class=""hljs-number"">1000</span>);

        <span class=""hljs-javadoc"">/**向右来回移动的X位移动画**/</span>
        ObjectAnimator  objectAnimatorRight = ObjectAnimator.ofFloat(views.get(<span class=""hljs-number"">1</span>), <span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, maxRadius, <span class=""hljs-number"">0</span>);
        objectAnimatorRight.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimatorRight.setDuration(<span class=""hljs-number"">1000</span>);

        <span class=""hljs-javadoc"">/**动画组合-&gt;让左右同时执行**/</span>
        animatorSet = <span class=""hljs-keyword"">new</span> AnimatorSet();
        animatorSet.play(objectAnimatorRight).with(objectAnimatorLeft);
        animatorSet.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        animatorSet.start();

        <span class=""hljs-javadoc"">/**动画监听**/</span>
        objectAnimatorLeft.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                <span class=""hljs-javadoc"">/**每次记录一下下次应该停止在中间的Image索引，然后和中间的交换**/</span>
                <span class=""hljs-keyword"">if</span> (startIndex == <span class=""hljs-number"">0</span>) {
                    sweep(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">2</span>);
                    startIndex = <span class=""hljs-number"">1</span>;
                } <span class=""hljs-keyword"">else</span> {
                    sweep(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);
                    startIndex = <span class=""hljs-number"">0</span>;
                }
            }
        });

    }

    <span class=""hljs-javadoc"">/**
     * 每次让先执行动画的目标和中间停止的动画目标交换
     *
     *<span class=""hljs-javadoctag""> @param</span> a 最先执行的动画的索引
     *<span class=""hljs-javadoctag""> @param</span> b 在中间动画的索引
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">sweep</span>(<span class=""hljs-keyword"">int</span> a, <span class=""hljs-keyword"">int</span> b) {
        views.get(a).setImageResource(src[b]);
        views.get(b).setImageResource(src[a]);
        <span class=""hljs-keyword"">int</span> temp = src[b];
        src[b] = src[a];
        src[a] = temp;
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        animatorSet.cancel();
    }
}
</code></pre>



<h1 id=""第二个仿百度加载动画第二种实现方式用valueanimator原生的ondraw方法实现"">第二个：仿百度加载动画第二种实现方式，用ValueAnimator+原生的ondraw()方法实现：</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.ValueAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.graphics.Canvas;
<span class=""hljs-keyword"">import</span> android.graphics.Paint;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.util.Log;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.View;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * 仿百度优雅的加载动画
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressBar2</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">View</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 开始执行的第一个动画的索引，
     * 由于第一个和第二个同时当执行，
     * 当第一遍执行完毕后就让第一个停下来在中间位置，换原来中间位置的第三个开始执行动画，
     * 以此类推，当第二遍执行完毕后第二个停下来，中间位置的开始执行动画。
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sweepIndex = <span class=""hljs-number"">0</span>;
    <span class=""hljs-javadoc"">/**
     * 交换执行动画的颜色数组
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span>[] colors = <span class=""hljs-keyword"">new</span> <span class=""hljs-keyword"">int</span>[]{getResources().getColor(R.color.colorYellow),
            getResources().getColor(R.color.colorRed),
            getResources().getColor(R.color.colorBlue)};

    <span class=""hljs-javadoc"">/**
     * 动画所执行的最大偏移量（即中间点和最左边的距离）
     */</span>
    <span class=""hljs-keyword"">private</span> Float maxWidth = <span class=""hljs-number"">200</span>f;

    <span class=""hljs-javadoc"">/**
     * 三个圆的半径
     */</span>
    <span class=""hljs-keyword"">private</span> Float radius = <span class=""hljs-number"">30</span>f;

    <span class=""hljs-javadoc"">/**
     * 当前偏移的X坐标
     */</span>
    <span class=""hljs-keyword"">private</span> Float currentX = <span class=""hljs-number"">0</span>f;
    <span class=""hljs-javadoc"">/**
     * 画笔
     */</span>
    <span class=""hljs-keyword"">private</span> Paint paint;
    <span class=""hljs-javadoc"">/**
     * 属性动画
     */</span>
    <span class=""hljs-keyword"">private</span> ValueAnimator valueAnimator;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        startAnimator();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        startAnimator();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressBar2</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        startAnimator();
    }

    <span class=""hljs-javadoc"">/**
     * 用属性动画实现位移动画
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>f, maxWidth, <span class=""hljs-number"">0</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                currentX = (Float) animation.getAnimatedValue();
                invalidate();
            }
        });
        valueAnimator.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                sweep(sweepIndex);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        paint = <span class=""hljs-keyword"">new</span> Paint(Paint.ANTI_ALIAS_FLAG);
        valueAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        valueAnimator.setRepeatMode(ValueAnimator.REVERSE);
        valueAnimator.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator.start();
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDraw</span>(Canvas canvas) {
        <span class=""hljs-keyword"">super</span>.onDraw(canvas);
        <span class=""hljs-keyword"">int</span> centerX = getWidth() / <span class=""hljs-number"">2</span>;
        <span class=""hljs-keyword"">int</span> centerY = getHeight() / <span class=""hljs-number"">2</span>;

        <span class=""hljs-javadoc"">/**画左边的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">0</span>]);
        canvas.drawCircle(centerX - currentX, centerY, radius, paint);

        <span class=""hljs-javadoc"">/**画右边的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">1</span>]);
        canvas.drawCircle(centerX + currentX, centerY, radius, paint);

        <span class=""hljs-javadoc"">/**画中间的圆**/</span>
        paint.setColor(colors[<span class=""hljs-number"">2</span>]);
        canvas.drawCircle(centerX, centerY, radius, paint);

    }

    <span class=""hljs-javadoc"">/**
     * 每次让先执行动画的目标和中间停止的动画目标交换
     *
     *<span class=""hljs-javadoctag""> @param</span> a 最先执行的动画的索引
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">sweep</span>(<span class=""hljs-keyword"">int</span> a) {
        <span class=""hljs-keyword"">int</span> temp = colors[<span class=""hljs-number"">2</span>];
        colors[<span class=""hljs-number"">2</span>] = colors[a];
        colors[a] = temp;

        <span class=""hljs-keyword"">if</span> (a == <span class=""hljs-number"">0</span>) {
            sweepIndex = <span class=""hljs-number"">1</span>;
        } <span class=""hljs-keyword"">else</span> {
            sweepIndex = <span class=""hljs-number"">0</span>;
        }
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        valueAnimator.cancel();
    }
}
</code></pre>

<blockquote>
  <p>在经过以上的动画之后，突然在<a href=""http://www.ui.cn/detail/73226.html"">Loading设计思路分享</a>中看到了两个比较酷炫的动画 <br>
  主要思路图如下</p>
</blockquote>

<p><img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/demo.gif?raw=true"" alt=""效果图"" title=""""> <br>
 <img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/sl1.jpg?raw=true"" alt=""效果图"" title=""""> <br>
 <img src=""https://github.com/linglongxin24/BaiduProgressBar/blob/master/screenshots/sl2.gif?raw=true"" alt=""效果图"" title=""""></p>



<h1 id=""第三个扔球动画-水平旋转动画"">第三个：扔球动画-&gt;水平旋转动画</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.PropertyValuesHolder;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.util.Log;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduLoadingView</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>
    <span class=""hljs-javadoc"">/**
     * 存放三个小球的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();
    <span class=""hljs-javadoc"">/**
     * 同时播放动画的对象
     */</span>
    <span class=""hljs-keyword"">private</span> AnimatorSet animatorSet;

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduLoadingView</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-javadoc"">/**
     * 初始化
     */</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator</span>() {
        <span class=""hljs-javadoc"">/**动画组合-&gt;让左右同时执行**/</span>
        animatorSet = <span class=""hljs-keyword"">new</span> AnimatorSet();
        animatorSet.play(startAnimator1()).with(startAnimator2()).with(startAnimator3());
        animatorSet.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        animatorSet.start();
    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator1</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">0</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;

    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator2</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">1</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;

    }

    <span class=""hljs-keyword"">private</span> ObjectAnimator <span class=""hljs-title"">startAnimator3</span>() {
        <span class=""hljs-javadoc"">/**对象的不同属性组合**/</span>
        PropertyValuesHolder objectAnimatorTranslation = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""translationX""</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">100</span>, -<span class=""hljs-number"">200</span>, -<span class=""hljs-number"">100</span>, <span class=""hljs-number"">0</span>, <span class=""hljs-number"">100</span>, <span class=""hljs-number"">200</span>, <span class=""hljs-number"">100</span>);
        PropertyValuesHolder objectAnimatorScale = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleX""</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>f, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f);
        PropertyValuesHolder objectAnimatorScaleY = PropertyValuesHolder.ofFloat(<span class=""hljs-string"">""scaleY""</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>f, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">0.5</span>f, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">1.5</span>f);
        <span class=""hljs-javadoc"">/**同时操作对象的两个属性动画**/</span>
        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(views.get(<span class=""hljs-number"">2</span>), objectAnimatorTranslation, objectAnimatorScale, objectAnimatorScaleY);
        objectAnimator.setRepeatCount(-<span class=""hljs-number"">1</span>);
        objectAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        objectAnimator.setDuration(<span class=""hljs-number"">2000</span>);
        objectAnimator.start();
        <span class=""hljs-keyword"">return</span> objectAnimator;
    }

    <span class=""hljs-javadoc"">/**
     * 在View销毁时停止动画
     */</span>
    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDetachedFromWindow</span>() {
        <span class=""hljs-keyword"">super</span>.onDetachedFromWindow();
        animatorSet.cancel();
    }
}
</code></pre>



<h1 id=""第四个扔球动画-垂直旋转动画"">第四个：扔球动画-&gt;垂直旋转动画</h1>



<pre class=""prettyprint""><code class=""language-java hljs ""><span class=""hljs-keyword"">package</span> cn.bluemobi.dylan.baiduprogressbar;

<span class=""hljs-keyword"">import</span> android.animation.Animator;
<span class=""hljs-keyword"">import</span> android.animation.AnimatorSet;
<span class=""hljs-keyword"">import</span> android.animation.ObjectAnimator;
<span class=""hljs-keyword"">import</span> android.animation.PropertyValuesHolder;
<span class=""hljs-keyword"">import</span> android.animation.ValueAnimator;
<span class=""hljs-keyword"">import</span> android.content.Context;
<span class=""hljs-keyword"">import</span> android.graphics.PointF;
<span class=""hljs-keyword"">import</span> android.util.AttributeSet;
<span class=""hljs-keyword"">import</span> android.view.LayoutInflater;
<span class=""hljs-keyword"">import</span> android.view.animation.LinearInterpolator;
<span class=""hljs-keyword"">import</span> android.widget.FrameLayout;
<span class=""hljs-keyword"">import</span> android.widget.ImageView;

<span class=""hljs-keyword"">import</span> java.util.ArrayList;
<span class=""hljs-keyword"">import</span> java.util.List;

<span class=""hljs-javadoc"">/**
 * Created by dylan on 2016-12-04.
 */</span>

<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">BaiduProgressLoading</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">FrameLayout</span> {</span>

    <span class=""hljs-javadoc"">/**
     * 存放三个小球的集合
     */</span>
    <span class=""hljs-keyword"">private</span> List&lt;ImageView&gt; views = <span class=""hljs-keyword"">new</span> ArrayList&lt;&gt;();

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context) {
        <span class=""hljs-keyword"">super</span>(context);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context, AttributeSet attrs) {
        <span class=""hljs-keyword"">super</span>(context, attrs);
        init();
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-title"">BaiduProgressLoading</span>(Context context, AttributeSet attrs, <span class=""hljs-keyword"">int</span> defStyleAttr) {
        <span class=""hljs-keyword"">super</span>(context, attrs, defStyleAttr);
        init();
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">assignViews</span>() {
        ImageView iv_blue = (ImageView) findViewById(R.id.iv_blue);
        ImageView iv_yellow = (ImageView) findViewById(R.id.iv_yellow);
        ImageView iv_red = (ImageView) findViewById(R.id.iv_red);
        views.add(iv_yellow);
        views.add(iv_red);
        views.add(iv_blue);
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">init</span>() {
        LayoutInflater.from(getContext()).inflate(R.layout.baidu_progress_bar, <span class=""hljs-keyword"">this</span>, <span class=""hljs-keyword"">true</span>);
        assignViews();
        startAnimator1();
        startAnimator2();
        startAnimator3();
    }

    PointF point = <span class=""hljs-keyword"">new</span> PointF();

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator1</span>() {
        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">90</span>, <span class=""hljs-number"">360</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">750</span>);
        valueAnimator.start();

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">180</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.setStartDelay(<span class=""hljs-number"">750</span>);
        valueAnimator2.start();


        ValueAnimator valueAnimator3 = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">90</span>);
        valueAnimator3.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">0</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">0</span>).setTranslationY(point.y);
            }
        });
        valueAnimator3.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator3.setDuration(<span class=""hljs-number"">250</span>);
        valueAnimator3.setStartDelay(<span class=""hljs-number"">1750</span>);
        valueAnimator3.start();
        valueAnimator3.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator1();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator2</span>() {

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, <span class=""hljs-number"">0</span>, -<span class=""hljs-number"">180</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">1</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">1</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.start();

        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">360</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">1</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">1</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator.setStartDelay(<span class=""hljs-number"">1000</span>);
        valueAnimator.start();
        valueAnimator.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator2();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }

    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">startAnimator3</span>() {

        ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">270</span>, <span class=""hljs-number"">180</span>);
        valueAnimator.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator.setDuration(<span class=""hljs-number"">250</span>);
        valueAnimator.start();

        ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">360</span>);
        valueAnimator2.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> - <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator2.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator2.setDuration(<span class=""hljs-number"">1000</span>);
        valueAnimator2.setStartDelay(<span class=""hljs-number"">250</span>);
        valueAnimator2.start();


        ValueAnimator valueAnimator3 = ValueAnimator.ofFloat(<span class=""hljs-number"">180</span>, -<span class=""hljs-number"">90</span>);
        valueAnimator3.addUpdateListener(<span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> value = (Float) animation.getAnimatedValue();
                <span class=""hljs-javadoc"">/**
                 * ﻿﻿
                 * 圆点坐标：(x0,y0)
                 * 半径：r
                 * 角度：a0
                 * 则圆上任一点为：（x1,y1）
                 * x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )
                 * y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )
                 */</span>
                <span class=""hljs-javadoc"">/**第四步，根据每个菜单真实角度计算其坐标值**/</span>
                point.x = (<span class=""hljs-keyword"">float</span>) Math.cos(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span> + <span class=""hljs-number"">100</span>;
                point.y = (<span class=""hljs-keyword"">float</span>) -Math.sin(value * (Math.PI / <span class=""hljs-number"">180</span>)) * <span class=""hljs-number"">100</span>;
                views.get(<span class=""hljs-number"">2</span>).setTranslationX(point.x);
                views.get(<span class=""hljs-number"">2</span>).setTranslationY(point.y);
            }
        });
        valueAnimator3.setInterpolator(<span class=""hljs-keyword"">new</span> LinearInterpolator());
        valueAnimator3.setDuration(<span class=""hljs-number"">750</span>);
        valueAnimator3.setStartDelay(<span class=""hljs-number"">1250</span>);
        valueAnimator3.start();
        valueAnimator3.addListener(<span class=""hljs-keyword"">new</span> Animator.AnimatorListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationStart</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationEnd</span>(Animator animation) {
                startAnimator3();
            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationCancel</span>(Animator animation) {

            }

            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {

            }
        });
    }
}
</code></pre>



<h1 id=""github""><a href=""https://github.com/linglongxin24/BaiduProgressBar"">GitHub</a></h1></div>","移动开发,Android自定义View",2016-12-06 12:45
3331,"一、简介

最近开始写一些文章记录一下以前的一些自己写的小项目或者是定义View积累，积灰的东西还是要多翻出来整理整理看看的，在我的csdn上也有。这个只完成了一部分燃起熄灭的动画，没有为何燃起火焰的...",XIONG_1203,http://blog.csdn.net/xiong_1203/article/details/53470230,Android动画之萌萌哒蜡烛吹蜡烛动画,"<div class=""markdown_views""><h1 id=""一简介"">一、简介</h1>

<p>最近开始写一些文章记录一下以前的一些自己写的小项目或者是定义View积累，积灰的东西还是要多翻出来整理整理看看的，在<a href=""http://blog.csdn.net/xiong_1203"">我的csdn</a>上也有。<strong>这个只完成了一部分燃起熄灭的动画，没有为何燃起火焰的动画，希望有兴趣的同学也可以接着完成并分享</strong>，话不多说，我们来看这两根萌萌的小蜡烛。 <br>
<img title="""" alt=""candle.gif"" src=""http://upload-images.jianshu.io/upload_images/2934422-4a764875c3a9863a.gif?imageMogr2/auto-orient/strip""> <br>
小蜡烛憋足气把火焰燃起，一下被旁边的哥们吹灭了 0^0 ,看起来还是萌气十足的啊。看着图大家应该能想到应该怎么实现了吧，自定义View！对了，但是具体要怎么把这个过程做好呢，跟着脚步一起来看一看吧。<strong>代码稍微有点多，大家耐心观看</strong>，有兴趣的同学可以从我的<a href=""https://github.com/XIONG1203/CuteCandleView"">GITHUB</a>上clone下来，对着代码看吧。</p>

<h1 id=""二过程实现"">二、过程实现</h1>



<h5 id=""蜡烛的绘制和动画"">蜡烛的绘制和动画</h5>

<ul>
<li>本着面向对象的思想，很明显这里就是两个蜡烛嘛！既然是这样那我们就定义一个蜡烛类具有蜡烛的基本属性。 <br>
<img title="""" alt=""image.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-7e0e5d0f96f1d3bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></li>
</ul>



<pre class=""prettyprint""><code class="" hljs cs""><span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">abstract</span> <span class=""hljs-keyword"">class</span> ICandle {
    <span class=""hljs-comment"">//蜡烛底部左下坐标</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCurX;
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCurY;
    <span class=""hljs-comment"">//蜡烛宽高</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleWidth;
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleHeight;
    <span class=""hljs-comment"">//蜡烛左眼坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mEyeLPoint;
    <span class=""hljs-comment"">//蜡烛右眼坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mEyeRPoint;
    <span class=""hljs-comment"">//蜡烛眼睛半径</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mEyeRadius;
    <span class=""hljs-comment"">//眼睛间隔距离</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mEyeDevide;
    <span class=""hljs-comment"">//身体颜色</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">int</span> mCandleColor;
    <span class=""hljs-comment"">//是否停止动画中</span>
    <span class=""hljs-keyword"">protected</span> boolean mIsAnimStoping = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-comment"">//蜡烛芯坐标</span>
    <span class=""hljs-keyword"">protected</span> Point mCandlewickPoint;
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">initAnim</span>(){
    }
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">stopAnim</span>(){
    }
    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">drawSelf</span>(Canvas canvas){
    }
}</code></pre>

<p>对应着这蜡烛还有代码，那就一目了然了。可能需要解释的应该就是下面的几个方法了<code>public void initAnim()</code>， <code>stopAnim()</code>初始化开始和结束动画需要的数据，小蜡烛将会实现这个方法，<code>drawSelf(Canvas canvas)</code>把画布传进来然后蜡烛自己绘制自己。 <br>
现在就是让我们来看一看小蜡烛身体内部构造的时候了，<strong>hiahiahiahia！</strong> <br>
不对，和蜡烛生死相随的还有火焰呢！先来看看火焰吧，等下小蜡烛还要燃烧自己呢。<strong>+10086s</strong> <br>
+ <strong>Flame</strong> <br>
一样先来一睹我们的富勒姆真容 <br>
<img title="""" alt=""flame.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-44fd38d11b58617d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""> <br>
<img title="""" alt=""flamex.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-381f4978524815e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></p>

<p>好像也没什么毛病，首先是里面的区域，就是Flame啦，外面的呢，就是Flame先生燃烧自己散发的人性之光和飘散的骨灰(手动抹眼泪)。 <br>
来看一下Flame的实现吧。我们一步步分析。</p>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">static</span> <span class=""hljs-keyword"">float</span> CHANGE_FACTOR = <span class=""hljs-number"">20</span>;
    <span class=""hljs-keyword"">private</span> Paint mPaint;
    <span class=""hljs-keyword"">private</span> Path mPath;
    <span class=""hljs-comment"">//左下点坐标</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCurX;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCurY;
    <span class=""hljs-comment"">//火焰宽度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mWidth;
    <span class=""hljs-comment"">//火焰高度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mHeight;
    <span class=""hljs-comment"">//记录初始高度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreHeight;
    <span class=""hljs-comment"">//记录初始宽度</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreWidth;
    <span class=""hljs-comment"">//火焰顶部贝塞尔曲线控制点变化参数</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mTopXFactor;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mTopYFactor;
    <span class=""hljs-comment"">//用于实现火焰的抖动</span>
    <span class=""hljs-keyword"">private</span> Random mRandom;
    <span class=""hljs-comment"">//光环半径</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mHaloRadius;
    <span class=""hljs-comment"">//正在燃烧</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsFiring;
    <span class=""hljs-comment"">//是否启动停止动画</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStopAnim = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mFlagStop = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> LinearGradient mLinearGradient;
    <span class=""hljs-keyword"">private</span> RadialGradient mRadialGradient;

    <span class=""hljs-keyword"">private</span> ValueAnimator mFlameAnimator;
    <span class=""hljs-keyword"">private</span> ValueAnimator mHaloAnimator;</code></pre>

<p>参数就是这些了，主要是我们的动画实现过程，也就是我们的属性动画<code>ValueAnimator</code> 这里还有两个渲染类不知道大家用过没有，<code>LinearGradient</code>和<code>RadialGradient</code>不了解的同学可以看我之前的博文了解一下。<code>LinearGradient</code>绘制出了火焰，<code>RadialGradient</code>绘制除了发散的光芒。 <br>
初始化的过程我就不写了，大家对这代码看吧。那主要的就是小火焰的是怎么绘制出来的呢    <em>show the code</em></p>



<pre class=""prettyprint""><code class="" hljs avrasm"">    mPaint<span class=""hljs-preprocessor"">.setStyle</span>(Paint<span class=""hljs-preprocessor"">.Style</span><span class=""hljs-preprocessor"">.FILL</span>)<span class=""hljs-comment"">;</span>
    mPaint<span class=""hljs-preprocessor"">.setShader</span>(mLinearGradient)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.reset</span>()<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.moveTo</span>(mCurX, mCurY)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.quadTo</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
            mCurY + mHeight / <span class=""hljs-number"">3</span>,
            mCurX + mWidth, mCurY)<span class=""hljs-comment"">;</span>
    mPath<span class=""hljs-preprocessor"">.quadTo</span>(mCurX + mWidth / <span class=""hljs-number"">2</span> + ((<span class=""hljs-number"">1</span> - mRandom<span class=""hljs-preprocessor"">.nextFloat</span>()) * CHANGE_FACTOR) + mTopXFactor,
            mCurY - <span class=""hljs-number"">2</span> * mHeight + mTopYFactor,
            mCurX, mCurY)<span class=""hljs-comment"">;</span>
    canvas<span class=""hljs-preprocessor"">.drawPath</span>(mPath, mPaint)<span class=""hljs-comment"">;</span></code></pre>

<p>这就是火焰flame的绘制，可以看到这里用到了二次贝塞尔曲线的绘制，不太清楚贝塞尔曲线的同学也可以点这<a href=""http://blog.csdn.net/xiong_1203/article/details/53453408"">波浪Loading动画(贝塞尔曲线)</a>有简单的介绍，当时是用在一个水波的view里面。这里的绘制是以前面那个图里面的矩形为参照，我们再来看一下这个图（当然是加强版hiahia）。 <br>
<img title="""" alt=""flame.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-daa719c1eda69309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""> <br>
那为什么上面的x坐标还加了<code>mRandom.nextFloat()) * CHANGE_FACTOR</code>呢？你想啊，火焰不是会左右晃动吗，利用一个随机来控制左右摆动咯。</p>



<pre class=""prettyprint""><code class="" hljs cpp"">    mFlameAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">4</span>).setDuration(<span class=""hljs-number"">4000</span>);
    mFlameAnimator.setRepeatCount(ValueAnimator.INFINITE);
    mFlameAnimator.addUpdateListener(
                   <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
        @Override
        <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> onAnimationUpdate(ValueAnimator animation) {
            <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
            <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">1.0f</span> &amp;&amp; zeroToOne &lt;= <span class=""hljs-number"">1.2f</span>) {
                <span class=""hljs-comment"">//火焰燃起</span>
                zeroToOne = <span class=""hljs-number"">1.0f</span> - <span class=""hljs-number"">5</span> * (zeroToOne - <span class=""hljs-number"">1.0f</span>);<span class=""hljs-comment"">//1-0</span>
                mHeight = (<span class=""hljs-keyword"">int</span>) (mPreHeight * (<span class=""hljs-number"">1</span> - zeroToOne));
                mIsFiring = <span class=""hljs-keyword"">true</span>;
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">3.5f</span>) {
                <span class=""hljs-keyword"">if</span> (mFlagStop) {
                    mFlameAnimator.cancel();
                    <span class=""hljs-keyword"">return</span>;
                }
                <span class=""hljs-comment"">//火焰被吹灭</span>
                zeroToOne = <span class=""hljs-number"">2</span> * (zeroToOne - <span class=""hljs-number"">3.5f</span>);<span class=""hljs-comment"">//0-2</span>
                mTopXFactor = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">20</span> * zeroToOne);
                mTopYFactor = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">160</span> * zeroToOne);
<span class=""hljs-comment"">//                    mWidth = (int) (mPreWidth * (1 -zeroToOne));</span>
                mIsFiring = <span class=""hljs-keyword"">false</span>;
            }
        }
    });</code></pre>

<p>在4秒的时间内，火焰进行了一系列活动，从下面随着灯芯移上来，不断的改变火焰的位置，分为了两部分，<strong>火焰燃起</strong>和<strong>火焰熄灭</strong>，从代码中可以看到，火焰燃起时<code>mHeight</code>慢慢变大，然后就是有了升起的过程辣，另外一个就是火焰被吹灭的时候，因为吹灭的时候火焰的高度肯定是保持之前的值，所以不需要改变，而是用了<code>mTopXFactor</code>和<code>mTopYFactor</code>这个两个因子来控制火焰的位置。好了，既然火焰有了，<strong>蜡炬成灰泪始干</strong>啊，生命之光也该出场了。 <br>
光圈的绘制和动画就相对简单了</p>



<pre class=""prettyprint""><code class="" hljs avrasm"">            mPaint<span class=""hljs-preprocessor"">.setStyle</span>(Paint<span class=""hljs-preprocessor"">.Style</span><span class=""hljs-preprocessor"">.STROKE</span>)<span class=""hljs-comment"">;</span>
            mPaint<span class=""hljs-preprocessor"">.setStrokeWidth</span>(<span class=""hljs-number"">5</span>)<span class=""hljs-comment"">;</span>
            mPaint<span class=""hljs-preprocessor"">.setShader</span>(mRadialGradient)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius, mPaint)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius + <span class=""hljs-number"">5</span>, mPaint)<span class=""hljs-comment"">;</span>
            canvas<span class=""hljs-preprocessor"">.drawCircle</span>(mCurX + mWidth / <span class=""hljs-number"">2</span>,
                         mCurY - mHeight / <span class=""hljs-number"">2</span>, mHaloRadius - <span class=""hljs-number"">5</span>, mPaint)<span class=""hljs-comment"">;</span></code></pre>



<pre class=""prettyprint""><code class="" hljs java"">        mHaloAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">1</span>).setDuration(<span class=""hljs-number"">500</span>);
        mHaloAnimator.setRepeatCount(ValueAnimator.INFINITE);
        mHaloAnimator.addUpdateListener(
                         <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationUpdate</span>(ValueAnimator animation) {
                <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
                <span class=""hljs-keyword"">if</span> (mIsFiring) {
                    mHaloRadius = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">70</span> + zeroToOne % <span class=""hljs-number"">1.0</span>f * <span class=""hljs-number"">20</span>);
                }
            }
        });</code></pre>

<p>这里改变的只有一个参数，<code>mHaloRadius</code>也就是光圈的半径。但是不要忘了，其他参数同时也是在改变的呢，只不过是放在了<code>mFlameAnimator</code>里面。 <br>
好了介绍到这Flame的介绍完了，任重而道远啊，写了这么多却还没完结，让我想到一某位古人说过，不是我。</p>

<blockquote>
  <p>还未老死，就先累死  </p>
</blockquote>

<ul>
<li><strong>FireCandle</strong> <br>
这名字有点奇怪，火烛，厉害了Word哥。前面已经介绍过ICandle了，现在来看一下他的实现类，蜡烛两兄弟之FireCandle。 <br>
初始化照例也就不说了，来看该有的变量。</li>
</ul>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-keyword"">private</span> Paint mPaint;
    <span class=""hljs-comment"">//中心X坐标</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCenterX;
    <span class=""hljs-comment"">//记录初始宽</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreWidth;
    <span class=""hljs-comment"">//记录初始高</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mPreHeight;
    <span class=""hljs-comment"">//蜡烛芯旋转角</span>
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> mCandlewickDegrees = <span class=""hljs-number"">0</span>;
    <span class=""hljs-keyword"">private</span> Flame mFlame;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsFire = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStateOnStart = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mIsStateOnEnd = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">boolean</span> mFlagStop = <span class=""hljs-keyword"">false</span>;
    <span class=""hljs-keyword"">private</span> ValueAnimator mCandlesAnimator;</code></pre>

<p>命名还是挺规范的，应该一看就知道是干嘛的。 <br>
我们还是来主要看绘制和属性动画的配合，绘制就不看了(<em>光速打脸</em>)。来看动画。</p>



<pre class=""prettyprint""><code class="" hljs cpp"">    mCandlesAnimator = ValueAnimator.ofFloat(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">4</span>).setDuration(<span class=""hljs-number"">4000</span>);
    mCandlesAnimator.addUpdateListener(
                     <span class=""hljs-keyword"">new</span> ValueAnimator.AnimatorUpdateListener() {
        @Override
        <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> onAnimationUpdate(ValueAnimator animation) {
            <span class=""hljs-keyword"">float</span> zeroToOne = (<span class=""hljs-keyword"">float</span>) animation.getAnimatedValue();
            <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">1.0f</span>) {
                <span class=""hljs-comment"">//蜡烛芯蓄力下拉</span>
                mIsFire = <span class=""hljs-keyword"">true</span>;
                mCandleWidth = mPreWidth + (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">40</span>);
                mCandleHeight = mPreHeight - (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">30</span>);
                mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">60</span> + (<span class=""hljs-number"">180</span> + <span class=""hljs-number"">60</span>) * zeroToOne);
                refreshEyePosition();
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">2.0f</span>) {
                zeroToOne = zeroToOne - <span class=""hljs-number"">1.0f</span>;
                <span class=""hljs-comment"">//蜡烛芯上摆</span>
                <span class=""hljs-keyword"">if</span> (zeroToOne &lt;= <span class=""hljs-number"">0.2f</span>) {
                    zeroToOne = <span class=""hljs-number"">1.0f</span> - <span class=""hljs-number"">5</span> * zeroToOne;
                    mIsFire = <span class=""hljs-keyword"">false</span>;
                    mCandleWidth = mPreWidth + (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">40</span>);
                    mCandleHeight = mPreHeight - (<span class=""hljs-keyword"">int</span>) (zeroToOne * <span class=""hljs-number"">30</span>);
                    mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (<span class=""hljs-number"">180</span> * zeroToOne);
                } <span class=""hljs-keyword"">else</span> {
                    <span class=""hljs-keyword"">if</span> (mFlameStateListener != null &amp;&amp; !mIsStateOnStart) {
                        mFlameStateListener.flameStart();
                        mIsStateOnStart = <span class=""hljs-keyword"">true</span>;
                    }
                    mCandleWidth = mPreWidth;
                    mCandleHeight = mPreHeight;
                    mCandlewickDegrees = <span class=""hljs-number"">0</span>;
                    <span class=""hljs-keyword"">if</span> (mFlagStop) {
                        mCandlesAnimator.cancel();
                    }
                }
                refreshEyePosition();
            } <span class=""hljs-keyword"">else</span> <span class=""hljs-keyword"">if</span> (zeroToOne &gt;= <span class=""hljs-number"">3.5f</span>) {
                <span class=""hljs-comment"">//蜡烛芯被吹歪</span>
                zeroToOne = <span class=""hljs-number"">2</span> * (zeroToOne - <span class=""hljs-number"">3.5f</span>);<span class=""hljs-comment"">//0-1</span>
                mCandlewickDegrees = (<span class=""hljs-keyword"">int</span>) (-<span class=""hljs-number"">60</span> * zeroToOne);
                <span class=""hljs-keyword"">if</span> (mFlameStateListener != null &amp;&amp; !mIsStateOnEnd) {
                    mFlameStateListener.flameEnd();
                    mIsStateOnEnd = <span class=""hljs-keyword"">true</span>;
                }
            }
        }
    });</code></pre>

<p>这个就过程就有点多了，但是其实一点都不复杂，，首先我们看动画里面的小<small><small>蜡烛,<big><big>一开始，他来了一个变胖红脸深蹲，所以呢<code>mCandleWidth</code>是变大的，<code>mCandleHeight</code>是变小的，后面那个灯芯随着深蹲来了一个大角度旋转，灯芯的如何旋转大家也看到了，改变坐标系然后就可以了。用到了 <br>
<code>canvas.rotate(mCandlewickDegrees, mCenterX, mCurY - mCandleHeight);</code>这个方法。上摆过程也是一样的，就不多说了。<code>refreshEyePosition();</code>这个方法是改变眼睛位置的，两个地方都用到了所以稍微独立出来了。注意<code>mIsFire</code>这个变量，没有火焰的时候就做其他绘制，比如说红眼睛等等。好了好了，介绍到这，小蜡烛的部分就结束了。 <br>
+ SecCandle <br>
大<big><big>蜡烛，<small><small>帅蜡烛镇楼，实际的绘制和小蜡烛的就差不多了，这里就不解释了。 <br>
<img title="""" alt=""bigc.png"" src=""http://upload-images.jianshu.io/upload_images/2934422-64b3a0f823799ffc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240""></small></small></big></big></big></big></small></small></p>



<h5 id=""共同绘制view和控制器"">共同绘制View和控制器</h5>

<ul>
<li>AnimControler <br>
这个类的功能很简单，绘制地板部分还有就是把计算后传过来的高度宽度赋给两支蜡烛，然后控制两支蜡烛各自开始动画。</li>
</ul>



<pre class=""prettyprint""><code class="" hljs avrasm"">        mFirCandle = new FirCandle(mRelativeX + mWidth / <span class=""hljs-number"">6</span>, mRelativeY + mHeight)<span class=""hljs-comment"">;</span>
        mFirCandle<span class=""hljs-preprocessor"">.initCandle</span>(mFirCandleWidth, mFirCandleHeight)<span class=""hljs-comment"">;</span>
        mFirCandle<span class=""hljs-preprocessor"">.initAnim</span>()<span class=""hljs-comment"">;</span>
        mSecCandle = new SecCandle(mRelativeX + mWidth / <span class=""hljs-number"">2</span>, mRelativeY + mHeight)<span class=""hljs-comment"">;</span>
        mSecCandle<span class=""hljs-preprocessor"">.initCandle</span>(mSecCandleWidth, mSecCandleHeight - <span class=""hljs-number"">80</span>)<span class=""hljs-comment"">;</span>
        mSecCandle<span class=""hljs-preprocessor"">.initAnim</span>()<span class=""hljs-comment"">;</span></code></pre>

<p>最后的最后，就是我们的View了 <br>
+ CandlesAnimView</p>



<pre class=""prettyprint""><code class="" hljs java"">        <span class=""hljs-comment"">//16ms刷新Canvas</span>
        mInvalidateAnimator = ValueAnimator.ofInt(<span class=""hljs-number"">0</span>, <span class=""hljs-number"">1</span>).setDuration(<span class=""hljs-number"">16</span>);
        mInvalidateAnimator.setRepeatCount(ValueAnimator.INFINITE);
        mInvalidateAnimator.addListener(<span class=""hljs-keyword"">new</span> AnimatorListenerAdapter() {
            <span class=""hljs-annotation"">@Override</span>
            <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onAnimationRepeat</span>(Animator animation) {
                invalidate();
            }
        });
        mInvalidateAnimator.start();</code></pre>

<p>这个属性动画履行的任务就是快速的刷新界面，是Candle的动画能够及时显示。</p>



<pre class=""prettyprint""><code class="" hljs java"">    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onMeasure</span>(<span class=""hljs-keyword"">int</span> widthMeasureSpec, <span class=""hljs-keyword"">int</span> heightMeasureSpec) {
        <span class=""hljs-keyword"">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);
        <span class=""hljs-keyword"">int</span> width = measureDimension(WIDTH_DEFAULT * mDensity, 
                                   widthMeasureSpec);
        <span class=""hljs-keyword"">int</span> height = measureDimension(HEIGHT_DEFAULT *mDensity,
                                   heightMeasureSpec);
        setMeasuredDimension(width, height);
    }

    <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">measureDimension</span>(<span class=""hljs-keyword"">int</span> defaultSize, <span class=""hljs-keyword"">int</span> measureSpec) {
        <span class=""hljs-keyword"">int</span> result;
        <span class=""hljs-keyword"">int</span> specMode = MeasureSpec.getMode(measureSpec);
        <span class=""hljs-keyword"">int</span> specSize = MeasureSpec.getSize(measureSpec);

        <span class=""hljs-keyword"">if</span> (specMode == MeasureSpec.EXACTLY) {
            result = specSize;
        } <span class=""hljs-keyword"">else</span> {
            result = defaultSize;
            <span class=""hljs-keyword"">if</span> (specMode == MeasureSpec.AT_MOST) {
                result = Math.min(result, specSize);
            }
        }
        <span class=""hljs-keyword"">return</span> result;
    }

    <span class=""hljs-annotation"">@Override</span>
    <span class=""hljs-keyword"">protected</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">onDraw</span>(Canvas canvas) {
        <span class=""hljs-keyword"">if</span> (!mIsInit) {
            initConfig();
            mIsInit = <span class=""hljs-keyword"">true</span>;
        }
        mAnimControler.drawMyView(canvas);
    }</code></pre>

<p>可以看到最后在view里面调用了我们的控制器，把<code>cavas</code>传过去了。 <br>
最后的tip：大家有没有发现每个动画的<strong>duration</strong>都是一样的。</p>



<h1 id=""三最后"">三、最后</h1>

<p><big>好了至此，本来一个简单的view自定义被我说了这么多。初次在简书上写，望大家多支持支持。 <br>
希望大家有什么建议和意见都可以提出。望斧正。 <br>
<a href=""https://github.com/XIONG1203/CuteCandleView"">GITHUB源码下载</a> <br>
欢迎大家来<a href=""http://blog.csdn.net/xiong_1203"">我的博客</a>逛逛,之前也没什么时间写博客文章的，最近开始，大家多多支持！！！</big></p></div>",移动开发,2016-12-06 12:48
3102,Hybrid 是移动端热更新最常用的手段，限于 App Store 上架审核时间较长，美团大众点评也采取了该方案，欢迎来自美团大众点旅游业务 iOS 负责人**吴卓**分享**《美团大众点评 酒旅方面...,Tencent_Bugly,http://blog.csdn.net/tencent_bugly/article/details/53484272,【腾讯Bugly干货分享】美团大众点评 Hybrid 化建设,"<div class=""markdown_views""><p>本文来自于<strong>腾讯Bugly</strong>公众号（<strong>weixinBugly</strong>），未经作者同意，请勿转载，原文地址：<a href=""http://mp.weixin.qq.com/s/rNGD6SotKoO8frmxIU8-xw"">http://mp.weixin.qq.com/s/rNGD6SotKoO8frmxIU8-xw</a></p>

<p>本期 T 沙龙探讨了移动端热更新相关的话题。由于沙龙时间的限制，本期我们选取了美团的 Hybrid 化建设、去哪儿的跨平台 ListView 性能优化、微博 Android 端热更新踩过的坑话题。还期待热更新、热修复哪些话题？欢迎留言给我们。也欢迎报名参加 T 沙龙分享自己开发中的心得。</p>

<p>Hybrid 是移动端热更新最常用的手段，限于 App Store 上架审核时间较长，美团大众点评也采取了该方案，欢迎来自美团大众点旅游业务 iOS 负责人<strong>吴卓</strong>分享<strong>《美团大众点评 酒旅方面 Hybrid 化建设》</strong>。</p>

<hr>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/0.png"" alt="""" title=""""></p>

<p>大家好！我是吴卓，很高兴能来到 T 沙龙做这个分享，今天我将从 iOS 的角度跟大家一起探讨一下美团点评整体在 Hybrid 建设中做一些事情。</p>

<p><strong>首先自我介绍一下：</strong></p>

<p>我进入比较早，在 2011 年的 7 月份最早在美团实习。后来又继续出国读研，同时做一名兼职的开发者，在 2013 年的时候，做过 iOS 的独立开发，有很多人把它作为自己的一项事业去做。</p>

<p>后来在 2014 年 12 月份重新加入美团，现在是旅游 iOS 的负责人。</p>

<p>我负责的主要是住宿，度假，大交通，整个业务部门成立时间是相对比较晚，像住宿只做了三年，度假做了两年，大交通是去年才开始做的。快速迭代的能够给业务一个非常好的支持。</p>

<p>今天的内容主要分成四个部分：</p>

<ul>
<li>第一简单介绍一下为什么我们要做一个 Hybrid 化这样一个东西。</li>
<li>第二部分是今天的重点部分，会讲一下我们在 Hybrid 化上做的一些事情。</li>
<li>第三部分会简单回顾一下，我们做的一些内容和对现有的一些方案做一些对比。</li>
<li>最后，如果大家有问题，可以做一些交流。</li>
</ul>



<h2 id=""一为什么做-hybrid-化"">一、为什么做 Hybrid 化？</h2>

<p>第一个问题，我们为什么要做 Hybrid 这个东西，其实刚刚提到整个业务发展非常迅速。在迅速发展中，我们直接面临了以下两个非常棘手的问题：</p>



<h4 id=""1-客户端发版周期长"">1. 客户端发版周期长</h4>

<p>第一个问题客户端发版周期比较长，相信大家应该有类似的感受，特别是在一个大公司里面，迭代是相对固定的周期。另外在 iOS 里面如果需要发版还需要 App Store 的审核。</p>



<h4 id=""2-前端资源严重不足"">2. 前端资源严重不足</h4>

<p>第二个问题是我们公司一个现状，前端资源严重不足。</p>



<h4 id=""解决方案"">解决方案</h4>

<p>首先，针对第一个问题，客户端发版周期长，我们希望通过一些手段脱离客户端发版限制。</p>

<p>至于第二个问题，我们希望把现有的前端和客户端的同学完全结合起来，共同开发我们主要的一个 APP 。</p>



<h2 id=""二hybrid-化设计"">二、Hybrid 化设计</h2>

<p>接下来讲一下我们 Hybrid 化整体的设计，总体上我们是用一种 <strong>Native 和 H5 页面强混合的模式</strong>。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/1.png"" alt="""" title=""""></p>

<p>如果在美团上买一个火车票，我不知道有没有同学买过。其实在美团上买一张火车票，有一部分是 Native 页面，有一些是 H5 页面，有一部分组件是 Native 做的，有一部分组件是 H5 做的。</p>

<p><strong>如果使用这种方式做的话，我们会遇到以下三个问题：</strong></p>

<ol>
<li>H5 和 Native 上线时间不一致，如何衔接？</li>
<li>H5 和 Native 之间如何进行通信？</li>
<li>H5 页面如何接近 Native 的体验？</li>
</ol>



<h4 id=""1-h5-和-native-上线时间不一致如何衔接"">1. H5 和 Native 上线时间不一致，如何衔接？</h4>

<p>第一个问题是说现在的页面里面既有 H5 页面，也有 Native 页面，Native 页面在 App Store 上面的， H5 相对比较灵活的。</p>

<p>所以有个问题，当H5上线之后，客户端需要给H5提供一些跳转的入口，这个跳转的入口提供的应该是在不发版的情况下去给出的，能够通过这种灵活的配置去实现 H5 到 Native 的一个过渡。 </p>



<h5 id=""美团-app-现状"">美团 APP 现状</h5>

<p>我们来讲一下美团 APP 的现状，早在 2014 年美团 APP 其实大部分页面是由 Native 编写的，只有一些活动的展示页面，是用 H5 形式的页面展示的。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/2.png"" alt="""" title=""""></p>

<p>为了实现页面之间的解耦合，每个页面其实会有一个 URL 进行标识，根据每次跳转到一个 Native 页面，现在很多公司都采用类似的方式去做。现在是这样的模式，那怎样让 Native 页面过渡到 H5 呢？</p>



<h5 id=""动态路由切换"">动态路由切换</h5>

<p>我们的方案是对这个跳转去做一些扩展。本质上来说，客户端这边是从 URL 到 Native 页面的路由表，我们想办法对跳转的参数做的一些扩展，让他能够支持跳转到 H5 里面，甚至跳转到 URL 的页面。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/3.png"" alt="""" title=""""></p>

<p>上图的这个配置能够通过后台进行下发，进行同时的更新，同时为了做这个更新，我们也为这个路由配置做了一个前端的展示页面。整体来说通过我们在原有的这种跳转模式下做了一些动态化的扩展，实现后续客户端发版之后能够从后台下发一些配置。</p>

<p><strong>举一个简单的例子：</strong></p>

<blockquote>
  <p>在美团 APP 买一个团购的订单，用户需要访问列表页，商家的详情页，创建订单，最后购买成功。</p>
  
  <p>如果我们有一些新版本的上线没办法支持展示这些新的产品，对一个新的产品做一个 H5 的产品详情和创立订单页面，把这个产品切换到走 H5 的流程最终的客户端发版走这种 H5 的流程。 <br>
  <img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/4.png"" alt="""" title=""""></p>
  
  <p><strong>这样无论是新的用户还有没有升级的老的用户，都及时的访问到我们最新的产品。</strong></p>
</blockquote>



<h5 id=""小结"">小结</h5>

<p>在这儿简单回顾一下，我们做这个事情的一些设计思路。</p>

<p>刚才说的配置下发只是在特殊情况下做的，因为这种情况是少数，不会每天所有的页面都做这种事情，所以我们并不会下发整个客户端里面的所有的配置，我们只是把一些需要更新的内容做一些回应，从后台下发下去。</p>

<p>另外一点是说上层的使用方，我们内部会帮上层调用方，做好所有的相关的工作。</p>



<h4 id=""2-h5-和-native-之间如何进行通信"">2. H5 和 Native 之间如何进行通信？</h4>



<h5 id=""桥协议通信"">桥协议通信</h5>

<p>第二个问题，前端的 H5 页面和 Native 页面怎么更新，因为他两个是完全不同语言开发的，其实这个方案的话我们一般来说，<strong>把 Native 和 H5 的通信机制约定为，称之为桥协议</strong>。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/5.png"" alt="""" title=""""></p>

<p>这个桥协议，它是一个双向的通信方式。绿色部分是讲 NativeJS ，这个是比较直观的，在 WEB 应用里面直接可以调用这个方法。</p>



<h5 id=""js-调用-native"">JS 调用 Native</h5>

<p>但是 JS 调用 Native 的方法其实系统没有提供一个很直接的方法，这个地方其实是我们需要解决的一个问题。</p>

<p>基本上， JS 调用 Native 本质上就是，给客户端去传递一些消息，传递的消息格式其实是比较随意的，而且时间只要约定好就可以了。</p>

<p><strong>现在问题就是怎么去传？</strong></p>

<p>这个问题，我们当时在做的时候，其实调研了一下常规的方案来分析。有三个方案，我具体说一下：</p>

<ul>
<li><p><strong>第一个方案是通过 URL 拦截的方法</strong> <br>
这个什么意思呢？就是说，对于前端来说如果 JS 需要给应用传消息，一般会开一个 Server ，会访问一个地址，这个地址他的 Scheme 是一个特殊的 Scheme 。客户端这边会拦截到这种指令格式的 URL 需求，实现一个 JS 到 Native 传递消息的一个过程。</p></li>
<li><p><strong>第二个方案叫主动轮询</strong> <br>
对于 JS 他需要把给 Native 传递的消息，转化成一个 JSON ，客户端这边一般会开一个线程，每隔一段时间会调 JS 的方法，从这个方法里面把 JS 需要给 Native 传递的消息全部取出来，取出来之后再去做相应的操作。</p></li>
<li><p><strong>第三个就是 JSContext</strong>  <br>
前端可以直接调用客户端本地的方法。</p></li>
</ul>



<h5 id=""方案对比"">方案对比</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/6.png"" alt="""" title=""""></p>

<p>我们简单对比一下这三种方案，第一个方案是 URL 拦截，他的优点无论是哪种 WebView 都是支持这种方式的，但是它的 URL 拦截延时高一点。第二个方案，主动轮询，可以并发处理多条消息，但是如果在客户端性能开销大，第三个方案是我们现在正在用的，直接调用，但是他只支持 iOS 7 以上的系统。</p>



<h5 id=""模块化拆解"">模块化拆解</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/7.png"" alt="""" title=""""></p>

<p>接下来讲一个非常重要的一个点，叫<strong>模块化拆解</strong>，其实像我们业务，每个业务，都需要在上面定制自己的桥协议，实际上这个也方便管理。 我们除了底下红色，刚才讲的消息通讯层以外，上面有模块化的管理方式，像客户端这边，右侧是客户端这边有模块的管理模范，各个业务可以自己把自己的模块注册在这个里面，对应的JS层也有底层的封装，左边每一个JS对应右边每一个模块，会做一些模块化拆解的工作。</p>



<h5 id=""开发调试"">开发调试</h5>

<p>再说说我们怎么前端和客户端怎么去开发，调试方式，其实现在方式是说，如果我们需要新增一个桥协议的话，前端会先准备一个 Demo 页面，把这次需要新加的桥里面放在这个 Demo 页面里面，客户端基于这个 Demo 开发，会给前端打一个模拟器，前端会用这个模拟器安装包，自己完成剩余的链条开发工作，这样的好处是前端和客户端可以同时开发。</p>



<h5 id=""小结-1"">小结</h5>

<p>简单回顾一下桥协议，桥协议通信用最简单最直接的方式进行调用，桥协议的实现，最关键一点支持可扩展的能力，开发调试我们希望前端和客户段可独立并行开发。</p>



<h4 id=""3-h5-页面如何接近-native-的体验"">3. H5 页面如何接近 Native 的体验？</h4>

<p>第三个问题是指我们的 H5 页面怎么去接近 Native 的体验，在体验差距上主要两个方面。</p>



<h5 id=""页面渲染瓶颈"">页面渲染瓶颈</h5>

<p>第一个是前端的页面代码渲染，受限于 JS 的解析效率，以及手机硬件设备的一些性能。其实这个问题从应用开发的角度来说，是难以解决的。</p>



<h5 id=""资源加载缓慢"">资源加载缓慢</h5>

<p>第二个方面是 H5 页面是从服务器上下发的，客户端的页面在内存里面，页面加载时间上面， H5 页面和 Native 相比是有些差距的，但是这个差距我们可以通过一些方式弥补的，比如说我们做了一些<strong>资源预加载</strong>的方案。</p>

<p>在<strong>资源预加载</strong>方面，其实也很多方式，我主要列举了一些，基本上每种方式我们都尝试的做了。</p>

<p><strong>第一种方式是说使用 WebView 自身的缓存机制。</strong></p>

<p>如果我们在 APP 里面访问一个页面，短时间内再次访问这个页面的时候，会感觉到第二次打开的时候流畅很多，加载速度比第一次的时间要短。</p>

<p>这个就是因为，苹果自己内部 Web 自身会做一些缓存，只要打开过的资源，他都会试着缓存在本地，第二次需要访问的时候他直接从本地读取，但是这个读取其实是不太稳定的东西，关掉之后，或者说这种缓存之后，系统会自动把它清掉，我们没法进行控制。</p>

<p>基于这个 WebView 自身的缓存，有一种资源预加载方案，我们在应用启动的时候可以开一个像素的 WebView ，事先去访问一下我们常用的资源，后续打开页面的时候如果再用到这些资源他就可以从本地获取到，页面加载的时间会短一些。</p>

<p><strong>第二种方案是说，我们自己去构建，自己管理缓存。</strong></p>

<p>把这些需要预加载的资源放在 APP 里面，他可能是预制放进去的，也可能是后续下载的。</p>

<p>问题在于前端这些页面怎么去缓存？</p>

<p>两个方案，一个是，前端可以在 H5 打包的时候把里面的资源 URL 进行替换，这样可以直接访问本地的地址。客户端可以拦截到这些网页发出的所有请求做替换。</p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/8.png"" alt="""" title=""""></p>

<p>这个是我们做的资源预加载的方案，采用的刚才说的第二种方案，每当这个 WebView 发起资源请求的时候，我们会拦截到这些资源的请求，去本地检查一下我们的这些静态资源本地离线包有没有。针对本地的缓存文件我们有些策略能够及时的去更新它。为了安全考虑的话我们也做了一些预下载和安全包的一些加密的工作。</p>



<h5 id=""预加载方案的优势"">预加载方案的优势？</h5>

<ul>
<li><p>第一，我们拦截了 WebView 里面发出的所有的请求，但是并没有替换里面的前端应用的任何代码，前端这套页面代码可以在 APP 内，或者其他的 APP 里面都可以直接访问，他不需要为我们 APP 做定制化的东西。</p></li>
<li><p>第二，这些 URL 请求，他会直接带上先前用户操作所留下的 cookie 而都能够留下来，因为我们没有更改资源的 URL 地址。</p></li>
<li><p>第三，整个前端在用离线包的时候，缓存文件的时候是完全无感知的，前端只用管写一个自己的页面，客户端会帮他处理好这样一些静态资源预加载的问题，有这个离线包的话，他加载速度会变快很多，没有这些离线包加载速度会慢一些。如果版本不能跟他匹配的话，他的页面也不会发生什么问题。</p></li>
</ul>



<h5 id=""实践效果"">实践效果</h5>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/week23_hybrid/9.png"" alt="""" title=""""></p>

<p>这个是我们当时做完之后，做完资源预加载之后的一些效果。比如说，这个图里面可以看三个部分，一个是前端部分是没有用资源预加载的下面，深色的部分是有资源预加载的效果，可以看到，如果把有些资源打成离线包放在本地的话，其实他的加载时间是可以缩短很多的。</p>

<p>另外一点可以横向的看，其实像一二三，或者是这边的一二三，三个页面，其实本质上这三个页面是一个购买流程人员，需要访问到的路径。</p>

<p>举个例子，要进入第三个页面，他一定会先打开第二个页面，如果他打开第二个页面，他一定会先打开第一个页面。</p>

<pre><code>前置筛选页-&gt;车次列表页-&gt;车次详情页
</code></pre>

<p>所以可以看到，整体的加载时间是不断的缩短的。这个也就符合我们现在说的 Webview 自身是有一套缓存的。因为访问后面页面的时候有些资源其实在前面的页面已经访问过了，所以整个加载时间是不断递减的。</p>

<p>总结一下今天 Hybrid 化讲的一些东西，包括我们做的动态路由切换，包括我们做的自定义桥协议，还有资源预加载的一些方案。</p>



<h5 id=""hybrid-vs-native"">Hybrid vs Native</h5>

<p>我们其实现在整个页面里面既有 Hybrid 页面也有 Native 页面，那么我们是怎么做区分的？</p>

<p>一般来说Hybrid的项目一般是用在一些快速迭代试错的地方。另外包括有一些非主流产品的页面，我们倾向于用 Hybrid 的形式做.</p>

<p>但是像前端购买一些交易环节，特别核心的流程的话，我们一般情况下会用 Native 的形式去写这些页面，去提升，达到一个极致的用户体验。</p>



<h2 id=""三其他方案对比"">三、其他方案对比</h2>

<p>最后想对比一下，简单聊一下我们现有的一些其他方案，当然这些方案，各个其他公司也正在去做。</p>



<h4 id=""1-react"">1. React</h4>

<p>第一个是 React 这边，现在做了一些尝试，因为 React 和安卓的平台差异性是比较小，如果安卓端写好代码的话，成本很低，在项目发展初期的话，很好的去应用了这样一种方式，减少成本。但是我们后面发现，当中也遇到了一些问题，如果其他同学有解决方案的话也欢迎分享一下。</p>

<p>第一稳定性没有达到一个很好的标准，当然也有可能是我们在使用上还存在一些没有掌握的地方。</p>

<p>第二个问题是人力的问题，我觉得可能比技术问题更复杂一点，就是说，其实现有市面上，我们很难在很短的时间内招到 10 个 iOS 的同学去做我们相应的开发。另外我们即使招到一些人，但是现有的公司里面培养体系，不太适合培养他们往更高层面发展。这个例子在后台比较常见，像我们现在美团点评是后台绝大部分都是用 Java 去写的，说白一点，就是说 Java 这个东西，还是比较好招人，好大规模的去扩展去做事的。</p>



<h4 id=""2-weex"">2. Weex</h4>

<p>Weex 方面，我们内部有一些调研和学习，但是人力的问题还是很凸显。</p>



<h4 id=""3-动态模板化"">3. 动态模板化</h4>

<p>我们从业务发展的角度来说，也想获得一些动态性的一些东西。希望考虑说把有一些局部的模块能够通过后台下发的方式去做。我们的名字叫动态模板化，但是目前还是在做的阶段，如果其他同学有相同的想法的话可以共同做一些分享。</p>

<p>今天的分享先到这儿，谢谢大家！</p>



<h2 id=""四互动问答"">四、互动问答</h2>

<p><strong>Q1：我有一个问题，刚才你说， JS 调用 Native 里面，有一个类似轮询。</strong></p>

<blockquote>
  <p>吴卓：我那句话意思是说，一次只能拦截到一条消息，如果用轮询的方式的话，可以多条。因为最近应该很少有，最近几期很少有美团的同学来这儿讲课，如果大家对美团的其他的技术也兴趣的话也可以提出来，我如果知道的话尽量也跟大家解释一下。</p>
</blockquote>

<p><strong>Q2：这里哪一个页面是 Hybrid 的？</strong></p>

<blockquote>
  <p>吴卓：您下的是最近的版本吗？举个例子机票里面选一个国际的城市，你能看到的就是， Hybrid 的页面。国际城市里面切换选择日期的时候，看到的就是 Hybrid 的页面。国际机票的列表也是用 Hybrid 走的。火车票里面以前是用 Hybrid 做的，现在的话，主流改成 Native 做的，当然如果出现一些紧急的情况，我们通过刚才的切换系统切换到原来的 Hybrid 上。</p>
  
  <p>另外如果您打开交通里面的船票也是 Hybrid 的形式。因为我是做大交通业务的，所以说可能比较熟悉一点，向您推荐的也是我们的产品。从您点击船票开始后面都是 Hybrid 的页面，当然这个页面里面有一些弹窗，有一些部分是Native做的。</p>
</blockquote>

<p><strong>Q3：你觉得 Hybrid 的模式和 Native 的模式，您觉得哪种可能是未来的发展趋势，技术上。</strong></p>

<blockquote>
  <p>吴卓：这是一个好问题。我只说一下我个人的观点，不代表公司的观点。首先我觉得从一个用户体验的角度来说，我更希望把所有页面做成 Native 的，但是如果怎么说呢，我觉得比如像 WebView，我刚才说两个问题，一个是说稳定性的问题，还有一个人力资源的问题，如果这两个问题能解决的话，现在属于观望状态，我们其实可以朝着这方面去做。因为我个人的观点还是说，所有页面都能尽可能的做成 Native 。在做 Hybrid 上，我们想尽方式让它接近 Native 。</p>
</blockquote>

<p><strong>Q4：你们是如何管理 Hybrid 代码更新的呢？</strong></p>

<blockquote>
  <p>吴卓：离线包的形式肯定会增加内存的大小。我们的团队做增量的更新，以减少这种资源包下载的流量，这是战略空间的问题。  <br>
  第二个是离线包里面有什么，最主要是一些静态资源文件，包括JS，CSS。基本上H5页面访问，就是在访问一个页面的时候需要加载这些资源我们都可以从本地给他获取。当然现在不是100%资源的离线化，一是考虑安全的因素，第二战略方面的原因有些技术没法做离线化。</p>
</blockquote>

<hr>

<p>更多精彩内容欢迎关注<a href=""https://bugly.qq.com/"">bugly</a>的微信公众账号： </p>

<p><img src=""http://oa5504rxk.bkt.clouddn.com/Bugly%E5%A4%96%E5%8F%91%E6%96%87%E7%AB%A0%E4%BA%8C%E7%BB%B4%E7%A0%81.png"" alt="""" title=""""></p>

<p><a href=""https://bugly.qq.com/"">腾讯 Bugly</a>是一款专为移动开发者打造的质量监控工具，帮助开发者快速，便捷的定位线上应用崩溃的情况以及解决方案。智能合并功能帮助开发同学把每天上报的数千条 <a href=""https://bugly.qq.com/"">Crash</a> 根据根因合并分类，每日日报会列出影响用户数最多的崩溃，精准定位功能帮助开发同学定位到出问题的代码行，实时上报可以在发布后快速的了解应用的质量情况，适配最新的 iOS, Android 官方操作系统，鹅厂的工程师都在使用，快来加入我们吧！</p></div>",移动开发,2016-12-06 13:02
6139,在2006年12月召开的 IEEE 数据挖掘国际会议上，与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），在本系列已经发布的文章中我们已经讨...,baimafujinji,http://blog.csdn.net/baimafujinji/article/details/53456931,数据挖掘十大算法之Apriori详解,"<div class=""markdown_views""><p>在2006年12月召开的 IEEE 数据挖掘国际会议上（ICDM， International Conference on Data Mining），与会的各位专家选出了当时的十大数据挖掘算法（ top 10 data mining algorithms ），可以参见文献【1】。本博客已经介绍过的位列十大算法之中的算法包括：</p>

<ul>
<li>[1] <em>k</em>-means算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50570824"">http://blog.csdn.net/baimafujinji/article/details/50570824</a>）</li>
<li>[2] 支持向量机SVM（<a href=""http://blog.csdn.net/baimafujinji/article/details/49885481"">http://blog.csdn.net/baimafujinji/article/details/49885481</a>）</li>
<li>[3] EM算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50626088"">http://blog.csdn.net/baimafujinji/article/details/50626088</a>）</li>
<li>[4] 朴素贝叶斯算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/50441927"">http://blog.csdn.net/baimafujinji/article/details/50441927</a>）</li>
<li>[5] <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-60-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-442"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-443""><span class=""mi"" id=""MathJax-Span-444"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-60"">k</script>NN算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/6496222"">http://blog.csdn.net/baimafujinji/article/details/6496222</a>）</li>
<li>[6] C4.5决策树算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/53239581"">http://blog.csdn.net/baimafujinji/article/details/53239581</a>）</li>
<li>[7]  CART算法（<a href=""http://blog.csdn.net/baimafujinji/article/details/53269040"">http://blog.csdn.net/baimafujinji/article/details/53269040</a>）</li>
</ul>

<p>Apriori算法是一种用于关联规则挖掘（Association rule mining）的代表性算法，它同样位居十大数据挖掘算法之列。关联规则挖掘是数据挖掘中的一个非常重要的研究方向，也是一个由来已久的话题，它的主要任务就是设法发现事物之间的内在联系。</p>

<p>欢迎关注白马负金羁的博客 <a href=""http://blog.csdn.net/baimafujinji"">http://blog.csdn.net/baimafujinji</a>，为保证公式、图表得以正确显示，强烈建议你从该地址上查看原版博文。本博客主要关注方向包括：数字图像处理、算法设计与分析、数据结构、机器学习、数据挖掘、统计分析方法、自然语言处理。</p>

<hr>

<h2 id=""引言数据挖掘与机器学习"">引言：数据挖掘与机器学习</h2>

<p>有时候，人们会对机器学习与数据挖掘这两个名词感到困惑。如果你翻开一本冠以机器学习之名的教科书，再同时翻开一本名叫数据挖掘的教材，你会发现二者之间有相当多重合的内容。比如机器学习中也会讲到决策树和支持向量机，而数据挖掘的书里也必然要在决策树和支持向量机上花费相当的篇幅。可见二者确有相当大的重合面，但如果细研究起来，二者也的确是各自不同的领域。</p>

<p>大体上看，数据挖掘可以视为数据库、机器学习和统计学三者的交叉。简单来说，对数据挖掘而言，数据库提供了数据管理技术，而机器学习和统计学则提供了数据分析技术。所以你可以认为数据挖掘包含了机器学习，或者说机器学习是数据挖掘的弹药库中一类相当庞大的弹药集。既然是一类弹药，其实也就是在说数据挖掘中肯定还有其他非机器学习范畴的技术存在。Apriori算法就属于一种非机器学习的数据挖掘技术。</p>

<p>我们都知道数据挖掘是从大量的、不完全的、有噪声的、模糊的、随机的数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程。 而机器学习是以数据为基础，设法构建或训练出一个模型，进而利用这个模型来实现数据分析的一类技术。这个被训练出来的机器学习模型当然也可以认为是我们从数据中挖掘出来的那些潜在的、有意义的信息和知识。在非机器学习的数据挖掘技术中，我们并不会去建立这样一个模型，而是直接从原数据集入手，设法分析出隐匿在数据背后的某些信息或知识。在后续介绍Apriori算法时，你会相当明显地感受到这一特点。</p>

<hr>



<h2 id=""基本概念"">基本概念</h2>

<p>许多商业企业在日复一日的运营中积聚了大量的交易数据。例如，超市的收银台每天都收集大量的顾客购物数据。例如，下表给出了一个这种数据集的例子，我们通常称其为购物篮交易（market basket transaction)。表中每一行对应一个交易，包含一个唯一标识TID和特定顾客购买的商品集合。零售商对分析这些数据很感兴趣，以便了解其顾客的购买行为。可以使用这种有价值的信息来支持各种商业中的实际应用，如市场促销，库存管理和顾客关系管理等等。 </p>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161204222245953"" width=""230""> <br>
</center><p></p>

<p>令<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-4-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-24"" style=""width: 7.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 7.165em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.688em, 1000em, 2.922em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-25""><span class=""mi"" id=""MathJax-Span-26"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span><span class=""mo"" id=""MathJax-Span-27"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-28"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""msubsup"" id=""MathJax-Span-29""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-30"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mn"" id=""MathJax-Span-31"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-32"" style=""font-family: STIXGeneral;"">,</span><span class=""msubsup"" id=""MathJax-Span-33"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-34"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mn"" id=""MathJax-Span-35"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-36"" style=""font-family: STIXGeneral;"">,</span><span class=""mo"" id=""MathJax-Span-37"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">⋯</span><span class=""mo"" id=""MathJax-Span-38"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">,</span><span class=""msubsup"" id=""MathJax-Span-39"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.698em; height: 0px;""><span style=""position: absolute; clip: rect(1.714em, 1000em, 2.752em, -0.512em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-40"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.249em;""><span class=""mi"" id=""MathJax-Span-41"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.019em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-42"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.055em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-4"">I=\{i_1, i_2, \cdots, i_d\}</script>是购物篮数据中所有项的集合，而<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-5-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-43"" style=""width: 8.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 7.664em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.688em, 1000em, 2.922em, -0.502em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-44""><span class=""mi"" id=""MathJax-Span-45"" style=""font-family: STIXGeneral; font-style: italic;"">T<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-46"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-47"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""msubsup"" id=""MathJax-Span-48""><span style=""display: inline-block; position: relative; width: 0.742em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-49"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mn"" id=""MathJax-Span-50"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-51"" style=""font-family: STIXGeneral;"">,</span><span class=""msubsup"" id=""MathJax-Span-52"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.742em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-53"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mn"" id=""MathJax-Span-54"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-55"" style=""font-family: STIXGeneral;"">,</span><span class=""mo"" id=""MathJax-Span-56"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">⋯</span><span class=""mo"" id=""MathJax-Span-57"" style=""font-family: STIXGeneral; padding-left: 0.188em;"">,</span><span class=""msubsup"" id=""MathJax-Span-58"" style=""padding-left: 0.188em;""><span style=""display: inline-block; position: relative; width: 0.867em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-59"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mi"" id=""MathJax-Span-60"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.042em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-61"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.055em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-5"">T=\{t_1, t_2, \cdots, t_N\}</script>是所有交易的集合。包含0个或多个项的集合被称为项集（itemset）。如果一个项集包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-6-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-62"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-63""><span class=""mi"" id=""MathJax-Span-64"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-6"">k</script>个项，则称它为 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-7-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-65"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-66""><span class=""mi"" id=""MathJax-Span-67"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-7"">k</script>-项集。显然，每个交易<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-8-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-68"" style=""width: 0.617em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.561em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.323em, 1000em, 2.401em, -0.523em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-69""><span class=""msubsup"" id=""MathJax-Span-70""><span style=""display: inline-block; position: relative; width: 0.555em; height: 0px;""><span style=""position: absolute; clip: rect(1.822em, 1000em, 2.752em, -0.523em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-71"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.294em;""><span class=""mi"" id=""MathJax-Span-72"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">i</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.886em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-8"">t_i</script>包含的项集都是<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-9-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-73"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-74""><span class=""mi"" id=""MathJax-Span-75"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-9"">I</script>的子集。</p>

<p><strong>关联规则</strong>是形如 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-10-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-76"" style=""width: 3.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.866em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-77""><span class=""mi"" id=""MathJax-Span-78"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-79"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-80"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-10"">X\to Y</script> 的蕴涵表达式，其中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-11-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-81"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-82""><span class=""mi"" id=""MathJax-Span-83"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-11"">X</script>和<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-12-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-84"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-85""><span class=""mi"" id=""MathJax-Span-86"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-12"">Y</script>是不相交的项集，即 <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-13-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-87"" style=""width: 4.55em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 4.237em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.639em, 1000em, 2.815em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-88""><span class=""mi"" id=""MathJax-Span-89"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-90"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∩</span><span class=""mi"" id=""MathJax-Span-91"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-92"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-93"" style=""font-family: STIXVariants; padding-left: 0.313em;"">∅</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.146em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-13"">X\cap Y=\emptyset</script>。关联规则的强度可以用它的支持度（support）和置信度（confidence）来度量。支持度确定规则可以用于给定数据集的频繁程度，而置信度确定<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-14-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-94"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-95""><span class=""mi"" id=""MathJax-Span-96"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-14"">Y</script>在包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-15-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-97"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-98""><span class=""mi"" id=""MathJax-Span-99"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-15"">X</script>的交易中出现的频繁程度。支持度（<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-16-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-100"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-101""><span class=""mi"" id=""MathJax-Span-102"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-16"">s</script>：Fraction of transactions that contain both <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-17-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-103"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-104""><span class=""mi"" id=""MathJax-Span-105"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-17"">X</script> and <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-18-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-106"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-107""><span class=""mi"" id=""MathJax-Span-108"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-18"">Y</script>）和置信度（<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-19-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-109"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-110""><span class=""mi"" id=""MathJax-Span-111"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-19"">c</script>：How often items in <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-20-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-112"" style=""width: 0.683em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.623em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.483em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-113""><span class=""mi"" id=""MathJax-Span-114"" style=""font-family: STIXGeneral; font-style: italic;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-20"">Y</script> appear in transactions that contain <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-21-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-115"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.59em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-116""><span class=""mi"" id=""MathJax-Span-117"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.832em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-21"">X</script>）这两种度量的形式定义如下： <br>
<span class=""MathJax_Preview""></span></p><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true""><span class=""MathJax"" id=""MathJax-Element-22-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-118"" style=""width: 100%; display: inline-block; min-width: 9.883em;""><span style=""display: inline-block; position: relative; width: 100%; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(4.193em, 1000em, 9.32em, -0.561em); top: -5.732em; left: 0em; width: 100%;""><span class=""mrow"" id=""MathJax-Span-119""><span style=""display: inline-block; position: relative; width: 100%; height: 0px;""><span style=""position: absolute; clip: rect(2.448em, 1000em, 4.875em, -0.545em); top: -3.988em; left: 50%; margin-left: -4.59em;""><span class=""mi"" id=""MathJax-Span-120"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-121"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-122"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-123"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-124"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-125"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-126"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-127"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 3.734em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -3.231em; left: 50%; margin-left: -1.807em;""><span class=""mrow"" id=""MathJax-Span-128""><span class=""mi"" id=""MathJax-Span-129"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-130"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-131"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-132"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∪</span><span class=""mi"" id=""MathJax-Span-133"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-134"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.756em, -0.581em); top: -1.869em; left: 50%; margin-left: -0.374em;""><span class=""mi"" id=""MathJax-Span-135"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 3.734em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span><span style=""position: absolute; clip: rect(2.448em, 1000em, 5.037em, -0.561em); top: -1.45em; left: 50%; margin-left: -4.617em;""><span class=""mspace"" id=""MathJax-Span-136"" style=""height: 0em; vertical-align: 0em; width: 0em; display: inline-block; overflow: hidden;""></span><span class=""mi"" id=""MathJax-Span-137"" style=""font-family: STIXGeneral; font-style: italic;"">c</span><span class=""mo"" id=""MathJax-Span-138"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-139"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-140"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">→</span><span class=""mi"" id=""MathJax-Span-141"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-142"" style=""font-family: STIXGeneral;"">)</span><span class=""mo"" id=""MathJax-Span-143"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-144"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 3.734em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -3.231em; left: 50%; margin-left: -1.807em;""><span class=""mrow"" id=""MathJax-Span-145""><span class=""mi"" id=""MathJax-Span-146"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-147"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-148"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-149"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">∪</span><span class=""mi"" id=""MathJax-Span-150"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.25em;"">Y<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""mo"" id=""MathJax-Span-151"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.534em); top: -1.869em; left: 50%; margin-left: -0.935em;""><span class=""mrow"" id=""MathJax-Span-152""><span class=""mi"" id=""MathJax-Span-153"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-154"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-155"" style=""font-family: STIXGeneral; font-style: italic;"">X<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.044em;""></span></span><span class=""mo"" id=""MathJax-Span-156"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 3.734em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 5.732em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 5.219em; vertical-align: -3.706em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-22"">s(X\to Y)=\frac{\sigma(X\cup Y)}{N}\\
c(X\to Y)=\frac{\sigma(X\cup Y)}{\sigma(X)}</script> <br>
例如考虑规则{Milk, Diaper}<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-23-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-157"" style=""width: 1.017em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.935em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.92em, 1000em, 2.684em, -0.491em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-158""><span class=""mo"" id=""MathJax-Span-159"" style=""font-family: STIXGeneral;"">→</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.552em; vertical-align: -0.006em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-23"">\to</script>{Beer}，则易得： <br>
<span class=""MathJax_Preview""></span><div class=""MathJax_Display"" role=""textbox"" aria-readonly=""true""><span class=""MathJax"" id=""MathJax-Element-24-Frame"" style=""""><nobr><span class=""math"" id=""MathJax-Span-160"" style=""width: 100%; display: inline-block; min-width: 17.217em;""><span style=""display: inline-block; position: relative; width: 100%; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(4.286em, 1000em, 9.503em, -0.561em); top: -5.857em; left: 0em; width: 100%;""><span class=""mrow"" id=""MathJax-Span-161""><span style=""display: inline-block; position: relative; width: 100%; height: 0px;""><span style=""position: absolute; clip: rect(2.417em, 1000em, 4.874em, -0.545em); top: -3.988em; left: 50%; margin-left: -7.757em;""><span class=""mi"" id=""MathJax-Span-162"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-163"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-164"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 8.843em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -3.255em; left: 50%; margin-left: -4.361em;""><span class=""mrow"" id=""MathJax-Span-165""><span class=""mi"" id=""MathJax-Span-166"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-167"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-168"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-169"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-170"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-171"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-172"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-173"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-174"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-175"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-176"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-177"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-178"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-179"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-180"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">B</span><span class=""mi"" id=""MathJax-Span-181"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-182"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-183"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-184"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.494em); top: -1.869em; left: 50%; margin-left: -0.53em;""><span class=""mrow"" id=""MathJax-Span-185""><span class=""texatom"" id=""MathJax-Span-186""><span class=""mrow"" id=""MathJax-Span-187""><span class=""mo"" id=""MathJax-Span-188"" style=""font-family: STIXGeneral;"">|</span></span></span><span class=""mi"" id=""MathJax-Span-189"" style=""font-family: STIXGeneral; font-style: italic;"">T<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.077em;""></span></span><span class=""texatom"" id=""MathJax-Span-190""><span class=""mrow"" id=""MathJax-Span-191""><span class=""mo"" id=""MathJax-Span-192"" style=""font-family: STIXGeneral;"">|</span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 8.843em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-193"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-194"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-195"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.68em, 1000em, 2.755em, -0.53em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-196"" style=""font-family: STIXGeneral;"">5</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-197"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-198"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.4</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span><span style=""position: absolute; clip: rect(2.417em, 1000em, 5.065em, -0.561em); top: -1.419em; left: 50%; margin-left: -8.034em;""><span class=""mspace"" id=""MathJax-Span-199"" style=""height: 0em; vertical-align: 0em; width: 0em; display: inline-block; overflow: hidden;""></span><span class=""mi"" id=""MathJax-Span-200"" style=""font-family: STIXGeneral; font-style: italic;"">c</span><span class=""mo"" id=""MathJax-Span-201"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-202"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 8.843em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -3.255em; left: 50%; margin-left: -4.361em;""><span class=""mrow"" id=""MathJax-Span-203""><span class=""mi"" id=""MathJax-Span-204"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-205"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-206"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-207"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-208"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-209"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-210"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-211"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-212"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-213"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-214"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-215"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-216"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-217"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-218"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">B</span><span class=""mi"" id=""MathJax-Span-219"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-220"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-221"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-222"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.946em, -0.534em); top: -1.869em; left: 50%; margin-left: -3.209em;""><span class=""mrow"" id=""MathJax-Span-223""><span class=""mi"" id=""MathJax-Span-224"" style=""font-family: STIXGeneral; font-style: italic;"">σ<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.033em;""></span></span><span class=""mo"" id=""MathJax-Span-225"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-226"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-227"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-228"" style=""font-family: STIXGeneral; font-style: italic;"">l<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.001em;""></span></span><span class=""mi"" id=""MathJax-Span-229"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span><span class=""mo"" id=""MathJax-Span-230"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-231"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">D</span><span class=""mi"" id=""MathJax-Span-232"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-233"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-234"" style=""font-family: STIXGeneral; font-style: italic;"">p</span><span class=""mi"" id=""MathJax-Span-235"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-236"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mo"" id=""MathJax-Span-237"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 8.843em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-238"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mfrac"" id=""MathJax-Span-239"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.618em; height: 0px; margin-right: 0.12em; margin-left: 0.12em;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -3.231em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-240"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.755em, -0.52em); top: -1.869em; left: 50%; margin-left: -0.249em;""><span class=""mn"" id=""MathJax-Span-241"" style=""font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; clip: rect(0.794em, 1000em, 1.246em, -0.561em); top: -1.279em; left: 0em;""><span style=""border-left: 0.618em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.25px; vertical-align: 0em;""></span><span style=""display: inline-block; width: 0px; height: 1.059em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-242"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mn"" id=""MathJax-Span-243"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">0.67</span><span style=""display: inline-block; width: 0px; height: 3.988em;""></span></span></span></span><span style=""display: inline-block; width: 0px; height: 5.857em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 5.315em; vertical-align: -3.768em;""></span></span></nobr></span></div><script type=""math/tex; mode=display"" id=""MathJax-Element-24"">s=\frac{\sigma(Milk, Diaper, Beer)}{|T|}=\frac{2}{5}=0.4\\
c=\frac{\sigma(Milk, Diaper, Beer)}{\sigma(Milk, Diaper)}=\frac{2}{3}=0.67</script>

<p>Association Rule Mining Task：Given a set of transactions T, the goal of association rule mining is to find all rules having </p>

<ul>
<li>support ≥ minsup threshold</li>
<li>confidence ≥ minconf threshold</li>
</ul>

<p>因此，大多数关联规则挖掘算法通常采用的一种策略是，将关联规则挖掘任务分解为如下两个主要的子任务。 </p>

<ol>
<li><strong>频繁项集产生</strong>：其目标是发现满足最小支持度阈值的所有项集，这些项集称作频繁项集（frequent itemset）。 </li>
<li><strong>规则的产生</strong>：其目标是从上一步发现的频繁项集中提取所有高置信度的规则，这些规则称作强规则（strong rule）。</li>
</ol>

<p>通常，频繁项集产生所需的计算开销远大于产生规则所需的计算开销。 </p>

<p>最容易想到、也最直接的进行关联关系挖掘的方法或许就是暴力搜索（Brute-force）的方法：</p>

<ul>
<li>List all possible association rules</li>
<li>Compute the support and confidence for each rule</li>
<li>Prune rules that fail the minsup and minconf thresholds</li>
</ul>

<p>然而，由于Brute-force的计算量过大，所以采样这种方法并不现实！格结构（Lattice structure）常被用来枚举所有可能的项集。如下图所示为<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-25-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-244"" style=""width: 7.35em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 6.854em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.922em, -0.569em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-245""><span class=""mi"" id=""MathJax-Span-246"" style=""font-family: STIXGeneral; font-style: italic;"">I<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.051em;""></span></span><span class=""mo"" id=""MathJax-Span-247"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mo"" id=""MathJax-Span-248"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">{</span><span class=""mi"" id=""MathJax-Span-249"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mo"" id=""MathJax-Span-250"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-251"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">b</span><span class=""mo"" id=""MathJax-Span-252"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-253"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">c</span><span class=""mo"" id=""MathJax-Span-254"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-255"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mo"" id=""MathJax-Span-256"" style=""font-family: STIXGeneral;"">,</span><span class=""mi"" id=""MathJax-Span-257"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.188em;"">e</span><span class=""mo"" id=""MathJax-Span-258"" style=""font-family: STIXGeneral;"">}</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.058em; vertical-align: -0.26em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-25"">I=\{a,b,c,d,e\}</script>的项集格。一般来说，排除空集后，一个包含<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-26-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-259"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-260""><span class=""mi"" id=""MathJax-Span-261"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-26"">k</script>个项的数据集可能产生<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-27-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-262"" style=""width: 2.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 2.555em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.482em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-263""><span class=""msubsup"" id=""MathJax-Span-264""><span style=""display: inline-block; position: relative; width: 0.885em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mn"" id=""MathJax-Span-265"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.521em; left: 0.498em;""><span class=""mi"" id=""MathJax-Span-266"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-267"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mn"" id=""MathJax-Span-268"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">1</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.081em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-27"">2^k-1</script>个频繁项集。由于在实际应用中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-28-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-269"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-270""><span class=""mi"" id=""MathJax-Span-271"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-28"">k</script>的值可能非常大，需要探查的项集搜索空集可能是指数规模的。 <br>
</p><center> <br>
<img src=""http://img.blog.csdn.net/20161205230205056"" width=""480""> <br>
</center> <br>
发现频繁项集的一种原始方法是确定格结构中每个候选项集（candidate itemset）的支持度计 数。为了完成这一任务，必须将每个候选项集与每个交易进行比较，如下图所示。如果候选项集包含在交易中，则候选项集的支持度计数增加。例如，由于项集{Bread, Milk}出现在事务1、4 和5中，其支持度计数将增加3次。这种方法的开销可能非常大，因为它需要进行<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-29-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-272"" style=""width: 3.95em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 3.676em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.918em, -0.501em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-273""><span class=""mi"" id=""MathJax-Span-274"" style=""font-family: STIXGeneral; font-style: italic;"">O</span><span class=""mo"" id=""MathJax-Span-275"" style=""font-family: STIXGeneral;"">(</span><span class=""mi"" id=""MathJax-Span-276"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span><span class=""mi"" id=""MathJax-Span-277"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mi"" id=""MathJax-Span-278"" style=""font-family: STIXGeneral; font-style: italic;"">w</span><span class=""mo"" id=""MathJax-Span-279"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.046em; vertical-align: -0.256em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-29"">O(NMw)</script>次比 较，其中<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-30-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-280"" style=""width: 0.817em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.748em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.756em, -0.581em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-281""><span class=""mi"" id=""MathJax-Span-282"" style=""font-family: STIXGeneral; font-style: italic;"">N<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.06em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.848em; vertical-align: -0.083em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-30"">N</script>是交易数，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-31-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-283"" style=""width: 5.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 4.735em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.482em, 1000em, 2.741em, -0.579em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-284""><span class=""mi"" id=""MathJax-Span-285"" style=""font-family: STIXGeneral; font-style: italic;"">M<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.039em;""></span></span><span class=""mo"" id=""MathJax-Span-286"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""msubsup"" id=""MathJax-Span-287"" style=""padding-left: 0.313em;""><span style=""display: inline-block; position: relative; width: 0.885em; height: 0px;""><span style=""position: absolute; clip: rect(1.692em, 1000em, 2.741em, -0.532em); top: -2.555em; left: 0em;""><span class=""mn"" id=""MathJax-Span-288"" style=""font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -2.521em; left: 0.498em;""><span class=""mi"" id=""MathJax-Span-289"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-290"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">−</span><span class=""mn"" id=""MathJax-Span-291"" style=""font-family: STIXGeneral; padding-left: 0.25em;"">1</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.081em; vertical-align: -0.067em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-31"">M=2^k-1</script>是候选项集数，而<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-32-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-292"" style=""width: 0.75em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.685em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.759em, -0.546em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-293""><span class=""mi"" id=""MathJax-Span-294"" style=""font-family: STIXGeneral; font-style: italic;"">w</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.624em; vertical-align: -0.086em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-32"">w</script>是交易的最大宽度（也就是交易中最大的项数）。 <p></p>

<p></p><center> <br>
<img src=""http://img.blog.csdn.net/20161204230707677"" width=""480""> <br>
</center><p></p>

<hr>



<h2 id=""先验原理"">先验原理</h2>

<p>在上一小节的末尾，我们已经看到Brute-force在实际中并不可取。我们必须设法降低产生频繁项集的计算复杂度。此时我们可以利用支持度对候选项集进行剪枝，这也是Apriori所利用的第一条先验原理：</p>

<p><strong>Apriori定律1</strong>：如果一个集合是频繁项集，则它的所有子集都是频繁项集。</p>

<p>例如：假设一个集合{A,B}是频繁项集，即A、B同时出现在一条记录的次数大于等于最小支持度min_support，则它的子集{A},{B}出现次数必定大于等于min_support，即它的子集都是频繁项集。</p>

<p><strong>Apriori定律2</strong>：如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。</p>

<p>举例：假设集合{A}不是频繁项集，即A出现的次数小于 min_support，则它的任何超集如{A,B}出现的次数必定小于min_support，因此其超集必定也不是频繁项集。</p>

<p>下图表示当我们发现{A,B}是非频繁集时，就代表所有包含它的超级也是非频繁的，即可以将它们都剪除。 <br>
</p><center> <br>
<img src=""http://img.blog.csdn.net/20161204231748224"" width=""600""> <br>
</center><p></p>

<hr>



<h2 id=""apriori算法与实例"">Apriori算法与实例</h2>

<p>R. Agrawal 和 R. Srikant于1994年在文献【2】中提出了Apriori算法，该算法的描述如下：</p>

<ul>
<li>Let <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-33-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-295"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-296""><span class=""mi"" id=""MathJax-Span-297"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-33"">k</script>=1</li>
<li>Generate frequent itemsets of length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-34-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-298"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-299""><span class=""mi"" id=""MathJax-Span-300"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-34"">k</script></li>
<li>Repeat until no new frequent itemsets are identified <br>
<ul><li>Generate length (<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-35-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-301"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-302""><span class=""mi"" id=""MathJax-Span-303"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-35"">k</script>+1) candidate itemsets from length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-36-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-304"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-305""><span class=""mi"" id=""MathJax-Span-306"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-36"">k</script> frequent itemsets</li>
<li>Prune candidate itemsets containing subsets of length <span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-37-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-307"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-308""><span class=""mi"" id=""MathJax-Span-309"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-37"">k</script>+1 that are infrequent </li>
<li>Count the support of each candidate by scanning the DB</li>
<li>Eliminate candidates that are infrequent, leaving only those that are frequent</li></ul></li>
</ul>

<p>或者在其他资料上更为常见的是下面这种形式化的描述（注意这跟前面的文字描述是一致的）： <br>
</p><center><img src=""http://img.blog.csdn.net/20161206105139020"" width=""480""> <br>
</center> <br>
下面是一个具体的例子，最开始数据库里有4条交易，{A、C、D}，{B、C、E}，{A、B、C、E}，{B、E}，使用min_support=2作为支持度阈值，最后我们筛选出来的频繁集为{B、C、E}。 <br>
<center> <br>
<img src=""http://img.blog.csdn.net/20161206104307033"" width=""540""> <br>
</center> <br>
上述例子中，最值得我们从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-38-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-310"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-311""><span class=""msubsup"" id=""MathJax-Span-312""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-313"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-314"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-38"">L_2</script>到<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-39-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-315"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.403em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-316""><span class=""msubsup"" id=""MathJax-Span-317""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-318"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-319"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.017em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-39"">C_3</script>的这一步。这其实就是在执行伪代码中第一个蓝色框条所标注的地方：<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-40-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-320"" style=""width: 14.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 13.271em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.92em, -0.495em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-321""><span class=""msubsup"" id=""MathJax-Span-322""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-323"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-324""><span class=""mrow"" id=""MathJax-Span-325""><span class=""mi"" id=""MathJax-Span-326"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-327"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-328"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-329"" style=""font-family: STIXGeneral; padding-left: 0.313em;"">=</span><span class=""mi"" id=""MathJax-Span-330"" style=""font-family: STIXGeneral; font-style: italic; padding-left: 0.313em;"">G</span><span class=""mi"" id=""MathJax-Span-331"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-332"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-333"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-334"" style=""font-family: STIXGeneral; font-style: italic;"">r<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.023em;""></span></span><span class=""mi"" id=""MathJax-Span-335"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-336"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span class=""mi"" id=""MathJax-Span-337"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-338"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span class=""mi"" id=""MathJax-Span-339"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-340"" style=""font-family: STIXGeneral; font-style: italic;"">n</span><span class=""mi"" id=""MathJax-Span-341"" style=""font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mi"" id=""MathJax-Span-342"" style=""font-family: STIXGeneral; font-style: italic;"">i</span><span class=""mi"" id=""MathJax-Span-343"" style=""font-family: STIXGeneral; font-style: italic;"">d<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.027em;""></span></span><span class=""mi"" id=""MathJax-Span-344"" style=""font-family: STIXGeneral; font-style: italic;"">a</span><span class=""mi"" id=""MathJax-Span-345"" style=""font-family: STIXGeneral; font-style: italic;"">t<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.018em;""></span></span><span class=""mi"" id=""MathJax-Span-346"" style=""font-family: STIXGeneral; font-style: italic;"">e</span><span class=""mi"" id=""MathJax-Span-347"" style=""font-family: STIXGeneral; font-style: italic;"">s</span><span class=""mo"" id=""MathJax-Span-348"" style=""font-family: STIXGeneral;"">(</span><span class=""msubsup"" id=""MathJax-Span-349""><span style=""display: inline-block; position: relative; width: 0.944em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-350"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mi"" id=""MathJax-Span-351"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span><span class=""mo"" id=""MathJax-Span-352"" style=""font-family: STIXGeneral;"">)</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.056em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-40"">C_{k+1}=GenerateCandidates(L_k)</script>，具体来说在Apriori算法中，它所使用的策略如下： <br>
<center><img src=""http://img.blog.csdn.net/20161206112355408"" width=""480""> <br>
</center> <br>
可见生成策略由两部分组成，首先是self-joining部分。例如，假设我们有一个<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-41-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-353"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.403em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-354""><span class=""msubsup"" id=""MathJax-Span-355""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-356"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-357"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-41"">L_3</script>={abc, abd, acd, ace, bcd}（注意这已经是排好序的}。选择两个itemsets，它们满足条件：前<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-42-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-358"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-359""><span class=""mi"" id=""MathJax-Span-360"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-42"">k</script>-1个item都相同，但最后一个item不同，把它们组成一个新的<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-43-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-361"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-362""><span class=""msubsup"" id=""MathJax-Span-363""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-364"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-365""><span class=""mrow"" id=""MathJax-Span-366""><span class=""mi"" id=""MathJax-Span-367"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-368"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-369"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-43"">C_{k+1}</script>的项集<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-44-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-370"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-371""><span class=""mi"" id=""MathJax-Span-372"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-44"">c</script>。如下图所示，{abc}和{abd}组成{abcd}，{acd}和{ace}组成{acde}。生成策略的第二部分是pruning。对于一个位于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-45-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-373"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-374""><span class=""msubsup"" id=""MathJax-Span-375""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-376"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-377""><span class=""mrow"" id=""MathJax-Span-378""><span class=""mi"" id=""MathJax-Span-379"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-380"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-381"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-45"">C_{k+1}</script>中的项集<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-46-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-382"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-383""><span class=""mi"" id=""MathJax-Span-384"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-46"">c</script>，<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-47-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-385"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-386""><span class=""mi"" id=""MathJax-Span-387"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-47"">s</script>是<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-48-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-388"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-389""><span class=""mi"" id=""MathJax-Span-390"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-48"">c</script>的大小为<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-49-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-391"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.685em, 1000em, 2.752em, -0.547em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-392""><span class=""mi"" id=""MathJax-Span-393"" style=""font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.017em;""></span></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.876em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-49"">k</script>的子集，如果<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-50-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-394"" style=""width: 0.417em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.374em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.926em, 1000em, 2.754em, -0.545em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-395""><span class=""mi"" id=""MathJax-Span-396"" style=""font-family: STIXGeneral; font-style: italic;"">s</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.62em; vertical-align: -0.081em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-50"">s</script>不存在于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-51-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-397"" style=""width: 1.017em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.935em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.401em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-398""><span class=""msubsup"" id=""MathJax-Span-399""><span style=""display: inline-block; position: relative; width: 0.944em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-400"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mi"" id=""MathJax-Span-401"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.001em; vertical-align: -0.235em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-51"">L_k</script>中，则将<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-52-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-402"" style=""width: 0.483em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.927em, 1000em, 2.752em, -0.531em); top: -2.555em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-403""><span class=""mi"" id=""MathJax-Span-404"" style=""font-family: STIXGeneral; font-style: italic;"">c</span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.617em; vertical-align: -0.078em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-52"">c</script>从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-53-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-405"" style=""width: 2.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.931em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.422em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-406""><span class=""msubsup"" id=""MathJax-Span-407""><span style=""display: inline-block; position: relative; width: 1.922em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-408"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""texatom"" id=""MathJax-Span-409""><span class=""mrow"" id=""MathJax-Span-410""><span class=""mi"" id=""MathJax-Span-411"" style=""font-size: 70.7%; font-family: STIXGeneral; font-style: italic;"">k<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.012em;""></span></span><span class=""mo"" id=""MathJax-Span-412"" style=""font-size: 70.7%; font-family: STIXGeneral;"">+</span><span class=""mn"" id=""MathJax-Span-413"" style=""font-size: 70.7%; font-family: STIXGeneral;"">1</span></span></span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.037em; vertical-align: -0.258em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-53"">C_{k+1}</script>中删除。如下图所示，因为{acde}的子集{cde}并不存在于<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-54-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-414"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.403em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-415""><span class=""msubsup"" id=""MathJax-Span-416""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-417"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-418"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-54"">L_3</script>中，所以我们将{acde}从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-55-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-419"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.393em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-420""><span class=""msubsup"" id=""MathJax-Span-421""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-422"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-423"" style=""font-size: 70.7%; font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.006em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-55"">C_4</script>中删除。最后得到的<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-56-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-424"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.393em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-425""><span class=""msubsup"" id=""MathJax-Span-426""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-427"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-428"" style=""font-size: 70.7%; font-family: STIXGeneral;"">4</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.006em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-56"">C_4</script>，仅包含一个项集{abcd}。 <br>
<center><img src=""http://img.blog.csdn.net/20161206113016411"" width=""250""></center> <br>
回到之前的例子，从<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-57-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-429"" style=""width: 1.083em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 0.997em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.216em, 1000em, 2.393em, -0.569em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-430""><span class=""msubsup"" id=""MathJax-Span-431""><span style=""display: inline-block; position: relative; width: 1.007em; height: 0px;""><span style=""position: absolute; clip: rect(1.715em, 1000em, 2.741em, -0.569em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-432"" style=""font-family: STIXGeneral; font-style: italic;"">L<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.003em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.558em;""><span class=""mn"" id=""MathJax-Span-433"" style=""font-size: 70.7%; font-family: STIXGeneral;"">2</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 0.993em; vertical-align: -0.227em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-57"">L_2</script>到<span class=""MathJax_Preview""></span><span class=""MathJax"" id=""MathJax-Element-58-Frame"" role=""textbox"" aria-readonly=""true"" style=""""><nobr><span class=""math"" id=""MathJax-Span-434"" style=""width: 1.217em; display: inline-block;""><span style=""display: inline-block; position: relative; width: 1.121em; height: 0px; font-size: 107%;""><span style=""position: absolute; clip: rect(1.203em, 1000em, 2.403em, -0.495em); top: -2.056em; left: 0em;""><span class=""mrow"" id=""MathJax-Span-435""><span class=""msubsup"" id=""MathJax-Span-436""><span style=""display: inline-block; position: relative; width: 1.112em; height: 0px;""><span style=""position: absolute; clip: rect(1.702em, 1000em, 2.759em, -0.495em); top: -2.555em; left: 0em;""><span class=""mi"" id=""MathJax-Span-437"" style=""font-family: STIXGeneral; font-style: italic;"">C<span style=""display: inline-block; overflow: hidden; height: 1px; width: 0.022em;""></span></span><span style=""display: inline-block; width: 0px; height: 2.555em;""></span></span><span style=""position: absolute; top: -1.968em; left: 0.663em;""><span class=""mn"" id=""MathJax-Span-438"" style=""font-size: 70.7%; font-family: STIXGeneral;"">3</span><span style=""display: inline-block; width: 0px; height: 2.118em;""></span></span></span></span></span><span style=""display: inline-block; width: 0px; height: 2.056em;""></span></span></span><span style=""border-left: 0em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.017em; vertical-align: -0.238em;""></span></span></nobr></span><script type=""math/tex"" id=""MathJax-Element-58"">C_3</script>的这一步，我们就只能获得{B、C、E}。以上便是Apriori算法的最核心思想。当然在具体实现的时候，如何Count Supports of Candidates也是需要考虑的问题，我们这里略去这部分内容的讨论，有兴趣读者可以参阅文献【3】以了解更多。<p></p>

<hr>



<h2 id=""参考文献"">参考文献</h2>

<p>【1】Wu, X., Kumar, V., Quinlan, J.R., Ghosh, J., Yang, Q., Motoda, H., McLachlan, G.J., Ng, A., Liu, B., Philip, S.Y. and Zhou, Z.H., 2008. Top 10 algorithms in data mining. Knowledge and information systems, 14(1), pp.1-37. (<a href=""http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf"">http://www.cs.uvm.edu/~icdm/algorithms/10Algorithms-08.pdf</a>） </p>

<p>【2】Rakesh Agrawal and Ramakrishnan Srikant Fast algorithms for mining association rules in large databases. Proceedings of the 20th International Conference on Very Large Data Bases, VLDB, pages 487-499, Santiago, Chile, September 1994. (<a href=""http://rakesh.agrawal-family.com/papers/vldb94apriori.pdf"">http://rakesh.agrawal-family.com/papers/vldb94apriori.pdf</a>)</p>

<p>【3】Pang-Ning Tan, Micheale Steinbach, Vipin Kumar. 数据挖掘导论，范明，等译. 人民邮电出版社，2011</p></div>",数据库,2016-12-06 13:32
4612,"前言


  UML（Unified Modeling Language）中文统一建模语言，是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UM...",xiehuimx,http://blog.csdn.net/xiehuimx/article/details/53427452,Java利器之UML类图详解,"<div class=""markdown_views""><h1 id=""前言"">前言</h1>

<blockquote>
  <p>UML（Unified Modeling Language）中文统一建模语言，是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。                       【维基百科】</p>
</blockquote>

<p>最近看一些开源项目的时候，总是看到UML中的类图，一开始自己的做法就是跳过去类图的部分，不过后来又遇到了几次，就决定学习下，不能再选择逃避了，这也是一个即将优秀的程序探索者应该必备的素质。今天把自己学习到的内容记录一下（怕健忘…），相信对类图不清楚的朋友，通过读取这篇文章后也能有一个比较清晰的认识，让你看的懂，画的出。</p>



<h1 id=""类图作用"">类图作用</h1>

<p>类图是软件工程的统一建模语言一种静态结构图，该图描述了系统的类集合，类的属性和类之间的关系。帮助人们简化对系统的理解，它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。学习好类图的绘制，是一位合格的软件工程师应有的技能。</p>



<h1 id=""类的uml图示"">类的UML图示</h1>

<p>在UML类图中，类使用包含类名，属性，方法名及其参数并且用分割线分隔的长方形表示。例如最简单的一个类Person 类有两个属性分别是name和age,并提供对应的get和set方法。java类代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Person.java
 * Author:  Code4Android
 * Purpose: Defines the Class Person
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 4615fa10-38a3-446e-a7d5-59dcb3e786b5 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> f314a698-c3c1-4ec7-a8ea-f8b2df107a29 */</span>
   <span class=""hljs-keyword"">private</span> String name = zhangsan;
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 271c633b-87e5-4b41-9f70-2ce320635014 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> age = <span class=""hljs-number"">23</span>;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> ccf5b7c1-d005-4a5f-b823-9988f2dd6f91 */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">getName</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> name;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 83e01fba-b004-498e-b7ab-778de8be6dfa */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">getAge</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> age;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> name
    *<span class=""hljs-javadoctag""> @pdOid</span> 9525895a-11bf-44a3-afed-b4a014540a98 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setName</span>(String name) {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">this</span>.name=name;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> age
    *<span class=""hljs-javadoctag""> @pdOid</span> 16fd66cc-2af1-4fef-ae98-2a37f495a487 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">void</span> <span class=""hljs-title"">setAge</span>(<span class=""hljs-keyword"">int</span> age) {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">this</span>.age=age;
   }

}</code></pre>

<p>那么用类图表示如下，它很简单的表示出了类的所有信息。</p>

<p><img src=""http://img.blog.csdn.net/20161205102937081"" alt=""这里写图片描述"" title=""""></p>

<p>通过上面的Person的类图，你应该可以看出类图有三部分组成，类名，属性和操作方法</p>



<h2 id=""类名"">类名</h2>

<p>顾名思义就是类的名字，对应于Java类中的类名，如果该类是抽象类的话，在类名右下角会有一个(Abstract)表示，假如Person是一个抽象类的话，则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103047286"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""属性名"">属性名</h2>

<p>UML中的属性名就是Java中的成员变量，当然一个类可以没有属性也可以有任意多个属性。Java类中成员变量的修饰符，类型和默认值都可以在UML类图中体现出来。通用表示方法如下</p>



<pre class=""prettyprint""><code class="" hljs fix""><span class=""hljs-attribute"">可见性  名称:类型 [ </span>=<span class=""hljs-string""> 默认值 ]</span></code></pre>

<p>在Java类中可见性分为三类，分别是private,public 和protected,在类图中分别用符号-、+和#表示。通用表示方法中名称就成员变量的名字，类型就是成员变量的类型如String类型，int类型等，当然也可以是自定义类型。而后面的默认值是可选参数，如果我们没有给成员变量设置初始值，UML类图中就不显示，如上面Person类图，变量name，age没有设置初始值，如果此时我们给name和vaule分别设置默认值zhangsan，23。则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205102818719"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""操作方法"">操作方法</h2>



<pre class=""prettyprint""><code class="" hljs css"">可见性  名称(参数列表) <span class=""hljs-attr_selector"">[ : 返回类型]</span></code></pre>

<p>类的操作方法通用表示方式如上，方法可见性和属性可见性是一致的，名称就是方法名，参数列表是可选像，可以是对个参数也是没有参数，若多个参数用英文逗号隔开，返回类型是一个可选项，表示方法的返回值类型，依赖于具体的编程语言，可以是基本数据类型，也可以是用户自定义类型，还可以是空类型(void)，如果是构造方法，则无返回类型。</p>



<h1 id=""类之间的关系"">类之间的关系</h1>

<p>在UML类图中类与类之间存在多种关系，如泛化(Generalization)关系，实现（Realization)关系，依赖(Dependence)关系，关联（Association）关系，聚合(Aggregation)关系， 组合(Composition)关系。</p>



<h2 id=""泛化generalization关系"">泛化(Generalization)关系</h2>

<p>泛化关系也就是Java中的继承，类和类，接口和接口都可以是继承关系，父类又称作基类或超类，子类又称作派生类，类继承父类后可以实现父类的所以功能，并能拥有父类没有的功能。在UML中，泛化关系可以用带空心三角形的直线来表示；例如我们创建两个Java类Teachers和Students类如下代码</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Teachers.java
 * Author:  Code4Android
 * Purpose: Defines the Class Teachers
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> b54e2d34-d17e-4f2d-993d-563b8e007db4 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Teachers</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 55b38630-1e30-449b-9cb7-f8ef9de59412 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> tNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> f603d47d-a51f-4b0c-b10b-881842374f8a */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">teach</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am teaching""</span>;
   }

}


<span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Students.java
 * Author:  Code4Android
 * Purpose: Defines the Class Students
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 6b8ac239-000e-46d3-8233-962a612c12bd */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Students</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0c7627fd-fa78-4f60-a859-2b90274323e1 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 1f929347-b84a-4a54-9ca9-144de66c742b */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">study</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am learning""</span>;
   }

}
</code></pre>

<p>则UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103413880"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""实现realization关系"">实现（Realization)关系</h2>

<p>实现关系在java中就是一个类和接口之间的关系，接口中一般是没有成员变量，所有操作都是抽象的（abstract修饰），只有声明没有具体的实现，具体实现需在实现该接口的类中。在UML中用与类的表示法类似的方式表示接口，区别可在UML中类图中看出。如我们创建一个交通工具类接口IVehicle,并有一个形式速度方法声明travelSpeed，Java代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  IVehicle.java
 * Author:  Code4Android
 * Purpose: Defines the Interface IVehicle
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 7cbe9f91-a7d9-44b5-a743-280cbc464e61 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">interface</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 5e87ebbc-5647-4dc6-8c3c-d23857662584 */</span>
   <span class=""hljs-keyword"">int</span> travelSpeed();

}</code></pre>

<p>对于交通工具，有很多种，不同交通工具都有一个速度，我们举两个例子，如HighSpeedRail（高铁，时速288KM）和Bicycle（自行车类时速20KM）,则两个实现类代码为</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  HighSpeedRail.java
 * Author:  Code4Android
 * Purpose: Defines the Class HighSpeedRail
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0ae31b48-07b0-4bcd-83ff-a8a7c7d94518 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">HighSpeedRail</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> a7693fd4-d6d4-4e93-a946-380f69011b13 */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">travelSpeed</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">288</span>;
   }

}

<span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Bicycle.java
 * Author:  Code4Android
 * Purpose: Defines the Class Bicycle
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> c212a8c3-88db-48d8-a2a0-d381d2ee7f91 */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Bicycle</span> <span class=""hljs-keyword"">implements</span> <span class=""hljs-title"">IVehicle</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 9ac52769-7489-47b0-9079-4f63f84f1fde */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">travelSpeed</span>() {
      <span class=""hljs-comment"">// TODO: implement</span>
      <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">20</span>;
   }

}</code></pre>

<p>在UML中实现接口用虚线和带空心的三角形表示。则上面对应的UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161204124436841"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""依赖dependence关系"">依赖(Dependence)关系</h2>

<p>依赖关系是类与类之间最弱的关系，依赖可以简单的理解一个类使用了另一个类，这种使用关系具有临时性特征，但是一个类又会由于另一个类的改变而受到影响，例如在上面举的例子中，假如我们的Students类拥有一个Bicycle，那么要获取移动速度则需要使用Bicycle中获取速度的方法travelSpeed()方法。此时Students代码如下</p>



<pre class=""prettyprint""><code class="" hljs java""><span class=""hljs-javadoc"">/***********************************************************************
 * Module:  Students.java
 * Author:  Code4Android
 * Purpose: Defines the Class Students
 ***********************************************************************/</span>

<span class=""hljs-keyword"">import</span> java.util.*;

<span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 6b8ac239-000e-46d3-8233-962a612c12bd */</span>
<span class=""hljs-keyword"">public</span> <span class=""hljs-class""><span class=""hljs-keyword"">class</span> <span class=""hljs-title"">Students</span> <span class=""hljs-keyword"">extends</span> <span class=""hljs-title"">Person</span> {</span>
   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 0c7627fd-fa78-4f60-a859-2b90274323e1 */</span>
   <span class=""hljs-keyword"">private</span> <span class=""hljs-keyword"">int</span> sNumber;

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @pdOid</span> 1f929347-b84a-4a54-9ca9-144de66c742b */</span>
   <span class=""hljs-keyword"">public</span> String <span class=""hljs-title"">study</span>() {
      <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""I am learning""</span>;
   }

   <span class=""hljs-javadoc"">/**<span class=""hljs-javadoctag""> @param</span> bicycle
    *<span class=""hljs-javadoctag""> @pdOid</span> 82bd76ff-f70c-4e25-bea5-8de19db4699c */</span>
   <span class=""hljs-keyword"">public</span> <span class=""hljs-keyword"">int</span> <span class=""hljs-title"">moveSpeed</span>(Bicycle bicycle) {
      <span class=""hljs-keyword"">return</span> bicycle.travelSpeed();
   }

}</code></pre>

<p>在UML中一栏用带箭头的虚线表示依赖，对应的UML类图如下</p>

<p><img src=""http://img.blog.csdn.net/20161205103645029"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""关联association关系"">关联（Association）关系</h2>

<p>关联关系表示一个类和另一类有联系，例如在上面的举例中每个Teachers都有个家庭住址与之对应，而此时Teacher和Address就形成了一对一的关联关系。如下</p>

<p><img src=""http://img.blog.csdn.net/20161205105807907"" alt=""这里写图片描述"" title=""""></p>

<p>关联关系是一种包含关系，在UML中用一个带箭头的实线表示，箭头指向被包含类。在上图中你可能会发现在线上有1 ..1,这个是说明包含关系的。在UML类中有如下几种。</p>



<pre class=""prettyprint""><code class="" hljs markdown"">1..1 表示另一个类的一个对象只与该类的一个对象有关系

0..* 表示另一个类的一个对象与该类的零个或多个对象有关系

1..* 表示另一个类的一个对象与该类的一个或多个对象有关系

0..1 表示另一个类的一个对象没有或只与该类的一个对象有关系

<span class=""hljs-bullet"">* </span>任意多个对象关联</code></pre>



<h2 id=""聚合aggregation关系"">聚合(Aggregation)关系</h2>

<p>聚合关系是表示整体与部分的关系，但是部分可以脱离整体而存在。例如一个Teachers对象有一辆汽车Car，此时Car就是Teachers的一部分，但是Car可以脱离Teachers而存在。在UML类中聚合关系用带空心菱形的直线表示。 <br>
<img src=""http://img.blog.csdn.net/20161205115412548"" alt=""这里写图片描述"" title=""""></p>



<h2 id=""组合composition关系"">组合(Composition)关系</h2>

<p>组合关系也是一种部分和整体的关系，但是部分存活周期受到整体的影响，若整体不存在则部分也将不存在。此时部分需在整体的构造方法中创建。在UML类中，组合关系用带实心菱形的直线表示。</p>

<p><img src=""http://img.blog.csdn.net/20161205115204805"" alt=""这里写图片描述"" title=""""></p>

<p>在文章的最后，附上本篇文章所画的完整的UML类图。</p>

<p><img src=""http://img.blog.csdn.net/20161205122009647"" alt=""这里写图片描述"" title=""""></p>

<p>到此，本篇文章真的结束了，若文章有不足或者错误的地方，欢迎指正，以防止给其他读者错误引导。最后感谢<a href=""http://blog.csdn.net/LoveLion/article/category/738449"">LoveLion</a>的系列文章。</p></div>",移动开发,2016-12-06 15:48
5511,今天要写的这篇博文意义重大，也是网上很少有的，这是在我工作中学会的一项技术，当然，它也是由简单的问题组合而来的。如何在安卓中写C语言程序，调试安卓驱动，测试程序的的一项重要技能，下面我就不说废话了，直...,morixinguan,http://blog.csdn.net/morixinguan/article/details/53469818,在android系统上写C语言程序--开机启动该程序不进入安卓系统,,"移动开发,MTK平台Android系统开发与定制",2016-12-06 15:48
5001,本文属于 SQL Server 扩展事件（Extented Events）从入门到进阶 系列	由于工作需要，决定深入研究SQL Server的扩展事件（Extended Events/xEvents）...,DBA_Huangzj,http://blog.csdn.net/dba_huangzj/article/details/53423971,SQL Server 扩展事件（Extented Events）从入门到进阶（1）——从SQL Trace到Extented Events,,"数据库,SQL Server DBA",2016-12-06 17:00